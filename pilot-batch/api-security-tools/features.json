{
  "metadata": {
    "topic": "API security tools",
    "generated_at": "2025-10-29T15:56:01.167472",
    "repositories_analyzed": 11,
    "total_features": 712,
    "unique_features": 484,
    "deduplication_rate": 0.3202247191011236
  },
  "repositories": [
    {
      "name": "arainho/awesome-api-security",
      "url": "https://github.com/arainho/awesome-api-security",
      "stars": 3541,
      "language": "Unknown",
      "features": [
        {
          "text": "enable you to lookup whether a private key is used for things like tls or as a github ssh key for a user",
          "source_url": "https://github.com/arainho/awesome-api-security#L50",
          "evidence": "| [Private key usage verification ](https://github.com/trufflesecurity/driftwood) | Driftwood is a tool that can enable you to lookup whether a private key is used for things like TLS or as a GitHub SSH key for a user. |"
        },
        {
          "text": "create secure apis for any situation",
          "source_url": "https://github.com/arainho/awesome-api-security#L62",
          "evidence": "| Neil Madden | Manning   | [API Security in Action](https://www.manning.com/books/api-security-in-action)| API Security in Action teaches you how to create secure APIs for any situation. |"
        },
        {
          "text": "include in any api penetration testing process",
          "source_url": "https://github.com/arainho/awesome-api-security#L81",
          "evidence": "| API Mike, @api_sec | [API penetration testing checklist](https://apimike.com/api-penetration-testing-checklist) | Common steps to include in any API penetration testing process. |"
        },
        {
          "text": "supporting elements",
          "source_url": "https://github.com/arainho/awesome-api-security#L119",
          "evidence": "| [The API Specification Toolbox](http://api.specificationtoolbox.com) | This Toolbox goal is to try and map out all of the different API specifications in use, as well as the services, tooling, extensions, and other supporting elements. |"
        },
        {
          "text": "perform a security test on an api",
          "source_url": "https://github.com/arainho/awesome-api-security#L207",
          "evidence": "| [API Security Testing](https://sphericaldefence.com/api-security-testing) | Spherical Defence | Principles of API Security Testing and how to perform a Security Test on an API. |"
        },
        {
          "text": "performing batch graphql queries and mutations",
          "source_url": "https://github.com/arainho/awesome-api-security#L269",
          "evidence": "| [BatchQL](https://github.com/assetnote/batchql) | GraphQL security auditing script with a focus on performing batch GraphQL queries and mutations. |"
        },
        {
          "text": "generates and runs attacks that are based on it as an output",
          "source_url": "https://github.com/arainho/awesome-api-security#L290",
          "evidence": "| [Automatic API Attack Tool](https://github.com/imperva/automatic-api-attack-tool) | Imperva's customizable API attack tool takes an API specification as an input, generates and runs attacks that are based on it as an output. |"
        },
        {
          "text": "runs attacks that are based on it as an output",
          "source_url": "https://github.com/arainho/awesome-api-security#L290",
          "evidence": "| [Automatic API Attack Tool](https://github.com/imperva/automatic-api-attack-tool) | Imperva's customizable API attack tool takes an API specification as an input, generates and runs attacks that are based on it as an output. |"
        },
        {
          "text": "supports postgresql, clickhouse, mysql, snowflake, bigquery",
          "source_url": "https://github.com/arainho/awesome-api-security#L292",
          "evidence": "| [CentralMind/Gateway](https://github.com/centralmind/gateway) | Generate production ready APIs using AI based on database schema and data, optimized for AI-Agents. Supports PostgreSQL, Clickhouse, MySQL, Snowflake, BigQuery. |"
        },
        {
          "text": "generate production ready apis using ai based on database schema and data, optimized for ai-agents",
          "source_url": "https://github.com/arainho/awesome-api-security#L292",
          "evidence": "| [CentralMind/Gateway](https://github.com/centralmind/gateway) | Generate production ready APIs using AI based on database schema and data, optimized for AI-Agents. Supports PostgreSQL, Clickhouse, MySQL, Snowflake, BigQuery. |"
        },
        {
          "text": "provide a framework for rest security research",
          "source_url": "https://github.com/arainho/awesome-api-security#L303",
          "evidence": "| [REST-Attacker](https://github.com/RUB-NDS/REST-Attacker) | Designed as a proof-of-concept for the feasibility of testing generic real-world REST implementations. Its goal is to provide a framework for REST security research. |"
        },
        {
          "text": "supports all three settings of testing (black box, grey box and white box)",
          "source_url": "https://github.com/arainho/awesome-api-security#L308",
          "evidence": "| [WuppieFuzz](https://github.com/TNO-S3/WuppieFuzz) | WuppieFuzz is a coverage-guided REST API fuzzer developed on top of LibAFL, targeting a wide audience of end-users, with a strong focus on ease-of-use, explainability of the discovered flaws and modularity. WuppieFuzz supports all three settings of testing (black box, grey box and white box). |"
        },
        {
          "text": "plugin written in python to detect current and discover new wsdl (web service definition language) files",
          "source_url": "https://github.com/arainho/awesome-api-security#L312",
          "evidence": "| [wsdl-wizard](https://github.com/portswigger/wsdl-wizard)| WSDL Wizard is a Burp Suite plugin written in Python to detect current and discover new WSDL (Web Service Definition Language) files. |"
        },
        {
          "text": "provides training courses for application security professionals |",
          "source_url": "https://github.com/arainho/awesome-api-security#L325",
          "evidence": "| APIsec | [API Security University](https://university.apisec.ai) | APIsec University provides training courses for application security professionals |"
        },
        {
          "text": "build an api to hack](https://hackxpert",
          "source_url": "https://github.com/arainho/awesome-api-security#L336",
          "evidence": "| Wesley Thijs | [Let's build an API to hack](https://hackxpert.com/blog/API-Hacking-Excercises/) | API Hacking Excercises by @TheXSSrat |"
        },
        {
          "text": "provide private details will be considered out of scope and may be closed or ignored",
          "source_url": "https://github.com/arainho/awesome-api-security#L352",
          "evidence": "2. **Out of Scope:** Pull requests that involve vendor-specific content, advertisements, commercial or restricted products, free trials, freemium services, closed-source (proprietary) software, or services that require users to provide private details will be considered out of scope and may be closed or ignored."
        },
        {
          "text": "create a new branch",
          "source_url": "https://github.com/arainho/awesome-api-security#L367",
          "evidence": "- create a new branch"
        },
        {
          "text": "create a new branch",
          "source_url": "https://github.com/arainho/awesome-api-security#L367",
          "evidence": "- create a new branch"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "microsoft/restler-fuzzer",
      "url": "https://github.com/microsoft/restler-fuzzer",
      "stars": 2826,
      "language": "Python",
      "features": [
        {
          "text": "analyzes its entire specification,",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L8",
          "evidence": "with an OpenAPI (formerly Swagger) specification, RESTler analyzes its entire specification,"
        },
        {
          "text": "generates and executes tests that exercise the service through its rest api",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L9",
          "evidence": "and then generates and executes tests that exercise the service through its REST API."
        },
        {
          "text": "executes tests that exercise the service through its rest api",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L9",
          "evidence": "and then generates and executes tests that exercise the service through its REST API."
        },
        {
          "text": "allows restler to explore deeper service states",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L14",
          "evidence": "This intelligence allows RESTler to explore deeper service states"
        },
        {
          "text": "includes multiple test generation strategies",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L26",
          "evidence": "RESTler includes multiple test generation strategies.  In order to get a comprehensive comparative view w.r.t. to (i) efficiency"
        },
        {
          "text": "provides a different trade-off between breadth and depth of state space exploration",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L30",
          "evidence": "because each one provides a different trade-off between breadth and depth of state space exploration."
        },
        {
          "text": "build status](https://dev",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L43",
          "evidence": "[![Build Status](https://dev.azure.com/ms/restler-fuzzer/_apis/build/status/restler-build-validation?branchName=main)](https://dev.azure.com/ms/restler-fuzzer/_build/latest?definitionId=422&branchName=main)"
        },
        {
          "text": "support for macos is also enabled",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L48",
          "evidence": "RESTler was designed to run on 64-bit machines with Windows or Linux.  Experimental support for macOS is also enabled."
        },
        {
          "text": "run on 64-bit machines with windows or linux",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L48",
          "evidence": "RESTler was designed to run on 64-bit machines with Windows or Linux.  Experimental support for macOS is also enabled."
        },
        {
          "text": "build instructions**",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L50",
          "evidence": "### **Build instructions**"
        },
        {
          "text": "build -t restler",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L57",
          "evidence": "docker build -t restler ."
        },
        {
          "text": "execute fuzzing inside isolated docker containers",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L62",
          "evidence": "You can then use this docker image as basis to add the application under test to execute fuzzing inside isolated docker containers."
        },
        {
          "text": "create a directory where you'd like to place the restler binaries:",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L69",
          "evidence": "Create a directory where you'd like to place the RESTler binaries:"
        },
        {
          "text": "run the following python script:",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L73",
          "evidence": "Switch to the repo root directory and run the following Python script:"
        },
        {
          "text": "runs in 4 main modes (in order):",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L84",
          "evidence": "RESTler runs in 4 main modes (in order):"
        },
        {
          "text": "generate a restler grammar",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L86",
          "evidence": "1. **Compile:** from an OpenAPI JSON or YAML definition (and optionally examples), generate a RESTler grammar. See [Compiling](./docs/user-guide/Compiling.md)."
        },
        {
          "text": "execute quickly all of the endpoints+methods in a compiled restler grammar for debugging the test setup and compute what parts of the openapi definition are covered",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L87",
          "evidence": "2. **Test:** execute quickly all of the endpoints+methods in a compiled RESTler grammar for debugging the test setup and compute what parts of the OpenAPI definition are covered. This mode is also called a *smoketest*."
        },
        {
          "text": "execute once every endpoint+method in a compiled restler grammar with a default set of checkers to see if bugs can be found quickly",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L89",
          "evidence": "3. **Fuzz-lean:** execute once every endpoint+method in a compiled RESTler grammar with a default set of checkers to see if bugs can be found quickly. See [Fuzzing](./docs/user-guide/Fuzzing.md)."
        },
        {
          "text": "create outages in the service under test if the service is poorly implemented (e",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L91",
          "evidence": "**Warning:** This type of fuzzing is more aggressive and may create outages in the service under test if the service is poorly implemented (e.g., fuzzing might create resource leaks, perf degradation, backend corruptions, etc.)."
        },
        {
          "text": "create resource leaks, perf degradation, backend corruptions, etc",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L91",
          "evidence": "**Warning:** This type of fuzzing is more aggressive and may create outages in the service under test if the service is poorly implemented (e.g., fuzzing might create resource leaks, perf degradation, backend corruptions, etc.)."
        },
        {
          "text": "provides a replay log that can be used to reproduce the bug (see [replay](",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L106",
          "evidence": "When a bug is found, RESTler reports bugs triaged in bug buckets, and provides a replay log that can be used to reproduce the bug (see [Replay](./docs/user-guide/Replay.md))."
        },
        {
          "text": "provide a cla and decorate the pr appropriately (e",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L131",
          "evidence": "to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the"
        },
        {
          "text": "enable you and microsoft to collect data from users of your applications",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L146",
          "evidence": "The software may collect information about you and your use of the software and send it to Microsoft. Microsoft may use this information to provide services and improve our products and services. You may turn off the telemetry as described in the repository. There are also some features in the software that may enable you and Microsoft to collect data from users of your applications. If you use these features, you must comply with applicable law, including providing appropriate notices to users of your applications together with a copy of Microsoft's privacy statement. Our privacy statement is located at https://go.microsoft.com/fwlink/?LinkID=824704. You can learn more about data collection and use in the help documentation and our privacy statement. Your use of the software operates as your consent to these practices."
        },
        {
          "text": "provide services and improve our products and services",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L146",
          "evidence": "The software may collect information about you and your use of the software and send it to Microsoft. Microsoft may use this information to provide services and improve our products and services. You may turn off the telemetry as described in the repository. There are also some features in the software that may enable you and Microsoft to collect data from users of your applications. If you use these features, you must comply with applicable law, including providing appropriate notices to users of your applications together with a copy of Microsoft's privacy statement. Our privacy statement is located at https://go.microsoft.com/fwlink/?LinkID=824704. You can learn more about data collection and use in the help documentation and our privacy statement. Your use of the software operates as your consent to these practices."
        },
        {
          "text": "*Warning:** This type of fuzzing is more aggressive and may create outages in the service under test if the service is poorly implemented (e.g., fuzzing might create resource leaks, perf degradation, backend corruptions, etc.).",
          "source_url": "https://github.com/microsoft/restler-fuzzer#L91",
          "evidence": "**Warning:** This type of fuzzing is more aggressive and may create outages in the service under test if the service is poorly implemented (e.g., fuzzing might create resource leaks, perf degradation, backend corruptions, etc.)."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "IBM/mcp-context-forge",
      "url": "https://github.com/IBM/mcp-context-forge",
      "stars": 2751,
      "language": "Python",
      "features": [
        {
          "text": "*A2A Configuration Effects:**",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1184",
          "evidence": "**A2A Configuration Effects:**"
        },
        {
          "text": "`MCPGATEWAY_A2A_ENABLED=false`: Completely disables A2A features (API endpoints return 404, admin tab hidden)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1185",
          "evidence": "- `MCPGATEWAY_A2A_ENABLED=false`: Completely disables A2A features (API endpoints return 404, admin tab hidden)"
        },
        {
          "text": "`MCPGATEWAY_A2A_METRICS_ENABLED=false`: Disables metrics collection while keeping functionality",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1186",
          "evidence": "- `MCPGATEWAY_A2A_METRICS_ENABLED=false`: Disables metrics collection while keeping functionality"
        },
        {
          "text": "build badges === -->",
          "source_url": "https://github.com/IBM/mcp-context-forge#L7",
          "evidence": "<!-- === CI / Security / Build Badges === -->"
        },
        {
          "text": "build python package](https://github",
          "source_url": "https://github.com/IBM/mcp-context-forge#L8",
          "evidence": "[![Build Python Package](https://github.com/IBM/mcp-context-forge/actions/workflows/python-package.yml/badge.svg)](https://github.com/IBM/mcp-context-forge/actions/workflows/python-package.yml)&nbsp;"
        },
        {
          "text": "build & deploy === -->",
          "source_url": "https://github.com/IBM/mcp-context-forge#L15",
          "evidence": "<!-- === Container Build & Deploy === -->"
        },
        {
          "text": "runs as a fully compliant mcp server, deployable via pypi or docker, and scales to multi-cluster environments on kubernetes with redis-backed federation and caching",
          "source_url": "https://github.com/IBM/mcp-context-forge#L26",
          "evidence": "ContextForge MCP Gateway is a feature-rich gateway, proxy and MCP Registry that federates MCP and REST services - unifying discovery, auth, rate-limiting, observability, virtual servers, multi-transport protocols, and an optional Admin UI into one clean endpoint for your AI clients. It runs as a fully compliant MCP server, deployable via PyPI or Docker, and scales to multi-cluster environments on Kubernetes with Redis-backed federation and caching."
        },
        {
          "text": "run (copy-paste friendly)](#1---install--run-copy-paste-friendly)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L37",
          "evidence": "* 3.1. [1 - Install & run (copy-paste friendly)](#1---install--run-copy-paste-friendly)"
        },
        {
          "text": "create an on-the-spot venv & run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L50",
          "evidence": "* 5.1.2. [2 - Create an on-the-spot venv & run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)"
        },
        {
          "text": "run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L50",
          "evidence": "* 5.1.2. [2 - Create an on-the-spot venv & run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)"
        },
        {
          "text": "runs through uvx)](#claude-desktop-json-runs-through-uvx)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L51",
          "evidence": "* 5.1.3. [Claude Desktop JSON (runs through **uvx**)](#claude-desktop-json-runs-through-uvx)"
        },
        {
          "text": "build (automatic)](#2---first-time-build-automatic)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L55",
          "evidence": "* 6.2. [2 - First-Time Build (Automatic)](#2---first-time-build-automatic)"
        },
        {
          "text": "plugin configuration](#plugin-configuration)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L87",
          "evidence": "* 10.19. [Plugin Configuration](#plugin-configuration)"
        },
        {
          "text": "configures peer gateways (via mdns or manual)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L162",
          "evidence": "* Auto-discovers or configures peer gateways (via mDNS or manual)"
        },
        {
          "text": "performs health checks and merges remote registries transparently",
          "source_url": "https://github.com/IBM/mcp-context-forge#L163",
          "evidence": "* Performs health checks and merges remote registries transparently"
        },
        {
          "text": "supports redis-backed syncing and fail-over",
          "source_url": "https://github.com/IBM/mcp-context-forge#L164",
          "evidence": "* Supports Redis-backed syncing and fail-over"
        },
        {
          "text": "support for headers, tokens, and custom auth",
          "source_url": "https://github.com/IBM/mcp-context-forge#L184",
          "evidence": "* Support for headers, tokens, and custom auth"
        },
        {
          "text": "export capabilities",
          "source_url": "https://github.com/IBM/mcp-context-forge#L202",
          "evidence": "* Real-time log viewer with filtering, search, and export capabilities"
        },
        {
          "text": "run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest",
          "source_url": "https://github.com/IBM/mcp-context-forge#L223",
          "evidence": "docker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest"
        },
        {
          "text": "configure gateway",
          "source_url": "https://github.com/IBM/mcp-context-forge#L225",
          "evidence": "# Configure gateway"
        },
        {
          "text": "export otel_enable_observability=true",
          "source_url": "https://github.com/IBM/mcp-context-forge#L226",
          "evidence": "export OTEL_ENABLE_OBSERVABILITY=true"
        },
        {
          "text": "export otel_traces_exporter=otlp",
          "source_url": "https://github.com/IBM/mcp-context-forge#L227",
          "evidence": "export OTEL_TRACES_EXPORTER=otlp"
        },
        {
          "text": "export otel_exporter_otlp_endpoint=http://localhost:4317",
          "source_url": "https://github.com/IBM/mcp-context-forge#L228",
          "evidence": "export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317"
        },
        {
          "text": "run gateway - traces automatically sent to phoenix",
          "source_url": "https://github.com/IBM/mcp-context-forge#L230",
          "evidence": "# Run gateway - traces automatically sent to Phoenix"
        },
        {
          "text": "customize your settings",
          "source_url": "https://github.com/IBM/mcp-context-forge#L261",
          "evidence": "# Edit .env to customize your settings"
        },
        {
          "text": "run (copy-paste friendly)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L273",
          "evidence": "### 1 - Install & run (copy-paste friendly)"
        },
        {
          "text": "customize the configuration",
          "source_url": "https://github.com/IBM/mcp-context-forge#L282",
          "evidence": "# 2\ufe0f\u20e3  Copy and customize the configuration"
        },
        {
          "text": "customize your settings (especially passwords",
          "source_url": "https://github.com/IBM/mcp-context-forge#L286",
          "evidence": "# Edit .env to customize your settings (especially passwords!)"
        },
        {
          "text": "export mcpgateway_ui_enabled=true",
          "source_url": "https://github.com/IBM/mcp-context-forge#L289",
          "evidence": "export MCPGATEWAY_UI_ENABLED=true"
        },
        {
          "text": "export mcpgateway_admin_api_enabled=true",
          "source_url": "https://github.com/IBM/mcp-context-forge#L290",
          "evidence": "export MCPGATEWAY_ADMIN_API_ENABLED=true"
        },
        {
          "text": "export platform_admin_email=admin@example",
          "source_url": "https://github.com/IBM/mcp-context-forge#L291",
          "evidence": "export PLATFORM_ADMIN_EMAIL=admin@example.com"
        },
        {
          "text": "export platform_admin_password=changeme",
          "source_url": "https://github.com/IBM/mcp-context-forge#L292",
          "evidence": "export PLATFORM_ADMIN_PASSWORD=changeme"
        },
        {
          "text": "export platform_admin_full_name=\"platform administrator\"",
          "source_url": "https://github.com/IBM/mcp-context-forge#L293",
          "evidence": "export PLATFORM_ADMIN_FULL_NAME=\"Platform Administrator\""
        },
        {
          "text": "generate a bearer token & smoke-test the api",
          "source_url": "https://github.com/IBM/mcp-context-forge#L298",
          "evidence": "# 3\ufe0f\u20e3  Generate a bearer token & smoke-test the API"
        },
        {
          "text": "export mcpgateway_bearer_token=$(python3 -m mcpgateway",
          "source_url": "https://github.com/IBM/mcp-context-forge#L299",
          "evidence": "export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\"
        },
        {
          "text": "customize the configuration",
          "source_url": "https://github.com/IBM/mcp-context-forge#L316",
          "evidence": "# 2\ufe0f\u20e3  Copy and customize the configuration"
        },
        {
          "text": "customize your settings",
          "source_url": "https://github.com/IBM/mcp-context-forge#L320",
          "evidence": "# Edit .env to customize your settings"
        },
        {
          "text": "process -filepath \"mcpgateway",
          "source_url": "https://github.com/IBM/mcp-context-forge#L335",
          "evidence": "# Start-Process -FilePath \"mcpgateway.exe\" -ArgumentList \"--host 0.0.0.0 --port 4444\""
        },
        {
          "text": "run --rm -i ghcr",
          "source_url": "https://github.com/IBM/mcp-context-forge#L360",
          "evidence": "--stdio \"docker run --rm -i ghcr.io/ibm/fast-time-server:latest -transport=stdio\" \\"
        },
        {
          "text": "create a *virtual server* bundling those tools",
          "source_url": "https://github.com/IBM/mcp-context-forge#L389",
          "evidence": "# 4\ufe0f\u20e3  Create a *virtual server* bundling those tools. Use the ID of tools from the tool catalog (Step #3) and pass them in the associatedTools list."
        },
        {
          "text": "include the uuid of the newly created virtual server)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L401",
          "evidence": "# 5\ufe0f\u20e3  List servers (should now include the UUID of the newly created virtual server)"
        },
        {
          "text": "export mcp_auth=\"bearer ${mcpgateway_bearer_token}\"",
          "source_url": "https://github.com/IBM/mcp-context-forge#L415",
          "evidence": "export MCP_AUTH=\"Bearer ${MCPGATEWAY_BEARER_TOKEN}\""
        },
        {
          "text": "export mcp_server_url=http://localhost:4444/servers/uuid_of_server_1/mcp",
          "source_url": "https://github.com/IBM/mcp-context-forge#L416",
          "evidence": "export MCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1/mcp"
        },
        {
          "text": "run it with `uv` or inside docker/podman - see the *containers* section above",
          "source_url": "https://github.com/IBM/mcp-context-forge#L420",
          "evidence": "You can also run it with `uv` or inside Docker/Podman - see the *Containers* section above."
        },
        {
          "text": "export mcp_server_url='http://localhost:4444/servers/uuid_of_server_1/mcp'",
          "source_url": "https://github.com/IBM/mcp-context-forge#L426",
          "evidence": "export MCP_SERVER_URL='http://localhost:4444/servers/UUID_OF_SERVER_1/mcp'"
        },
        {
          "text": "export mcp_auth=\"bearer ${mcpgateway_bearer_token}\"",
          "source_url": "https://github.com/IBM/mcp-context-forge#L427",
          "evidence": "export MCP_AUTH=\"Bearer ${MCPGATEWAY_BEARER_TOKEN}\""
        },
        {
          "text": "run -d --name mcpgateway \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L475",
          "evidence": "docker run -d --name mcpgateway \\"
        },
        {
          "text": "run --rm -it ghcr",
          "source_url": "https://github.com/IBM/mcp-context-forge#L497",
          "evidence": "docker run --rm -it ghcr.io/ibm/mcp-context-forge:0.8.0 \\"
        },
        {
          "text": "run -d --name mcpgateway \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L514",
          "evidence": "docker run -d --name mcpgateway \\"
        },
        {
          "text": "run -d --name mcpgateway \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L544",
          "evidence": "docker run -d --name mcpgateway \\"
        },
        {
          "text": "allows docker to access the local network, allowing you to add mcp servers running on your host",
          "source_url": "https://github.com/IBM/mcp-context-forge#L558",
          "evidence": "Using `--network=host` allows Docker to access the local network, allowing you to add MCP servers running on your host. See [Docker Host network driver documentation](https://docs.docker.com/engine/network/drivers/host/) for more details."
        },
        {
          "text": "allowing you to add mcp servers running on your host",
          "source_url": "https://github.com/IBM/mcp-context-forge#L558",
          "evidence": "Using `--network=host` allows Docker to access the local network, allowing you to add MCP servers running on your host. See [Docker Host network driver documentation](https://docs.docker.com/engine/network/drivers/host/) for more details."
        },
        {
          "text": "run -d --name mcpgateway \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L567",
          "evidence": "podman run -d --name mcpgateway \\"
        },
        {
          "text": "run -d --name mcpgateway \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L585",
          "evidence": "podman run -d --name mcpgateway \\"
        },
        {
          "text": "run -d --name mcpgateway \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L604",
          "evidence": "podman run -d --name mcpgateway \\"
        },
        {
          "text": "generate one in the running container:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L618",
          "evidence": "* **JWT tokens** - Generate one in the running container:"
        },
        {
          "text": "run this from the mcp client",
          "source_url": "https://github.com/IBM/mcp-context-forge#L648",
          "evidence": "The `mcpgateway.wrapper` lets you connect to the gateway over **stdio** while keeping JWT authentication. You should run this from the MCP Client. The example below is just for testing."
        },
        {
          "text": "export mcpgateway_bearer_token=$(python3 -m mcpgateway",
          "source_url": "https://github.com/IBM/mcp-context-forge#L652",
          "evidence": "export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin@example.com --exp 10080 --secret my-test-key)"
        },
        {
          "text": "export mcp_auth=\"bearer ${mcpgateway_bearer_token}\"",
          "source_url": "https://github.com/IBM/mcp-context-forge#L653",
          "evidence": "export MCP_AUTH=\"Bearer ${MCPGATEWAY_BEARER_TOKEN}\""
        },
        {
          "text": "export mcp_server_url='http://localhost:4444/servers/uuid_of_server_1/mcp'",
          "source_url": "https://github.com/IBM/mcp-context-forge#L654",
          "evidence": "export MCP_SERVER_URL='http://localhost:4444/servers/UUID_OF_SERVER_1/mcp'"
        },
        {
          "text": "export mcp_tool_call_timeout=120",
          "source_url": "https://github.com/IBM/mcp-context-forge#L655",
          "evidence": "export MCP_TOOL_CALL_TIMEOUT=120"
        },
        {
          "text": "export mcp_wrapper_log_level=debug  # or off to disable logging",
          "source_url": "https://github.com/IBM/mcp-context-forge#L656",
          "evidence": "export MCP_WRAPPER_LOG_LEVEL=DEBUG  # or OFF to disable logging"
        },
        {
          "text": "export mcp_auth=\"bearer ${mcpgateway_bearer_token}\"",
          "source_url": "https://github.com/IBM/mcp-context-forge#L677",
          "evidence": "export MCP_AUTH=\"Bearer ${MCPGATEWAY_BEARER_TOKEN}\""
        },
        {
          "text": "export mcp_server_url=http://localhost:4444/servers/your_server_uuid",
          "source_url": "https://github.com/IBM/mcp-context-forge#L678",
          "evidence": "export MCP_SERVER_URL=http://localhost:4444/servers/YOUR_SERVER_UUID"
        },
        {
          "text": "create a virtual server",
          "source_url": "https://github.com/IBM/mcp-context-forge#L716",
          "evidence": "# After you add some tools and create a virtual server"
        },
        {
          "text": "export mcp_auth=\"bearer $mcpgateway_bearer_token\"",
          "source_url": "https://github.com/IBM/mcp-context-forge#L738",
          "evidence": "export MCP_AUTH=\"Bearer $MCPGATEWAY_BEARER_TOKEN\""
        },
        {
          "text": "run the stdio wrapper",
          "source_url": "https://github.com/IBM/mcp-context-forge#L760",
          "evidence": "# Run the stdio wrapper"
        },
        {
          "text": "create an on-the-spot venv & run the wrapper",
          "source_url": "https://github.com/IBM/mcp-context-forge#L803",
          "evidence": "#### 2 - Create an on-the-spot venv & run the wrapper"
        },
        {
          "text": "create venv in ~/",
          "source_url": "https://github.com/IBM/mcp-context-forge#L806",
          "evidence": "# Create venv in ~/.venv/mcpgateway (or current dir if you prefer)"
        },
        {
          "text": "run the uv command",
          "source_url": "https://github.com/IBM/mcp-context-forge#L816",
          "evidence": "uv run --directory . -m mcpgateway.wrapper # Use this just for testing, as the Client will run the uv command"
        },
        {
          "text": "runs through uvx)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L819",
          "evidence": "#### Claude Desktop JSON (runs through **uvx**)"
        },
        {
          "text": "build (automatic)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L889",
          "evidence": "### 2 - First-Time Build (Automatic)"
        },
        {
          "text": "run `make install-dev` to pull all dependencies",
          "source_url": "https://github.com/IBM/mcp-context-forge#L894",
          "evidence": "* Run `make install-dev` to pull all dependencies"
        },
        {
          "text": "execute tests to verify the toolchain",
          "source_url": "https://github.com/IBM/mcp-context-forge#L895",
          "evidence": "* Execute tests to verify the toolchain"
        },
        {
          "text": "run tests & linters",
          "source_url": "https://github.com/IBM/mcp-context-forge#L910",
          "evidence": "# Run tests & linters"
        },
        {
          "text": "build artefacts & caches",
          "source_url": "https://github.com/IBM/mcp-context-forge#L918",
          "evidence": "* `make clean` - clear build artefacts & caches"
        },
        {
          "text": "create codespace on main**",
          "source_url": "https://github.com/IBM/mcp-context-forge#L928",
          "evidence": "1. Go to the repo \u2192 **Code \u25b8 Codespaces \u25b8 Create codespace on main**"
        },
        {
          "text": "build in the cloud",
          "source_url": "https://github.com/IBM/mcp-context-forge#L929",
          "evidence": "2. Wait for the container image to build in the cloud"
        },
        {
          "text": "creates / activates a `",
          "source_url": "https://github.com/IBM/mcp-context-forge#L952",
          "evidence": "1. Creates / activates a `.venv` in your home folder `~/.venv/mcpgateway`"
        },
        {
          "text": "run style checks (ruff, mypy, etc",
          "source_url": "https://github.com/IBM/mcp-context-forge#L960",
          "evidence": "make lint          # optional: run style checks (ruff, mypy, etc.)"
        },
        {
          "text": "supports both docker and podman",
          "source_url": "https://github.com/IBM/mcp-context-forge#L967",
          "evidence": "This project supports both Docker and Podman. The Makefile automatically detects"
        },
        {
          "text": "handles image naming differences",
          "source_url": "https://github.com/IBM/mcp-context-forge#L968",
          "evidence": "which runtime is available and handles image naming differences."
        },
        {
          "text": "build  # uses podman if available, otherwise docker",
          "source_url": "https://github.com/IBM/mcp-context-forge#L972",
          "evidence": "make container-build  # Uses podman if available, otherwise docker"
        },
        {
          "text": "build production image",
          "source_url": "https://github.com/IBM/mcp-context-forge#L977",
          "evidence": "make podman            # build production image"
        },
        {
          "text": "run at https://localhost:4444",
          "source_url": "https://github.com/IBM/mcp-context-forge#L978",
          "evidence": "make podman-run-ssl    # run at https://localhost:4444"
        },
        {
          "text": "configure the gateway with sqlite, postgresql (or any other compatible database) in",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1020",
          "evidence": "You can configure the gateway with SQLite, PostgreSQL (or any other compatible database) in .env."
        },
        {
          "text": "run --name mcp-postgres \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1033",
          "evidence": "docker run --name mcp-postgres \\"
        },
        {
          "text": "export your settings:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1049",
          "evidence": "Before upgrading to v0.7.0, **always** backup your database, environment configuration, and export your settings:"
        },
        {
          "text": "export configuration via admin ui or api",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1058",
          "evidence": "# Export configuration via Admin UI or API"
        },
        {
          "text": "configure `platform_admin_email` and other required multi-tenancy settings",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1064",
          "evidence": "1. **Update `.env`** - Copy new settings: `cp .env.example .env` then configure `PLATFORM_ADMIN_EMAIL` and other required multi-tenancy settings"
        },
        {
          "text": "run migration** - database schema updates automatically: `python3 -m mcpgateway",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1065",
          "evidence": "2. **Run migration** - Database schema updates automatically: `python3 -m mcpgateway.bootstrap_db`"
        },
        {
          "text": "import your exported configuration via admin ui",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1073",
          "evidence": "4. **Restore configuration**: Import your exported configuration via Admin UI"
        },
        {
          "text": "generate tokens via:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1138",
          "evidence": "> * Generate tokens via:"
        },
        {
          "text": "export mcpgateway_bearer_token=$(python3 -m mcpgateway",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1141",
          "evidence": ">   export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin@example.com --exp 0 --secret my-test-key)"
        },
        {
          "text": "allow non-interactive api clients to authenticate securely",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1144",
          "evidence": "> * Tokens allow non-interactive API clients to authenticate securely."
        },
        {
          "text": "support sse authentication",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1146",
          "evidence": "> \ud83e\uddea Set `AUTH_REQUIRED=false` during development if you want to disable all authentication (e.g. for local testing or open APIs) or clients that don't support SSE authentication."
        },
        {
          "text": "support authenticated sse, while still ensuring the gateway uses authentication",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1147",
          "evidence": "> In production, you should use the SSE to stdio `mcpgateway-wrapper` for such tools that don't support authenticated SSE, while still ensuring the gateway uses authentication."
        },
        {
          "text": "enable the interactive admin dashboard | `false` | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1157",
          "evidence": "| `MCPGATEWAY_UI_ENABLED`        | Enable the interactive Admin dashboard | `false` | bool    |"
        },
        {
          "text": "enable api endpoints for admin ops     | `false` | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1158",
          "evidence": "| `MCPGATEWAY_ADMIN_API_ENABLED` | Enable API endpoints for admin ops     | `false` | bool    |"
        },
        {
          "text": "enable bulk import endpoint for tools | `true`  | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1159",
          "evidence": "| `MCPGATEWAY_BULK_IMPORT_ENABLED` | Enable bulk import endpoint for tools | `true`  | bool    |"
        },
        {
          "text": "import endpoint for tools | `true`  | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1159",
          "evidence": "| `MCPGATEWAY_BULK_IMPORT_ENABLED` | Enable bulk import endpoint for tools | `true`  | bool    |"
        },
        {
          "text": "import request | `200` | int |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1160",
          "evidence": "| `MCPGATEWAY_BULK_IMPORT_MAX_TOOLS` | Maximum number of tools per bulk import request | `200` | int |"
        },
        {
          "text": "import endpoint (requests per minute) | `10` | int |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1161",
          "evidence": "| `MCPGATEWAY_BULK_IMPORT_RATE_LIMIT` | Rate limit for bulk import endpoint (requests per minute) | `10` | int |"
        },
        {
          "text": "enable contextforge ui features        | `true`  | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1163",
          "evidence": "| `MCPCONTEXT_UI_ENABLED`        | Enable ContextForge UI features        | `true`  | bool    |"
        },
        {
          "text": "allows importing up to 200 tools in a single request via `/admin/tools/import`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1166",
          "evidence": "> \ud83d\udce5 The bulk import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`."
        },
        {
          "text": "import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1166",
          "evidence": "> \ud83d\udce5 The bulk import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`."
        },
        {
          "text": "importing up to 200 tools in a single request via `/admin/tools/import`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1166",
          "evidence": "> \ud83d\udce5 The bulk import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`."
        },
        {
          "text": "enable a2a agent features             | `true`  | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1173",
          "evidence": "| `MCPGATEWAY_A2A_ENABLED`       | Enable A2A agent features             | `true`  | bool    |"
        },
        {
          "text": "enable a2a agent metrics collection | `true`  | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1177",
          "evidence": "| `MCPGATEWAY_A2A_METRICS_ENABLED` | Enable A2A agent metrics collection | `true`  | bool    |"
        },
        {
          "text": "track agent performance, success rates, and response times",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1180",
          "evidence": "> \ud83d\udcca **Metrics**: Track agent performance, success rates, and response times"
        },
        {
          "text": "enables natural language interaction with tools, resources, and prompts exposed by mcp servers",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1190",
          "evidence": "The LLM Chat MCP Client allows you to interact with MCP servers using conversational AI from multiple LLM providers. This feature enables natural language interaction with tools, resources, and prompts exposed by MCP servers."
        },
        {
          "text": "allows you to interact with mcp servers using conversational ai from multiple llm providers",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1190",
          "evidence": "The LLM Chat MCP Client allows you to interact with MCP servers using conversational AI from multiple LLM providers. This feature enables natural language interaction with tools, resources, and prompts exposed by MCP servers."
        },
        {
          "text": "enable llm chat functionality          | `false` | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1194",
          "evidence": "| `LLMCHAT_ENABLED`             | Enable LLM Chat functionality          | `false` | bool    |"
        },
        {
          "text": "generate             | (none)  | int     |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1206",
          "evidence": "| `AZURE_OPENAI_MAX_TOKENS`     | Maximum tokens to generate             | (none)  | int     |"
        },
        {
          "text": "generate             | `4096`  | int     |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1225",
          "evidence": "| `ANTHROPIC_MAX_TOKENS`        | Maximum tokens to generate             | `4096`  | int     |"
        },
        {
          "text": "generate             | `4096`  | int     |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1235",
          "evidence": "| `AWS_BEDROCK_MAX_TOKENS`      | Maximum tokens to generate             | `4096`  | int     |"
        },
        {
          "text": "enables llm chat functionality with the selected provider",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1266",
          "evidence": "- `LLMCHAT_ENABLED=true`: Enables LLM Chat functionality with the selected provider"
        },
        {
          "text": "enable email-based authentication system         | `true`                | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1294",
          "evidence": "| `EMAIL_AUTH_ENABLED`          | Enable email-based authentication system         | `true`                | bool    |"
        },
        {
          "text": "enable jwt authentication for mcp client operations | `true`            | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1313",
          "evidence": "| `MCP_CLIENT_AUTH_ENABLED`     | Enable JWT authentication for MCP client operations | `true`            | bool    |"
        },
        {
          "text": "create users from sso providers    | `true`                | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1324",
          "evidence": "| `SSO_AUTO_CREATE_USERS`       | Automatically create users from SSO providers    | `true`                | bool    |"
        },
        {
          "text": "enable github oauth authentication               | `false`               | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1333",
          "evidence": "| `SSO_GITHUB_ENABLED`          | Enable GitHub OAuth authentication               | `false`               | bool    |"
        },
        {
          "text": "enable google oauth authentication               | `false`               | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1341",
          "evidence": "| `SSO_GOOGLE_ENABLED`          | Enable Google OAuth authentication               | `false`               | bool    |"
        },
        {
          "text": "enable ibm security verify oidc authentication   | `false`               | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1349",
          "evidence": "| `SSO_IBM_VERIFY_ENABLED`      | Enable IBM Security Verify OIDC authentication   | `false`               | bool    |"
        },
        {
          "text": "enable keycloak oidc authentication              | `false`                    | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1357",
          "evidence": "| `SSO_KEYCLOAK_ENABLED`              | Enable Keycloak OIDC authentication              | `false`                    | bool    |"
        },
        {
          "text": "enable microsoft entra id oidc authentication    | `false`               | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1371",
          "evidence": "| `SSO_ENTRA_ENABLED`           | Enable Microsoft Entra ID OIDC authentication    | `false`               | bool    |"
        },
        {
          "text": "enable generic oidc provider authentication      | `false`                    | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1379",
          "evidence": "| `SSO_GENERIC_ENABLED`               | Enable generic OIDC provider authentication      | `false`                    | bool    |"
        },
        {
          "text": "enable okta oidc authentication                  | `false`               | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1393",
          "evidence": "| `SSO_OKTA_ENABLED`            | Enable Okta OIDC authentication                  | `false`               | bool    |"
        },
        {
          "text": "implements **oauth 2",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1405",
          "evidence": "ContextForge implements **OAuth 2.0 Dynamic Client Registration (RFC 7591)** and **PKCE (RFC 7636)** for seamless integration with OAuth-protected MCP servers and upstream API gateways like HyperMCP."
        },
        {
          "text": "support for public clients (pkce-only, no client secret)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1411",
          "evidence": "- \u2705 Support for public clients (PKCE-only, no client secret)"
        },
        {
          "text": "enable dynamic client registration (rfc 7591)                  | `true`                         | bool          |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1417",
          "evidence": "| `DCR_ENABLED`                              | Enable Dynamic Client Registration (RFC 7591)                  | `true`                         | bool          |"
        },
        {
          "text": "allow any)           | `[]`                           | json array    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1420",
          "evidence": "| `DCR_ALLOWED_ISSUERS`                      | Allowlist of trusted issuer URLs (empty = allow any)           | `[]`                           | JSON array    |"
        },
        {
          "text": "enable as metadata discovery (rfc 8414)                        | `true`                         | bool          |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1424",
          "evidence": "| `OAUTH_DISCOVERY_ENABLED`                  | Enable AS metadata discovery (RFC 8414)                        | `true`                         | bool          |"
        },
        {
          "text": "enable automatic personal team creation for new users | `true`   | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1437",
          "evidence": "| `AUTO_CREATE_PERSONAL_TEAMS`             | Enable automatic personal team creation for new users | `true`   | bool    |"
        },
        {
          "text": "allows you to define a catalog of pre-configured mcp servers in a yaml file for easy discovery and management via the admin ui",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1446",
          "evidence": "> \ud83c\udd95 **New in v0.7.0**: The MCP Server Catalog allows you to define a catalog of pre-configured MCP servers in a YAML file for easy discovery and management via the Admin UI."
        },
        {
          "text": "enable mcp server catalog feature                | `true`             | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1450",
          "evidence": "| `MCPGATEWAY_CATALOG_ENABLED`        | Enable MCP server catalog feature                | `true`             | bool    |"
        },
        {
          "text": "support - register oauth servers and configure later",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1461",
          "evidence": "- \ud83d\udd10 OAuth Support - Register OAuth servers and configure later"
        },
        {
          "text": "enable cors                    | `true`                                         | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1475",
          "evidence": "| `CORS_ENABLED`            | Enable CORS                    | `true`                                         | bool       |"
        },
        {
          "text": "allow credentials in cors      | `true`                                         | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1476",
          "evidence": "| `CORS_ALLOW_CREDENTIALS`  | Allow credentials in CORS      | `true`                                         | bool       |"
        },
        {
          "text": "enable security headers middleware | `true`                                     | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1479",
          "evidence": "| `SECURITY_HEADERS_ENABLED` | Enable security headers middleware | `true`                                     | bool       |"
        },
        {
          "text": "enable x-content-type-options: nosniff header | `true`                           | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1481",
          "evidence": "| `X_CONTENT_TYPE_OPTIONS_ENABLED` | Enable X-Content-Type-Options: nosniff header | `true`                           | bool       |"
        },
        {
          "text": "enable x-xss-protection header | `true`                                         | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1482",
          "evidence": "| `X_XSS_PROTECTION_ENABLED` | Enable X-XSS-Protection header | `true`                                         | bool       |"
        },
        {
          "text": "enable x-download-options: noopen header | `true`                              | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1483",
          "evidence": "| `X_DOWNLOAD_OPTIONS_ENABLED` | Enable X-Download-Options: noopen header | `true`                              | bool       |"
        },
        {
          "text": "enable hsts header             | `true`                                         | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1484",
          "evidence": "| `HSTS_ENABLED`            | Enable HSTS header             | `true`                                         | bool       |"
        },
        {
          "text": "include subdomains in hsts header | `true`                                      | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1486",
          "evidence": "| `HSTS_INCLUDE_SUBDOMAINS` | Include subdomains in HSTS header | `true`                                      | bool       |"
        },
        {
          "text": "allow basic auth for docs (in addition to jwt)         | `false`                                        | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1488",
          "evidence": "| `DOCS_ALLOW_BASIC_AUTH`   | Allow Basic Auth for docs (in addition to JWT)         | `false`                                        | bool       |"
        },
        {
          "text": "allow embedding, set `x_frame_options=sameorigin` (same domain) or disable with `x_frame_options=\"\"`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1499",
          "evidence": "> **iframe Embedding**: By default, `X-Frame-Options: DENY` prevents iframe embedding for security. To allow embedding, set `X_FRAME_OPTIONS=SAMEORIGIN` (same domain) or disable with `X_FRAME_OPTIONS=\"\"`. Also update CSP `frame-ancestors` directive if needed."
        },
        {
          "text": "enables http basic authentication as an additional method using the same credentials as `basic_auth_user` and `basic_auth_password`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1507",
          "evidence": "> By default, they require Bearer token authentication. Setting `DOCS_ALLOW_BASIC_AUTH=true` enables HTTP Basic Authentication as an additional method using the same credentials as `BASIC_AUTH_USER` and `BASIC_AUTH_PASSWORD`."
        },
        {
          "text": "includes automatic response compression middleware that reduces bandwidth usage by 30-70% for text-based responses (json, html, css, js)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1511",
          "evidence": "MCP Gateway includes automatic response compression middleware that reduces bandwidth usage by 30-70% for text-based responses (JSON, HTML, CSS, JS). Compression is negotiated automatically based on client `Accept-Encoding` headers with algorithm priority: **Brotli** (best compression) > **Zstd** (fastest) > **GZip** (universal fallback)."
        },
        {
          "text": "enable response compression                       | `true`  | bool                 |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1515",
          "evidence": "| `COMPRESSION_ENABLED`         | Enable response compression                       | `true`  | bool                 |"
        },
        {
          "text": "handle decompression automatically)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1525",
          "evidence": "- No client changes required (browsers/clients handle decompression automatically)"
        },
        {
          "text": "provides flexible logging with stdout/stderr output by default and optional file-based logging",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1565",
          "evidence": "MCP Gateway provides flexible logging with **stdout/stderr output by default** and **optional file-based logging**. When file logging is enabled, it provides JSON formatting for structured logs and text formatting for console output."
        },
        {
          "text": "provides json formatting for structured logs and text formatting for console output",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1565",
          "evidence": "MCP Gateway provides flexible logging with **stdout/stderr output by default** and **optional file-based logging**. When file logging is enabled, it provides JSON formatting for structured logs and text formatting for console output."
        },
        {
          "text": "enable file logging            | `false`       | `true`, `false`**        |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1571",
          "evidence": "| `LOG_TO_FILE`           | **Enable file logging**            | **`false`**       | **`true`, `false`**        |"
        },
        {
          "text": "enable log file rotation       | `false`       | `true`, `false`**        |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1575",
          "evidence": "| `LOG_ROTATION_ENABLED`  | **Enable log file rotation**       | **`false`**       | **`true`, `false`**        |"
        },
        {
          "text": "enable file logging (no rotation)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1594",
          "evidence": "# Optional: Enable file logging (no rotation)"
        },
        {
          "text": "enable file logging with rotation",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1600",
          "evidence": "# Optional: Enable file logging with rotation"
        },
        {
          "text": "enable optional file logging with json format",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1612",
          "evidence": "- Set `LOG_TO_FILE=true` to enable optional file logging with JSON format"
        },
        {
          "text": "includes vendor-agnostic opentelemetry support for distributed tracing",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1616",
          "evidence": "MCP Gateway includes **vendor-agnostic OpenTelemetry support** for distributed tracing. Works with Phoenix, Jaeger, Zipkin, Tempo, DataDog, New Relic, and any OTLP-compatible backend."
        },
        {
          "text": "export                     | `512`                 | int > 0                                    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1650",
          "evidence": "| `OTEL_BSP_MAX_EXPORT_BATCH_SIZE`| Max batch size for export                     | `512`                 | int > 0                                    |"
        },
        {
          "text": "export interval (ms)                          | `5000`                | int > 0                                    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1651",
          "evidence": "| `OTEL_BSP_SCHEDULE_DELAY`       | Export interval (ms)                          | `5000`                | int > 0                                    |"
        },
        {
          "text": "run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1656",
          "evidence": "docker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest"
        },
        {
          "text": "configure gateway",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1658",
          "evidence": "# Configure gateway"
        },
        {
          "text": "export otel_enable_observability=true",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1659",
          "evidence": "export OTEL_ENABLE_OBSERVABILITY=true"
        },
        {
          "text": "export otel_traces_exporter=otlp",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1660",
          "evidence": "export OTEL_TRACES_EXPORTER=otlp"
        },
        {
          "text": "export otel_exporter_otlp_endpoint=http://localhost:4317",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1661",
          "evidence": "export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317"
        },
        {
          "text": "run gateway - traces automatically sent to phoenix",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1663",
          "evidence": "# Run gateway - traces automatically sent to Phoenix"
        },
        {
          "text": "plugin execution (if enabled)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1667",
          "evidence": "> \ud83d\udd0d **What Gets Traced**: Tool invocations, prompt rendering, resource fetching, gateway federation, health checks, plugin execution (if enabled)"
        },
        {
          "text": "enable sse keepalive events        | `true`  | bool                            |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1680",
          "evidence": "| `SSE_KEEPALIVE_ENABLED`   | Enable SSE keepalive events        | `true`  | bool                            |"
        },
        {
          "text": "handle unknown event types",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1685",
          "evidence": "> **\ud83d\udca1 SSE Keepalive Events**: The gateway sends periodic keepalive events to prevent connection timeouts with proxies and load balancers. Disable with `SSE_KEEPALIVE_ENABLED=false` if your client doesn't handle unknown event types. Common intervals: 30s (default), 60s (AWS ALB), 240s (Azure)."
        },
        {
          "text": "enable federation      | `true`  | bool       |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1691",
          "evidence": "| `FEDERATION_ENABLED`       | Enable federation      | `true`  | bool       |"
        },
        {
          "text": "create new migration",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1767",
          "evidence": "- `make db-migrate` - Create new migration"
        },
        {
          "text": "enable dev mode        | `false` | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1785",
          "evidence": "| `DEV_MODE` | Enable dev mode        | `false` | bool    |"
        },
        {
          "text": "enable well-known uri endpoints (/",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1793",
          "evidence": "| `WELL_KNOWN_ENABLED`          | Enable well-known URI endpoints (/.well-known/*) | `true`                | bool    |"
        },
        {
          "text": "customize for your needs",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1799",
          "evidence": "> \ud83d\udd0d **robots.txt**: By default, blocks all crawlers for security. Customize for your needs."
        },
        {
          "text": "enable http header passthrough feature (\u26a0\ufe0f security implications) | `false` | bool |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1809",
          "evidence": "| `ENABLE_HEADER_PASSTHROUGH`   | Enable HTTP header passthrough feature (\u26a0\ufe0f Security implications) | `false` | bool |"
        },
        {
          "text": "enable overwriting of base headers (\u26a0\ufe0f advanced usage) | `false` | bool |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1810",
          "evidence": "| `ENABLE_OVERWRITE_BASE_HEADERS` | Enable overwriting of base headers (\u26a0\ufe0f Advanced usage) | `false` | bool |"
        },
        {
          "text": "enable if you understand the implications and have reviewed which headers should be passed through to backing mcp servers",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1813",
          "evidence": "> \u26a0\ufe0f **Security Warning**: Header passthrough is disabled by default for security. Only enable if you understand the implications and have reviewed which headers should be passed through to backing MCP servers. Authorization headers are not included in defaults."
        },
        {
          "text": "plugin configuration",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1815",
          "evidence": "### Plugin Configuration"
        },
        {
          "text": "enable the plugin framework                      | `false`               | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1819",
          "evidence": "| `PLUGINS_ENABLED`             | Enable the plugin framework                      | `false`               | bool    |"
        },
        {
          "text": "plugin framework                      | `false`               | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1819",
          "evidence": "| `PLUGINS_ENABLED`             | Enable the plugin framework                      | `false`               | bool    |"
        },
        {
          "text": "plugin configuration file          | `plugins/config",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1820",
          "evidence": "| `PLUGIN_CONFIG_FILE`          | Path to main plugin configuration file          | `plugins/config.yaml` | string  |"
        },
        {
          "text": "plugin mtls | _(empty)_     | string  |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1821",
          "evidence": "| `PLUGINS_MTLS_CA_BUNDLE`      | (Optional) default CA bundle for external plugin mTLS | _(empty)_     | string  |"
        },
        {
          "text": "plugin mtls | _(empty)_     | string  |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1822",
          "evidence": "| `PLUGINS_MTLS_CLIENT_CERT`    | (Optional) gateway client certificate for plugin mTLS | _(empty)_     | string  |"
        },
        {
          "text": "plugin mtls | _(empty)_             | string  |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1823",
          "evidence": "| `PLUGINS_MTLS_CLIENT_KEY`     | (Optional) gateway client key for plugin mTLS | _(empty)_             | string  |"
        },
        {
          "text": "plugin client key | _(empty)_             | string  |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1824",
          "evidence": "| `PLUGINS_MTLS_CLIENT_KEY_PASSWORD` | (Optional) password for plugin client key | _(empty)_             | string  |"
        },
        {
          "text": "plugin certificates (`true`/`false`) | `true` | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1825",
          "evidence": "| `PLUGINS_MTLS_VERIFY`         | (Optional) verify remote plugin certificates (`true`/`false`) | `true` | bool    |"
        },
        {
          "text": "plugins | `true`      | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1826",
          "evidence": "| `PLUGINS_MTLS_CHECK_HOSTNAME` | (Optional) enforce hostname verification for plugins | `true`      | bool    |"
        },
        {
          "text": "enable auto-completion for plugins cli          | `false`               | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1827",
          "evidence": "| `PLUGINS_CLI_COMPLETION`      | Enable auto-completion for plugins CLI          | `false`               | bool    |"
        },
        {
          "text": "plugins cli          | `false`               | bool    |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1827",
          "evidence": "| `PLUGINS_CLI_COMPLETION`      | Enable auto-completion for plugins CLI          | `false`               | bool    |"
        },
        {
          "text": "plugins cli                 | (none)                | `rich`, `markdown`, `disabled` |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1828",
          "evidence": "| `PLUGINS_CLI_MARKUP_MODE`     | Set markup mode for plugins CLI                 | (none)                | `rich`, `markdown`, `disabled` |"
        },
        {
          "text": "run production gunicorn server on",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1848",
          "evidence": "make serve               # Run production Gunicorn server on"
        },
        {
          "text": "run gunicorn behind https on :4444 (uses",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1849",
          "evidence": "make serve-ssl           # Run Gunicorn behind HTTPS on :4444 (uses ./certs)"
        },
        {
          "text": "run the development (uvicorn) server:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1854",
          "evidence": "To run the development (uvicorn) server:"
        },
        {
          "text": "supports reload, and passes arguments to the server",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1862",
          "evidence": "> `run.sh` is a wrapper around `uvicorn` that loads `.env`, supports reload, and passes arguments to the server."
        },
        {
          "text": "generate a jwt token using jwt_secret_key and export it as mcpgateway_bearer_token",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1885",
          "evidence": "# Generate a JWT token using JWT_SECRET_KEY and export it as MCPGATEWAY_BEARER_TOKEN"
        },
        {
          "text": "export it as mcpgateway_bearer_token",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1885",
          "evidence": "# Generate a JWT token using JWT_SECRET_KEY and export it as MCPGATEWAY_BEARER_TOKEN"
        },
        {
          "text": "export mcpgateway_bearer_token=$(jwt_secret_key=my-test-key python3 -m mcpgateway",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1887",
          "evidence": "export MCPGATEWAY_BEARER_TOKEN=$(JWT_SECRET_KEY=my-test-key python3 -m mcpgateway.utils.create_jwt_token)"
        },
        {
          "text": "supports deployment to [ibm cloud code engine](https://cloud",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1901",
          "evidence": "This project supports deployment to [IBM Cloud Code Engine](https://cloud.ibm.com/codeengine) using the **ibmcloud** CLI and the IBM Container Registry."
        },
        {
          "text": "export the variables in your shell)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1917",
          "evidence": "Create a **`.env`** file (or export the variables in your shell)."
        },
        {
          "text": "provides tunable defaults you can override:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1918",
          "evidence": "The first block is **required**; the second provides **tunable defaults** you can override:"
        },
        {
          "text": "plugins                                |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1944",
          "evidence": "| `make ibmcloud-cli-install` | Install IBM Cloud CLI and required plugins                                |"
        },
        {
          "text": "create or update** the code engine application (uses cpu/memory/secret) |",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1949",
          "evidence": "| `make ibmcloud-deploy`      | **Create or update** the Code Engine application (uses CPU/memory/secret) |"
        },
        {
          "text": "generate an api bearer token, and test the various api endpoints",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1981",
          "evidence": "Generate an API Bearer token, and test the various API endpoints."
        },
        {
          "text": "generate a bearer token using the configured secret key (use the same as your",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1987",
          "evidence": "# Generate a bearer token using the configured secret key (use the same as your .env)"
        },
        {
          "text": "export mcpgateway_bearer_token=$(python3 -m mcpgateway",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1988",
          "evidence": "export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin@example.com --secret my-test-key)"
        },
        {
          "text": "handles any method name: `list_tools`, `list_gateways`, `prompts/get`, or invokes a tool if method matches a registered tool name",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2057",
          "evidence": "Handles any method name: `list_tools`, `list_gateways`, `prompts/get`, or invokes a tool if method matches a registered tool name ."
        },
        {
          "text": "create prompt template",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2261",
          "evidence": "# Create prompt template"
        },
        {
          "text": "implements comprehensive doctest coverage to ensure all code examples in documentation are tested and verified:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2423",
          "evidence": "ContextForge implements comprehensive doctest coverage to ensure all code examples in documentation are tested and verified:"
        },
        {
          "text": "run all doctests",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2426",
          "evidence": "make doctest         # Run all doctests"
        },
        {
          "text": "run with detailed output",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2427",
          "evidence": "make doctest-verbose # Run with detailed output"
        },
        {
          "text": "generate coverage report",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2428",
          "evidence": "make doctest-coverage # Generate coverage report"
        },
        {
          "text": "run examples directly from docstrings",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2442",
          "evidence": "- Developers can run examples directly from docstrings"
        },
        {
          "text": "run runtime env (ignored)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2465",
          "evidence": "\u251c\u2500\u2500 .env.gcr                        # Google Cloud Run runtime env (ignored)"
        },
        {
          "text": "build (docker / podman)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2498",
          "evidence": "\u251c\u2500\u2500 Containerfile                   # OCI image build (Docker / Podman)"
        },
        {
          "text": "build / packaging / tooling \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2505",
          "evidence": "# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Build / Packaging / Tooling \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"
        },
        {
          "text": "offer the following makefile targets",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2639",
          "evidence": "This project offer the following Makefile targets. Type `make` in the project root to show all targets."
        },
        {
          "text": "create a fresh virtual environment with uv & friends",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2649",
          "evidence": "venv                 - Create a fresh virtual environment with uv & friends"
        },
        {
          "text": "run production gunicorn server on :4444",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2657",
          "evidence": "serve                - Run production Gunicorn server on :4444"
        },
        {
          "text": "generate self-signed tls cert & key in",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2658",
          "evidence": "certs                - Generate self-signed TLS cert & key in ./certs (won't overwrite)"
        },
        {
          "text": "run gunicorn behind https on :4444 (uses",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2659",
          "evidence": "serve-ssl            - Run Gunicorn behind HTTPS on :4444 (uses ./certs)"
        },
        {
          "text": "run fast-reload dev server (uvicorn)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2660",
          "evidence": "dev                  - Run fast-reload dev server (uvicorn)"
        },
        {
          "text": "execute helper script",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2661",
          "evidence": "run                  - Execute helper script ./run.sh"
        },
        {
          "text": "run                  - execute helper script",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2661",
          "evidence": "run                  - Execute helper script ./run.sh"
        },
        {
          "text": "run unit tests with pytest",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2662",
          "evidence": "test                 - Run unit tests with pytest"
        },
        {
          "text": "run readme / examples through pytest-examples",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2664",
          "evidence": "pytest-examples      - Run README / examples through pytest-examples"
        },
        {
          "text": "build artefacts, virtualenv, docs, certs, coverage, sbom, etc",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2665",
          "evidence": "clean                - Remove caches, build artefacts, virtualenv, docs, certs, coverage, SBOM, etc."
        },
        {
          "text": "run tests with coverage, emit md/html/xml + badge",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2667",
          "evidence": "coverage             - Run tests with coverage, emit md/HTML/XML + badge"
        },
        {
          "text": "generate html loc & per-file metrics with scc",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2670",
          "evidence": "scc-report           - Generate HTML LoC & per-file metrics with scc"
        },
        {
          "text": "build docs (graphviz + handsdown + images + sbom)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2672",
          "evidence": "docs                 - Build docs (graphviz + handsdown + images + SBOM)"
        },
        {
          "text": "generate architecture & dependency diagrams",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2673",
          "evidence": "images               - Generate architecture & dependency diagrams"
        },
        {
          "text": "run the full linting suite (see targets below)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2675",
          "evidence": "lint                 - Run the full linting suite (see targets below)"
        },
        {
          "text": "imports / variables with autoflake",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2677",
          "evidence": "autoflake            - Remove unused imports / variables with autoflake"
        },
        {
          "text": "imports with isort",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2678",
          "evidence": "isort                - Organise & sort imports with isort"
        },
        {
          "text": "run all configured pre-commit hooks",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2686",
          "evidence": "pre-commit           - Run all configured pre-commit hooks"
        },
        {
          "text": "generate png call-graph from cprofile stats",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2699",
          "evidence": "pstats               - Generate PNG call-graph from cProfile stats"
        },
        {
          "text": "run tox across multi-python versions",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2701",
          "evidence": "tox                  - Run tox across multi-Python versions"
        },
        {
          "text": "run htmlhint, stylelint, eslint, retire",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2710",
          "evidence": "lint-web             - Run HTMLHint, Stylelint, ESLint, Retire.js and npm audit"
        },
        {
          "text": "run all osv-scanner checks (source, image, licence)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2715",
          "evidence": "osv-scan             - Run all osv-scanner checks (source, image, licence)"
        },
        {
          "text": "supporting tools",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2717",
          "evidence": "sonar-deps-podman    - Install podman-compose + supporting tools"
        },
        {
          "text": "supporting tools",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2718",
          "evidence": "sonar-deps-docker    - Install docker-compose + supporting tools"
        },
        {
          "text": "run containerized sonar scanner cli with docker",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2721",
          "evidence": "sonar-submit-docker  - Run containerized Sonar Scanner CLI with Docker"
        },
        {
          "text": "run containerized sonar scanner cli with podman",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2722",
          "evidence": "sonar-submit-podman  - Run containerized Sonar Scanner CLI with Podman"
        },
        {
          "text": "run scan with python wrapper (pysonar-scanner)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2723",
          "evidence": "pysonar-scanner      - Run scan with Python wrapper (pysonar-scanner)"
        },
        {
          "text": "create a token & which env vars to export",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2724",
          "evidence": "sonar-info           - How to create a token & which env vars to export"
        },
        {
          "text": "build wheel *and* sdist into",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2735",
          "evidence": "dist                 - Clean-build wheel *and* sdist into ./dist"
        },
        {
          "text": "build wheel only",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2736",
          "evidence": "wheel                - Build wheel only"
        },
        {
          "text": "build source distribution only",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2737",
          "evidence": "sdist                - Build source distribution only"
        },
        {
          "text": "build + twine + check-manifest + pyroma (no upload)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2738",
          "evidence": "verify               - Build + twine + check-manifest + pyroma (no upload)"
        },
        {
          "text": "build development container image",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2741",
          "evidence": "podman-dev           - Build development container image"
        },
        {
          "text": "build container image",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2742",
          "evidence": "podman               - Build container image"
        },
        {
          "text": "build production container image (using ubi-micro \u2192 scratch)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2743",
          "evidence": "podman-prod          - Build production container image (using ubi-micro \u2192 scratch). Not supported on macOS."
        },
        {
          "text": "run           - run the container on http  (port 4444)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2744",
          "evidence": "podman-run           - Run the container on HTTP  (port 4444)"
        },
        {
          "text": "run the container on http  (port 4444) and start a shell",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2745",
          "evidence": "podman-run-shell     - Run the container on HTTP  (port 4444) and start a shell"
        },
        {
          "text": "run the container on https (port 4444, self-signed)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2746",
          "evidence": "podman-run-ssl       - Run the container on HTTPS (port 4444, self-signed)"
        },
        {
          "text": "run the container on https with --network=host (port 4444, self-signed)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2747",
          "evidence": "podman-run-ssl-host  - Run the container on HTTPS with --network=host (port 4444, self-signed)"
        },
        {
          "text": "process info in container",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2752",
          "evidence": "podman-top           - Show live top-level process info in container"
        },
        {
          "text": "build development docker image",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2755",
          "evidence": "docker-dev           - Build development Docker image"
        },
        {
          "text": "build production docker image",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2756",
          "evidence": "docker               - Build production Docker image"
        },
        {
          "text": "build production container image (using ubi-micro \u2192 scratch)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2757",
          "evidence": "docker-prod          - Build production container image (using ubi-micro \u2192 scratch). Not supported on macOS."
        },
        {
          "text": "run           - run the container on http  (port 4444)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2758",
          "evidence": "docker-run           - Run the container on HTTP  (port 4444)"
        },
        {
          "text": "run the container on https (port 4444, self-signed)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2759",
          "evidence": "docker-run-ssl       - Run the container on HTTPS (port 4444, self-signed)"
        },
        {
          "text": "process info in docker container",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2764",
          "evidence": "docker-top           - Show top-level process info in Docker container"
        },
        {
          "text": "build / start / stop the multi-service stack",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2766",
          "evidence": "\ud83d\udee0\ufe0f COMPOSE STACK     - Build / start / stop the multi-service stack"
        },
        {
          "text": "building as needed",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2768",
          "evidence": "compose-restart      - Recreate changed containers, pulling / building as needed"
        },
        {
          "text": "build        - build (or rebuild) images defined in the compose file",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2769",
          "evidence": "compose-build        - Build (or rebuild) images defined in the compose file"
        },
        {
          "text": "plugins (os auto-detected)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2780",
          "evidence": "ibmcloud-cli-install        - Auto-install IBM Cloud CLI + required plugins (OS auto-detected)"
        },
        {
          "text": "build and load ghcr",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2796",
          "evidence": "minikube-image-load   - Build and load ghcr.io/ibm/mcp-context-forge:latest into Minikube"
        },
        {
          "text": "build \u2192 upload \u2192 install locally",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2812",
          "evidence": "local-pypi-clean     - Full cycle: build \u2192 upload \u2192 install locally"
        },
        {
          "text": "create user and dev index",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2818",
          "evidence": "devpi-setup-user     - Create user and dev index"
        },
        {
          "text": "build \u2192 upload \u2192 install locally",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2821",
          "evidence": "devpi-clean          - Full cycle: build \u2192 upload \u2192 install locally"
        },
        {
          "text": "support (note spaces):",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2843",
          "evidence": "- Option A (system location): point the DB to Application Support (note spaces):"
        },
        {
          "text": "export database_url=\"sqlite:////users/$user/library/application support/mcpgateway/mcp",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2845",
          "evidence": "- `export DATABASE_URL=\"sqlite:////Users/$USER/Library/Application Support/mcpgateway/mcp.db\"`"
        },
        {
          "text": "export database_url=\"sqlite:////users/$user/mcp-context-forge/data/mcp",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2848",
          "evidence": "- `export DATABASE_URL=\"sqlite:////Users/$USER/mcp-context-forge/data/mcp.db\"`"
        },
        {
          "text": "process contention:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2851",
          "evidence": "- Reduce startup concurrency to rule out multi-process contention:"
        },
        {
          "text": "runs single-process)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2852",
          "evidence": "- `GUNICORN_WORKERS=1 make serve` (or use `make dev` which runs single-process)"
        },
        {
          "text": "run the diagnostic helper to verify the environment:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2853",
          "evidence": "- Run the diagnostic helper to verify the environment:"
        },
        {
          "text": "export cache_type=none`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2858",
          "evidence": "- `export CACHE_TYPE=none`"
        },
        {
          "text": "import sqlite3; print(sqlite3",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2862",
          "evidence": "- `brew install python3 && /opt/homebrew/bin/python3 -c 'import sqlite3; print(sqlite3.sqlite_version)'`"
        },
        {
          "text": "create a feature branch",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2926",
          "evidence": "1. Fork the repo, create a feature branch."
        },
        {
          "text": "run `make lint` and fix any issues",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2927",
          "evidence": "2. Run `make lint` and fix any issues."
        },
        {
          "text": "* 3.1. 1 - Install & run (copy-paste friendly)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L37",
          "evidence": "* 3.1. [1 - Install & run (copy-paste friendly)](#1---install--run-copy-paste-friendly)"
        },
        {
          "text": "* 4.1.1. 1 - Minimum viable run",
          "source_url": "https://github.com/IBM/mcp-context-forge#L40",
          "evidence": "* 4.1.1. [1 - Minimum viable run](#1---minimum-viable-run)"
        },
        {
          "text": "* 4.2.1. 1 - Basic run",
          "source_url": "https://github.com/IBM/mcp-context-forge#L44",
          "evidence": "* 4.2.1. [1 - Basic run](#1---basic-run)"
        },
        {
          "text": "* 5.1. \ud83e\udde9 Running from an MCP Client (`mcpgateway.wrapper`)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L48",
          "evidence": "* 5.1. [\ud83e\udde9 Running from an MCP Client (`mcpgateway.wrapper`)](#-running-from-an-mcp-client-mcpgatewaywrapper)"
        },
        {
          "text": "* 5.1.1. 1 - Install `uv` (`uvx` is an alias it provides)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L49",
          "evidence": "* 5.1.1. [1 - Install `uv` (`uvx` is an alias it provides)](#1---install-uv-uvx-is-an-alias-it-provides)"
        },
        {
          "text": "* 5.1.2. 2 - Create an on-the-spot venv & run the wrapper",
          "source_url": "https://github.com/IBM/mcp-context-forge#L50",
          "evidence": "* 5.1.2. [2 - Create an on-the-spot venv & run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)"
        },
        {
          "text": "* 5.1.3. Claude Desktop JSON (runs through uvx)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L51",
          "evidence": "* 5.1.3. [Claude Desktop JSON (runs through **uvx**)](#claude-desktop-json-runs-through-uvx)"
        },
        {
          "text": "* 6.2. 2 - First-Time Build (Automatic)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L55",
          "evidence": "* 6.2. [2 - First-Time Build (Automatic)](#2---first-time-build-automatic)"
        },
        {
          "text": "* 10.4. Email-Based Authentication & User Management",
          "source_url": "https://github.com/IBM/mcp-context-forge#L72",
          "evidence": "* 10.4. [Email-Based Authentication & User Management](#email-based-authentication--user-management)"
        },
        {
          "text": "* 10.19. Plugin Configuration",
          "source_url": "https://github.com/IBM/mcp-context-forge#L87",
          "evidence": "* 10.19. [Plugin Configuration](#plugin-configuration)"
        },
        {
          "text": "An Admin UI for real-time management, configuration, and log monitoring",
          "source_url": "https://github.com/IBM/mcp-context-forge#L135",
          "evidence": "* An Admin UI for real-time management, configuration, and log monitoring"
        },
        {
          "text": "Built-in auth, retries, and rate-limiting with user-scoped OAuth tokens and unconditional X-Upstream-Authorization header support",
          "source_url": "https://github.com/IBM/mcp-context-forge#L136",
          "evidence": "* Built-in auth, retries, and rate-limiting with user-scoped OAuth tokens and unconditional X-Upstream-Authorization header support"
        },
        {
          "text": "*\u26a0\ufe0f Important**: See SECURITY.md for more details.",
          "source_url": "https://github.com/IBM/mcp-context-forge#L146",
          "evidence": "**\u26a0\ufe0f Important**: See [SECURITY.md](./SECURITY.md) for more details."
        },
        {
          "text": "Auto-discovers or configures peer gateways (via mDNS or manual)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L162",
          "evidence": "* Auto-discovers or configures peer gateways (via mDNS or manual)"
        },
        {
          "text": "Performs health checks and merges remote registries transparently",
          "source_url": "https://github.com/IBM/mcp-context-forge#L163",
          "evidence": "* Performs health checks and merges remote registries transparently"
        },
        {
          "text": "Supports Redis-backed syncing and fail-over",
          "source_url": "https://github.com/IBM/mcp-context-forge#L164",
          "evidence": "* Supports Redis-backed syncing and fail-over"
        },
        {
          "text": "* Support for headers, tokens, and custom auth",
          "source_url": "https://github.com/IBM/mcp-context-forge#L184",
          "evidence": "* Support for headers, tokens, and custom auth"
        },
        {
          "text": "Prompts: Jinja2 templates, multimodal support, rollback/versioning",
          "source_url": "https://github.com/IBM/mcp-context-forge#L192",
          "evidence": "* **Prompts**: Jinja2 templates, multimodal support, rollback/versioning"
        },
        {
          "text": "Real-time log viewer with filtering, search, and export capabilities",
          "source_url": "https://github.com/IBM/mcp-context-forge#L202",
          "evidence": "* Real-time log viewer with filtering, search, and export capabilities"
        },
        {
          "text": "Vendor-agnostic tracing with OpenTelemetry (OTLP) protocol support",
          "source_url": "https://github.com/IBM/mcp-context-forge#L212",
          "evidence": "* **Vendor-agnostic tracing** with OpenTelemetry (OTLP) protocol support"
        },
        {
          "text": "Multiple backend support: Phoenix (LLM-focused), Jaeger, Zipkin, Tempo, DataDog, New Relic",
          "source_url": "https://github.com/IBM/mcp-context-forge#L213",
          "evidence": "* **Multiple backend support**: Phoenix (LLM-focused), Jaeger, Zipkin, Tempo, DataDog, New Relic"
        },
        {
          "text": "LLM-specific metrics: Token usage, costs, model performance",
          "source_url": "https://github.com/IBM/mcp-context-forge#L216",
          "evidence": "* **LLM-specific metrics**: Token usage, costs, model performance"
        },
        {
          "text": "--stdio \"docker run --rm -i ghcr.io/ibm/fast-time-server:latest -transport=stdio\" \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L360",
          "evidence": "--stdio \"docker run --rm -i ghcr.io/ibm/fast-time-server:latest -transport=stdio\" \\"
        },
        {
          "text": "-e MCPGATEWAY_UI_ENABLED=true \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L477",
          "evidence": "-e MCPGATEWAY_UI_ENABLED=true \\"
        },
        {
          "text": "-e MCPGATEWAY_ADMIN_API_ENABLED=true \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L478",
          "evidence": "-e MCPGATEWAY_ADMIN_API_ENABLED=true \\"
        },
        {
          "text": "-e MCPGATEWAY_UI_ENABLED=true \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L518",
          "evidence": "-e MCPGATEWAY_UI_ENABLED=true \\"
        },
        {
          "text": "-e MCPGATEWAY_ADMIN_API_ENABLED=true \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L519",
          "evidence": "-e MCPGATEWAY_ADMIN_API_ENABLED=true \\"
        },
        {
          "text": "-e MCPGATEWAY_UI_ENABLED=true \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L546",
          "evidence": "-e MCPGATEWAY_UI_ENABLED=true \\"
        },
        {
          "text": "-e MCPGATEWAY_ADMIN_API_ENABLED=true \\",
          "source_url": "https://github.com/IBM/mcp-context-forge#L547",
          "evidence": "-e MCPGATEWAY_ADMIN_API_ENABLED=true \\"
        },
        {
          "text": ".env files - Put all the `-e FOO=` lines into a file and replace them with `--env-file .env`. See the provided .env.example for reference.",
          "source_url": "https://github.com/IBM/mcp-context-forge#L616",
          "evidence": "* **.env files** - Put all the `-e FOO=` lines into a file and replace them with `--env-file .env`. See the provided [.env.example](https://github.com/IBM/mcp-context-forge/blob/main/.env.example) for reference."
        },
        {
          "text": "Pinned tags - Use an explicit version (e.g. `v0.8.0`) instead of `latest` for reproducible builds.",
          "source_url": "https://github.com/IBM/mcp-context-forge#L617",
          "evidence": "* **Pinned tags** - Use an explicit version (e.g. `v0.8.0`) instead of `latest` for reproducible builds."
        },
        {
          "text": "JWT tokens - Generate one in the running container:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L618",
          "evidence": "* **JWT tokens** - Generate one in the running container:"
        },
        {
          "text": "Upgrades - Stop, remove, and rerun with the same `-v $(pwd)/data:/data` mount; your DB and config stay intact.",
          "source_url": "https://github.com/IBM/mcp-context-forge#L623",
          "evidence": "* **Upgrades** - Stop, remove, and rerun with the same `-v $(pwd)/data:/data` mount; your DB and config stay intact."
        },
        {
          "text": "Docker or Podman installed and running locally",
          "source_url": "https://github.com/IBM/mcp-context-forge#L868",
          "evidence": "* **Docker** or **Podman** installed and running locally"
        },
        {
          "text": "or* manually run: <kbd>Ctrl/Cmd \u21e7 P</kbd> \u2192 Dev Containers: Reopen in Container",
          "source_url": "https://github.com/IBM/mcp-context-forge#L885",
          "evidence": "*or* manually run: <kbd>Ctrl/Cmd \u21e7 P</kbd> \u2192 **Dev Containers: Reopen in Container**"
        },
        {
          "text": "Run `make install-dev` to pull all dependencies",
          "source_url": "https://github.com/IBM/mcp-context-forge#L894",
          "evidence": "* Run `make install-dev` to pull all dependencies"
        },
        {
          "text": "Execute tests to verify the toolchain",
          "source_url": "https://github.com/IBM/mcp-context-forge#L895",
          "evidence": "* Execute tests to verify the toolchain"
        },
        {
          "text": "`make clean` - clear build artefacts & caches",
          "source_url": "https://github.com/IBM/mcp-context-forge#L918",
          "evidence": "* `make clean` - clear build artefacts & caches"
        },
        {
          "text": "Port forwarding is automatic (customize via `.devcontainer/devcontainer.json`)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L919",
          "evidence": "* Port forwarding is automatic (customize via `.devcontainer/devcontainer.json`)"
        },
        {
          "text": "Optional: Docker / Podman for containerized runs",
          "source_url": "https://github.com/IBM/mcp-context-forge#L942",
          "evidence": "* Optional: **Docker / Podman** for containerized runs"
        },
        {
          "text": "`MCPGATEWAY_A2A_ENABLED=false`: Completely disables A2A features (API endpoints return 404, admin tab hidden)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1185",
          "evidence": "- `MCPGATEWAY_A2A_ENABLED=false`: Completely disables A2A features (API endpoints return 404, admin tab hidden)"
        },
        {
          "text": "`MCPGATEWAY_A2A_METRICS_ENABLED=false`: Disables metrics collection while keeping functionality",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1186",
          "evidence": "- `MCPGATEWAY_A2A_METRICS_ENABLED=false`: Disables metrics collection while keeping functionality"
        },
        {
          "text": "`LLMCHAT_ENABLED=false` (default): Completely disables LLM Chat features (API endpoints return 404, admin tab hidden)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1265",
          "evidence": "- `LLMCHAT_ENABLED=false` (default): Completely disables LLM Chat features (API endpoints return 404, admin tab hidden)"
        },
        {
          "text": "`LLMCHAT_ENABLED=true`: Enables LLM Chat functionality with the selected provider",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1266",
          "evidence": "- `LLMCHAT_ENABLED=true`: Enables LLM Chat functionality with the selected provider"
        },
        {
          "text": "*Provider Requirements:**",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1268",
          "evidence": "**Provider Requirements:**"
        },
        {
          "text": "AWS Bedrock: Requires `AWS_BEDROCK_MODEL_ID` and `pip install langchain-aws boto3`. Uses AWS credential chain if explicit credentials not provided.",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1272",
          "evidence": "- **AWS Bedrock**: Requires `AWS_BEDROCK_MODEL_ID` and `pip install langchain-aws boto3`. Uses AWS credential chain if explicit credentials not provided."
        },
        {
          "text": "Ollama: Requires local Ollama instance running (default: `http://localhost:11434`)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1274",
          "evidence": "- **Ollama**: Requires local Ollama instance running (default: `http://localhost:11434`)"
        },
        {
          "text": "LLM Chat Guide - Complete LLM Chat setup and provider configuration",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1288",
          "evidence": "- [LLM Chat Guide](https://ibm.github.io/mcp-context-forge/using/clients/llm-chat) - Complete LLM Chat setup and provider configuration"
        },
        {
          "text": "*Generic OIDC Provider (Auth0, Authentik, etc.):**",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1376",
          "evidence": "**Generic OIDC Provider (Auth0, Authentik, etc.):**"
        },
        {
          "text": "\u2705 PKCE (Proof Key for Code Exchange) enabled for all Authorization Code flows",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1410",
          "evidence": "- \u2705 PKCE (Proof Key for Code Exchange) enabled for all Authorization Code flows"
        },
        {
          "text": "\u2705 Support for public clients (PKCE-only, no client secret)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1411",
          "evidence": "- \u2705 Support for public clients (PKCE-only, no client secret)"
        },
        {
          "text": "\u2705 Configurable issuer allowlist for security",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1413",
          "evidence": "- \u2705 Configurable issuer allowlist for security"
        },
        {
          "text": "\ud83d\udd10 OAuth Support - Register OAuth servers and configure later",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1461",
          "evidence": "- \ud83d\udd10 OAuth Support - Register OAuth servers and configure later"
        },
        {
          "text": "No client changes required (browsers/clients handle decompression automatically)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1525",
          "evidence": "- No client changes required (browsers/clients handle decompression automatically)"
        },
        {
          "text": "*Performance Impact:**",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1528",
          "evidence": "**Performance Impact:**"
        },
        {
          "text": "Log Rotation: When `LOG_ROTATION_ENABLED=true`, files rotate at `LOG_MAX_SIZE_MB` with `LOG_BACKUP_COUNT` backup files (e.g., `.log.1`, `.log.2`)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1583",
          "evidence": "- **Log Rotation**: When `LOG_ROTATION_ENABLED=true`, files rotate at `LOG_MAX_SIZE_MB` with `LOG_BACKUP_COUNT` backup files (e.g., `.log.1`, `.log.2`)"
        },
        {
          "text": "Directory Creation: Log folder is automatically created if it doesn't exist",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1584",
          "evidence": "- **Directory Creation**: Log folder is automatically created if it doesn't exist"
        },
        {
          "text": "File logging is disabled by default (no files created)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1611",
          "evidence": "- File logging is **disabled by default** (no files created)"
        },
        {
          "text": "Set `LOG_TO_FILE=true` to enable optional file logging with JSON format",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1612",
          "evidence": "- Set `LOG_TO_FILE=true` to enable optional file logging with JSON format"
        },
        {
          "text": "*Performance Tuning**:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1643",
          "evidence": "**Performance Tuning**:"
        },
        {
          "text": "`make db-migrate` - Create new migration",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1767",
          "evidence": "- `make db-migrate` - Create new migration"
        },
        {
          "text": "\"No 'script_location' key found\": Ensure you're running from the project root directory.",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1775",
          "evidence": "- **\"No 'script_location' key found\"**: Ensure you're running from the project root directory."
        },
        {
          "text": "\"Unknown SSE event: keepalive\" warnings: Some MCP clients don't recognize keepalive events. These warnings are harmless and don't affect functionality. To disable: `SSE_KEEPALIVE_ENABLED=false`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1777",
          "evidence": "- **\"Unknown SSE event: keepalive\" warnings**: Some MCP clients don't recognize keepalive events. These warnings are harmless and don't affect functionality. To disable: `SSE_KEEPALIVE_ENABLED=false`"
        },
        {
          "text": "Code Engine and Container Registry services enabled in your IBM Cloud account",
          "source_url": "https://github.com/IBM/mcp-context-forge#L1911",
          "evidence": "- Code Engine and Container Registry services **enabled** in your IBM Cloud account"
        },
        {
          "text": "Developers can run examples directly from docstrings",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2442",
          "evidence": "- Developers can run examples directly from docstrings"
        },
        {
          "text": "Regression prevention through automated verification",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2443",
          "evidence": "- Regression prevention through automated verification"
        },
        {
          "text": "Avoid cloning/running the repo under `~/Documents` or `~/Desktop` if iCloud \"Desktop & Documents\" sync is enabled.",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2835",
          "evidence": "- Avoid cloning/running the repo under `~/Documents` or `~/Desktop` if iCloud \"Desktop & Documents\" sync is enabled."
        },
        {
          "text": "- Option A (system location): point the DB to Application Support (note spaces):",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2843",
          "evidence": "- Option A (system location): point the DB to Application Support (note spaces):"
        },
        {
          "text": "- `mkdir -p \"$HOME/Library/Application Support/mcpgateway\"`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2844",
          "evidence": "- `mkdir -p \"$HOME/Library/Application Support/mcpgateway\"`"
        },
        {
          "text": "- `export DATABASE_URL=\"sqlite:////Users/$USER/Library/Application Support/mcpgateway/mcp.db\"`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2845",
          "evidence": "- `export DATABASE_URL=\"sqlite:////Users/$USER/Library/Application Support/mcpgateway/mcp.db\"`"
        },
        {
          "text": "- `export DATABASE_URL=\"sqlite:////Users/$USER/mcp-context-forge/data/mcp.db\"`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2848",
          "evidence": "- `export DATABASE_URL=\"sqlite:////Users/$USER/mcp-context-forge/data/mcp.db\"`"
        },
        {
          "text": "Reduce startup concurrency to rule out multi-process contention:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2851",
          "evidence": "- Reduce startup concurrency to rule out multi-process contention:"
        },
        {
          "text": "- `GUNICORN_WORKERS=1 make serve` (or use `make dev` which runs single-process)",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2852",
          "evidence": "- `GUNICORN_WORKERS=1 make serve` (or use `make dev` which runs single-process)"
        },
        {
          "text": "Run the diagnostic helper to verify the environment:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2853",
          "evidence": "- Run the diagnostic helper to verify the environment:"
        },
        {
          "text": "Optional: temporarily disable the file-lock leader path by using the in-process mode:",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2857",
          "evidence": "- Optional: temporarily disable the file-lock leader path by using the in-process mode:"
        },
        {
          "text": "- `export CACHE_TYPE=none`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2858",
          "evidence": "- `export CACHE_TYPE=none`"
        },
        {
          "text": "`brew install python3 && /opt/homebrew/bin/python3 -c 'import sqlite3; print(sqlite3.sqlite_version)'`",
          "source_url": "https://github.com/IBM/mcp-context-forge#L2862",
          "evidence": "- `brew install python3 && /opt/homebrew/bin/python3 -c 'import sqlite3; print(sqlite3.sqlite_version)'`"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "wallarm/gotestwaf",
      "url": "https://github.com/wallarm/gotestwaf",
      "stars": 1724,
      "language": "Go",
      "features": [
        {
          "text": "supports a wide range of api protocols including",
          "source_url": "https://github.com/wallarm/gotestwaf#L3",
          "evidence": "GoTestWAF is a tool for API and OWASP attack simulation that supports a wide range of API protocols including"
        },
        {
          "text": "run gotestwaf](#other-options-to-run-gotestwaf)",
          "source_url": "https://github.com/wallarm/gotestwaf#L15",
          "evidence": "* [Other options to run GoTestWAF](#other-options-to-run-gotestwaf)"
        },
        {
          "text": "generates malicious requests using encoded payloads placed in different parts of http requests: its body, headers,",
          "source_url": "https://github.com/wallarm/gotestwaf#L22",
          "evidence": "GoTestWAF generates malicious requests using encoded payloads placed in different parts of HTTP requests: its body, headers,"
        },
        {
          "text": "allow you to do an arbitrary http request",
          "source_url": "https://github.com/wallarm/gotestwaf#L73",
          "evidence": "The `RawRequest` placeholder will allow you to do an arbitrary HTTP request. The payload is substituted by replacing the string `{{payload}}` in the URL path, Headers or body. Fields of `RawRequest` placeholder:"
        },
        {
          "text": "process involving the multiplication of payload amount by encoder and placeholder amounts",
          "source_url": "https://github.com/wallarm/gotestwaf#L114",
          "evidence": "Request generation is a three-step process involving the multiplication of payload amount by encoder and placeholder amounts."
        },
        {
          "text": "supports all the popular operating systems (linux, windows, macos), and can be built natively",
          "source_url": "https://github.com/wallarm/gotestwaf#L123",
          "evidence": "* GoTestwaf supports all the popular operating systems (Linux, Windows, macOS), and can be built natively"
        },
        {
          "text": "run gotestwaf natively,",
          "source_url": "https://github.com/wallarm/gotestwaf#L124",
          "evidence": "if [Go](https://golang.org/doc/install) is installed in the system. If you want to run GoTestWaf natively,"
        },
        {
          "text": "generate pdf reports",
          "source_url": "https://github.com/wallarm/gotestwaf#L125",
          "evidence": "make sure you have the Chrome web browser to be able to generate PDF reports. In case you don't have Chrome,"
        },
        {
          "text": "create a report in html format",
          "source_url": "https://github.com/wallarm/gotestwaf#L126",
          "evidence": "you can create a report in HTML format."
        },
        {
          "text": "run --rm --network=\"host\" -it -v ${pwd}/reports:/app/reports \\",
          "source_url": "https://github.com/wallarm/gotestwaf#L145",
          "evidence": "docker run --rm --network=\"host\" -it -v ${PWD}/reports:/app/reports \\"
        },
        {
          "text": "run --rm --network=\"host\" -v ${pwd}/reports:/app/reports \\",
          "source_url": "https://github.com/wallarm/gotestwaf#L154",
          "evidence": "docker run --rm --network=\"host\" -v ${PWD}/reports:/app/reports \\"
        },
        {
          "text": "enables interaction of docker containers running on 127",
          "source_url": "https://github.com/wallarm/gotestwaf#L158",
          "evidence": "If the evaluated security tool is available externally, you can skip the option `--network=\"host\"`. This option enables interaction of Docker containers running on 127.0.0.1."
        },
        {
          "text": "perform the grpc tests you must have a working endpoint and use the --grpcport <port> cli option",
          "source_url": "https://github.com/wallarm/gotestwaf#L160",
          "evidence": "To perform the gRPC tests you must have a working endpoint and use the --grpcPort <port> cli option."
        },
        {
          "text": "run --rm --network=\"host\" -it -v ${pwd}/reports:/app/reports \\",
          "source_url": "https://github.com/wallarm/gotestwaf#L163",
          "evidence": "docker run --rm --network=\"host\" -it -v ${PWD}/reports:/app/reports \\"
        },
        {
          "text": "include                \u2502 50",
          "source_url": "https://github.com/wallarm/gotestwaf#L229",
          "evidence": "\u2502 owasp      \u2502 ss-include                \u2502 50.00                \u2502 12                  \u2502 12                   \u2502 0                  \u2502 24          \u2502 0               \u2502"
        },
        {
          "text": "run the demo environment:",
          "source_url": "https://github.com/wallarm/gotestwaf#L276",
          "evidence": "To run the demo environment:"
        },
        {
          "text": "runs the modsecurity docker container on port 8080 with minimal configuration defined in the cloned file `",
          "source_url": "https://github.com/wallarm/gotestwaf#L291",
          "evidence": "Settings for running the ModSecurity Docker container are defined in the rule `modsec` of the cloned Makefile. It runs the ModSecurity Docker container on port 8080 with minimal configuration defined in the cloned file `./resources/default.conf.template` and the `PARANOIA` value set to 1."
        },
        {
          "text": "run --rm --network=\"host\" -v ${pwd}/reports:/app/reports \\",
          "source_url": "https://github.com/wallarm/gotestwaf#L307",
          "evidence": "docker run --rm --network=\"host\" -v ${PWD}/reports:/app/reports \\"
        },
        {
          "text": "build the gotestwaf docker image from the [dockerfile](",
          "source_url": "https://github.com/wallarm/gotestwaf#L311",
          "evidence": "Build the GoTestWAF Docker image from the [Dockerfile](./Dockerfile) and run the"
        },
        {
          "text": "run gotestwaf by using the following options:",
          "source_url": "https://github.com/wallarm/gotestwaf#L331",
          "evidence": "In addition to running the GoTestWAF Docker image downloaded from Docker Hub, you can run GoTestWAF by using the following options:"
        },
        {
          "text": "build the gotestwaf docker image from the [dockerfile](",
          "source_url": "https://github.com/wallarm/gotestwaf#L333",
          "evidence": "*   Clone this repository and build the GoTestWAF Docker image from the [Dockerfile](./Dockerfile), for example:"
        },
        {
          "text": "build --force-rm -t gotestwaf",
          "source_url": "https://github.com/wallarm/gotestwaf#L338",
          "evidence": "DOCKER_BUILDKIT=1 docker build --force-rm -t gotestwaf ."
        },
        {
          "text": "run --rm --network=\"host\" -it -v ${pwd}/reports:/app/reports \\",
          "source_url": "https://github.com/wallarm/gotestwaf#L339",
          "evidence": "docker run --rm --network=\"host\" -it -v ${PWD}/reports:/app/reports \\"
        },
        {
          "text": "enables interaction of docker containers running on 127",
          "source_url": "https://github.com/wallarm/gotestwaf#L343",
          "evidence": "If the evaluated security tool is available externally, you can skip the option `--network=\"host\"`. This option enables interaction of Docker containers running on 127.0.0.1."
        },
        {
          "text": "run gotestwaf with [`go`](https://golang",
          "source_url": "https://github.com/wallarm/gotestwaf#L345",
          "evidence": "* Clone this repository and run GoTestWAF with [`go`](https://golang.org/doc/), for example:"
        },
        {
          "text": "build gotestwaf as the go module:",
          "source_url": "https://github.com/wallarm/gotestwaf#L353",
          "evidence": "*   Clone this repository and build GoTestWAF as the Go module:"
        },
        {
          "text": "build -mod vendor -o gotestwaf",
          "source_url": "https://github.com/wallarm/gotestwaf#L358",
          "evidence": "go build -mod vendor -o gotestwaf ./cmd"
        },
        {
          "text": "export report in the following formats: none, json, html, pdf (default [pdf])",
          "source_url": "https://github.com/wallarm/gotestwaf#L397",
          "evidence": "--reportFormat strings    Export report in the following formats: none, json, html, pdf (default [pdf])"
        },
        {
          "text": "supports `time' package template format (default \"waf-evaluation-report-2006-january-02-15-04-05\")",
          "source_url": "https://github.com/wallarm/gotestwaf#L398",
          "evidence": "--reportName string       Report file name. Supports `time' package template format (default \"waf-evaluation-report-2006-January-02-15-04-05\")"
        },
        {
          "text": "supports two http clients for performing requests, selectable via the `--httpclient` option",
          "source_url": "https://github.com/wallarm/gotestwaf#L413",
          "evidence": "GoTestWAF supports two HTTP clients for performing requests, selectable via the `--httpClient` option. The default client is the standard Golang HTTP client. The second option is Chrome, which can be used with the `--httpClient=chrome` CLI argument. Note that on Linux systems, you must add the `--cap-add=SYS_ADMIN` argument to the Docker arguments to run GoTestWAF with Chrome as the request performer."
        },
        {
          "text": "run gotestwaf with chrome as the request performer",
          "source_url": "https://github.com/wallarm/gotestwaf#L413",
          "evidence": "GoTestWAF supports two HTTP clients for performing requests, selectable via the `--httpClient` option. The default client is the standard Golang HTTP client. The second option is Chrome, which can be used with the `--httpClient=chrome` CLI argument. Note that on Linux systems, you must add the `--cap-add=SYS_ADMIN` argument to the Docker arguments to run GoTestWAF with Chrome as the request performer."
        },
        {
          "text": "performing requests, selectable via the `--httpclient` option",
          "source_url": "https://github.com/wallarm/gotestwaf#L413",
          "evidence": "GoTestWAF supports two HTTP clients for performing requests, selectable via the `--httpClient` option. The default client is the standard Golang HTTP client. The second option is Chrome, which can be used with the `--httpClient=chrome` CLI argument. Note that on Linux systems, you must add the `--cap-add=SYS_ADMIN` argument to the Docker arguments to run GoTestWAF with Chrome as the request performer."
        },
        {
          "text": "supports sending malicious vectors through valid application requests",
          "source_url": "https://github.com/wallarm/gotestwaf#L418",
          "evidence": "For better scanning, GTW supports sending malicious vectors through valid application requests. Instead of constructing requests that are simple in structure and send them to the URL specified at startup, GoTestWAF creates valid requests based on the application's API description in the OpenAPI 3.0 format."
        },
        {
          "text": "creates valid requests based on the application's api description in the openapi 3",
          "source_url": "https://github.com/wallarm/gotestwaf#L418",
          "evidence": "For better scanning, GTW supports sending malicious vectors through valid application requests. Instead of constructing requests that are simple in structure and send them to the URL specified at startup, GoTestWAF creates valid requests based on the application's API description in the OpenAPI 3.0 format."
        },
        {
          "text": "support urlpath placeholder)",
          "source_url": "https://github.com/wallarm/gotestwaf#L422",
          "evidence": "1. GoTestWAF loads an OpenAPI file and constructs request templates. All templates are then divided into groups based on what placeholders they support (e.g., if there is a string parameter in the request path, then such a request will be assigned to a group of requests that support URLPath placeholder)"
        },
        {
          "text": "run --rm --network=\"host\" -it -v ${pwd}/reports:/app/reports -v ${pwd}/api",
          "source_url": "https://github.com/wallarm/gotestwaf#L455",
          "evidence": "docker run --rm --network=\"host\" -it -v ${PWD}/reports:/app/reports -v ${PWD}/api.yaml:/app/api.yaml wallarm/gotestwaf --wafName your_waf_name --url=https://example.com/v1 --openapiFile api.yaml"
        },
        {
          "text": "allows easy integration of additional test suites",
          "source_url": "https://github.com/wallarm/gotestwaf#L460",
          "evidence": "GoTestWAF allows easy integration of additional test suites."
        },
        {
          "text": "run `make modsec_crs_regression_tests_convert`",
          "source_url": "https://github.com/wallarm/gotestwaf#L466",
          "evidence": "To convert the tests, run `make modsec_crs_regression_tests_convert`."
        },
        {
          "text": "build a container with the updated set of tests",
          "source_url": "https://github.com/wallarm/gotestwaf#L467",
          "evidence": "Then, build a container with the updated set of tests."
        },
        {
          "text": "Other options to run GoTestWAF",
          "source_url": "https://github.com/wallarm/gotestwaf#L15",
          "evidence": "* [Other options to run GoTestWAF](#other-options-to-run-gotestwaf)"
        },
        {
          "text": "Running with OWASP Core Rule Set regression testing suite",
          "source_url": "https://github.com/wallarm/gotestwaf#L17",
          "evidence": "* [Running with OWASP Core Rule Set regression testing suite](#running-with-owasp-core-rule-set-regression-testing-suite)"
        },
        {
          "text": "GoTestwaf supports all the popular operating systems (Linux, Windows, macOS), and can be built natively",
          "source_url": "https://github.com/wallarm/gotestwaf#L123",
          "evidence": "* GoTestwaf supports all the popular operating systems (Linux, Windows, macOS), and can be built natively"
        },
        {
          "text": "If running GoTestWAF as the Docker container, please ensure you have installed and configured Docker,",
          "source_url": "https://github.com/wallarm/gotestwaf#L127",
          "evidence": "* If running GoTestWAF as the Docker container, please ensure you have [installed and configured Docker](https://docs.docker.com/get-docker/),"
        },
        {
          "text": "For GoTestWAF to be successfully started, please ensure the IP address of the machine running GoTestWAF is whitelisted",
          "source_url": "https://github.com/wallarm/gotestwaf#L129",
          "evidence": "* For GoTestWAF to be successfully started, please ensure the IP address of the machine running GoTestWAF is whitelisted"
        },
        {
          "text": "Clone this repository and build the GoTestWAF Docker image from the Dockerfile, for example:",
          "source_url": "https://github.com/wallarm/gotestwaf#L333",
          "evidence": "*   Clone this repository and build the GoTestWAF Docker image from the [Dockerfile](./Dockerfile), for example:"
        },
        {
          "text": "Clone this repository and run GoTestWAF with `go`, for example:",
          "source_url": "https://github.com/wallarm/gotestwaf#L345",
          "evidence": "* Clone this repository and run GoTestWAF with [`go`](https://golang.org/doc/), for example:"
        },
        {
          "text": "Clone this repository and build GoTestWAF as the Go module:",
          "source_url": "https://github.com/wallarm/gotestwaf#L353",
          "evidence": "*   Clone this repository and build GoTestWAF as the Go module:"
        },
        {
          "text": "--includePayloads         If present, payloads will be included in HTML/PDF report",
          "source_url": "https://github.com/wallarm/gotestwaf#L383",
          "evidence": "--includePayloads         If present, payloads will be included in HTML/PDF report"
        },
        {
          "text": "--reportFormat strings    Export report in the following formats: none, json, html, pdf (default [pdf])",
          "source_url": "https://github.com/wallarm/gotestwaf#L397",
          "evidence": "--reportFormat strings    Export report in the following formats: none, json, html, pdf (default [pdf])"
        },
        {
          "text": "--reportName string       Report file name. Supports `time' package template format (default \"waf-evaluation-report-2006-January-02-15-04-05\")",
          "source_url": "https://github.com/wallarm/gotestwaf#L398",
          "evidence": "--reportName string       Report file name. Supports `time' package template format (default \"waf-evaluation-report-2006-January-02-15-04-05\")"
        },
        {
          "text": "--testCase string         If set then only this test case will be run",
          "source_url": "https://github.com/wallarm/gotestwaf#L403",
          "evidence": "--testCase string         If set then only this test case will be run"
        },
        {
          "text": "--testSet string          If set then only this test set's cases will be run",
          "source_url": "https://github.com/wallarm/gotestwaf#L405",
          "evidence": "--testSet string          If set then only this test set's cases will be run"
        },
        {
          "text": "the following content-types are supported for the request body: `application/json`, `application/xml`, `application/x-www-form-urlencoded`, `text/plain`;",
          "source_url": "https://github.com/wallarm/gotestwaf#L432",
          "evidence": "* the following content-types are supported for the request body: `application/json`, `application/xml`, `application/x-www-form-urlencoded`, `text/plain`;"
        },
        {
          "text": "the following modifiers are supported for XML: `name`, `wrapped`, `attribute`, `prefix`, `namespace`;",
          "source_url": "https://github.com/wallarm/gotestwaf#L434",
          "evidence": "* the following modifiers are supported for XML: `name`, `wrapped`, `attribute`, `prefix`, `namespace`;"
        },
        {
          "text": "length limits for strings are supported through the `minLength` and `maxLength` parameters;",
          "source_url": "https://github.com/wallarm/gotestwaf#L436",
          "evidence": "* length limits for strings are supported through the `minLength` and `maxLength` parameters;"
        },
        {
          "text": "value restrictions for numbers are supported through `minimum`, `maximum`, `exclusiveMinimum` and `exclusiveMaximum`;",
          "source_url": "https://github.com/wallarm/gotestwaf#L438",
          "evidence": "* value restrictions for numbers are supported through `minimum`, `maximum`, `exclusiveMinimum` and `exclusiveMaximum`;"
        },
        {
          "text": "restrictions on the length of arrays through `minItems` and `maxItems` are supported;",
          "source_url": "https://github.com/wallarm/gotestwaf#L440",
          "evidence": "* restrictions on the length of arrays through `minItems` and `maxItems` are supported;"
        },
        {
          "text": "combination of schemes via `oneOf`, `anyOf`, `allOf` is supported.",
          "source_url": "https://github.com/wallarm/gotestwaf#L442",
          "evidence": "* combination of schemes via `oneOf`, `anyOf`, `allOf` is supported."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "j3ssie/metabigor",
      "url": "https://github.com/j3ssie/metabigor",
      "stars": 1401,
      "language": "Go",
      "features": [
        {
          "text": "Searching information about IP Address, ASN and Organization.",
          "source_url": "https://github.com/j3ssie/metabigor#L34",
          "evidence": "- Searching information about IP Address, ASN and Organization."
        },
        {
          "text": "Wrapper for running rustscan, masscan and nmap more efficient on IP/CIDR.",
          "source_url": "https://github.com/j3ssie/metabigor#L35",
          "evidence": "- Wrapper for running rustscan, masscan and nmap more efficient on IP/CIDR."
        },
        {
          "text": "Finding more related domains of the target by applying various techniques (certificate, whois, Google Analytics, etc).",
          "source_url": "https://github.com/j3ssie/metabigor#L36",
          "evidence": "- Finding more related domains of the target by applying various techniques (certificate, whois, Google Analytics, etc)."
        },
        {
          "text": "Get Summary about IP address (powered by @thebl4ckturtle)",
          "source_url": "https://github.com/j3ssie/metabigor#L37",
          "evidence": "- Get Summary about IP address (powered by [**@thebl4ckturtle**](https://github.com/theblackturtle))"
        },
        {
          "text": "building from source",
          "source_url": "https://github.com/j3ssie/metabigor#L25",
          "evidence": "### Building from Source"
        },
        {
          "text": "run rustscan with full ports",
          "source_url": "https://github.com/j3ssie/metabigor#L81",
          "evidence": "# Only run rustscan with full ports"
        },
        {
          "text": "run nmap detail scan based on pre-scan data",
          "source_url": "https://github.com/j3ssie/metabigor#L84",
          "evidence": "# Only run nmap detail scan based on pre-scan data"
        },
        {
          "text": "run rustscan with full ports and nmap detail scan based on pre-scan data",
          "source_url": "https://github.com/j3ssie/metabigor#L90",
          "evidence": "# Run rustscan with full ports and nmap detail scan based on pre-scan data"
        },
        {
          "text": "integrate metabigor into your recon workflow",
          "source_url": "https://github.com/j3ssie/metabigor#L144",
          "evidence": "## Painless integrate Metabigor into your recon workflow?"
        },
        {
          "text": "Wrapper for running rustscan, masscan and nmap more efficient on IP/CIDR.",
          "source_url": "https://github.com/j3ssie/metabigor#L35",
          "evidence": "- Wrapper for running rustscan, masscan and nmap more efficient on IP/CIDR."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "blst-security/cherrybomb",
      "url": "https://github.com/blst-security/cherrybomb",
      "stars": 1221,
      "language": "Rust",
      "features": [
        {
          "text": "run --mount type=bind,source=[path to oas],destination=/home public",
          "source_url": "https://github.com/blst-security/cherrybomb#L55",
          "evidence": "docker run --mount type=bind,source=[PATH TO OAS],destination=/home public.ecr.aws/blst-security/cherrybomb:latest cherrybomb -f /home/[OAS NAME] --api-key=[API-KEY]"
        },
        {
          "text": "building from sources",
          "source_url": "https://github.com/blst-security/cherrybomb#L70",
          "evidence": "#### Building from Sources"
        },
        {
          "text": "build cherrybomb from sources by cloning this repo, and building it using cargo",
          "source_url": "https://github.com/blst-security/cherrybomb#L72",
          "evidence": "You can also build Cherrybomb from sources by cloning this repo, and building it using cargo."
        },
        {
          "text": "building it using cargo",
          "source_url": "https://github.com/blst-security/cherrybomb#L72",
          "evidence": "You can also build Cherrybomb from sources by cloning this repo, and building it using cargo."
        },
        {
          "text": "build those from source too, you can change the following files:",
          "source_url": "https://github.com/blst-security/cherrybomb#L81",
          "evidence": "if you want build those from source too, you can change the following files:"
        },
        {
          "text": "allow you to choose the type of check you want to use",
          "source_url": "https://github.com/blst-security/cherrybomb#L106",
          "evidence": "Profiles allow you to choose the type of check you want to use."
        },
        {
          "text": "generates param and endpoint tables",
          "source_url": "https://github.com/blst-security/cherrybomb#L108",
          "evidence": "- info: only generates param and endpoint tables"
        },
        {
          "text": "allows you to set the running profile, location of the oas file, the verbosity and ignore the tls error",
          "source_url": "https://github.com/blst-security/cherrybomb#L120",
          "evidence": "The config file allows you to set the running profile, location of the oas file, the verbosity and ignore the TLS error."
        },
        {
          "text": "allows you to override the server's url with an array of servers, and add security to the request [in development]",
          "source_url": "https://github.com/blst-security/cherrybomb#L122",
          "evidence": "Config also allows you to override the server's URL with an array of servers, and add security to the request [in development]."
        },
        {
          "text": "generate info table",
          "source_url": "https://github.com/blst-security/cherrybomb#L173",
          "evidence": "### Generate Info Table"
        },
        {
          "text": "info: only generates param and endpoint tables",
          "source_url": "https://github.com/blst-security/cherrybomb#L108",
          "evidence": "- info: only generates param and endpoint tables"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "cloudgraphdev/cli",
      "url": "https://github.com/cloudgraphdev/cli",
      "stars": 891,
      "language": "TypeScript",
      "features": [
        {
          "text": "build cloudgraph providers](https://github",
          "source_url": "https://github.com/cloudgraphdev/cli#L31",
          "evidence": "\ud83d\udcb0 [Get paid to build CloudGraph providers](https://github.com/cloudgraphdev/cli/blob/main/CONTRIBUTING.md)"
        },
        {
          "text": "create systems to power our increasingly interconnected world",
          "source_url": "https://github.com/cloudgraphdev/cli#L94",
          "evidence": "AWS, Azure, and GPC have done a wonderful job of building solutions that let engineers like us create systems to power our increasingly interconnected world. Over the last 15 years, products such as EC2, S3, RDS, and Lambda have fundamentally changed how we think about computing, storage, and databasing."
        },
        {
          "text": "building solutions that let engineers like us create systems to power our increasingly interconnected world",
          "source_url": "https://github.com/cloudgraphdev/cli#L94",
          "evidence": "AWS, Azure, and GPC have done a wonderful job of building solutions that let engineers like us create systems to power our increasingly interconnected world. Over the last 15 years, products such as EC2, S3, RDS, and Lambda have fundamentally changed how we think about computing, storage, and databasing."
        },
        {
          "text": "create anything they need",
          "source_url": "https://github.com/cloudgraphdev/cli#L98",
          "evidence": "With the proliferation of Kubernetes and Serverless in the last 5 or so years, cloud services have become increasingly abstract on top of racks of physical servers. To end-users, everything on the cloud is just an API, so we don't necessarily need to know how Lambda Functions or EKS work under the hood to be able to use them for building applications. With a little documentation, API or console access, and a tutorial anyone can pretty much create anything they need."
        },
        {
          "text": "building applications",
          "source_url": "https://github.com/cloudgraphdev/cli#L98",
          "evidence": "With the proliferation of Kubernetes and Serverless in the last 5 or so years, cloud services have become increasingly abstract on top of racks of physical servers. To end-users, everything on the cloud is just an API, so we don't necessarily need to know how Lambda Functions or EKS work under the hood to be able to use them for building applications. With a little documentation, API or console access, and a tutorial anyone can pretty much create anything they need."
        },
        {
          "text": "process of provisioning new servers, databases, or filesystems can now be done in seconds with just the click of a button or deployment of iac",
          "source_url": "https://github.com/cloudgraphdev/cli#L102",
          "evidence": "These abstractions have led to massive improvements in the overall convenience and breadth of CSP service offerings. What was once a painstaking, time-consuming, and error-prone process of provisioning new servers, databases, or filesystems can now be done in seconds with just the click of a button or deployment of IAC. Since everything is just an API abstraction, when a CAP is ready to introduce a new \"product\" they simply need to expose a new API - yes, I'm of course simplifying slightly :)"
        },
        {
          "text": "building substantial systems on a csp is likely using many, many different services",
          "source_url": "https://github.com/cloudgraphdev/cli#L106",
          "evidence": "Anyone familiar with the CSPs knows that service APIs are almost always split into modular namespaces that contain dozens, if not hundreds, of separate API methods for single resources. For example, the AWS EC2 service contains over 500 different API methods, with new ones added occasionally. Any company building substantial systems on a CSP is likely using many, many different services."
        },
        {
          "text": "building the actual services that power our businesses, not a lot of headway has been into simplifying the day-to-day ux of querying these hundreds of services in a sane manner",
          "source_url": "https://github.com/cloudgraphdev/cli#L114",
          "evidence": "This means that AWS, Azure, and GCP can feel overwhelming quickly even to seasoned cloud architects. While the CSPs are fantastic at building the actual services that power our businesses, not a lot of headway has been into simplifying the day-to-day UX of querying these hundreds of services in a sane manner."
        },
        {
          "text": "create a standardized interface for querying many different types of aws resources",
          "source_url": "https://github.com/cloudgraphdev/cli#L118",
          "evidence": "New solutions like the Cloud Control API for AWS have attempted to create a standardized interface for querying many different types of AWS resources. Unfortunately, the Cloud Control API's usage is severely limited, and users still need to know how to correctly query their data. This means more time spent reading documentation and understanding how services work and are related to one another."
        },
        {
          "text": "allowing you to access deep insights across multiple providers effortlessly",
          "source_url": "https://github.com/cloudgraphdev/cli#L130",
          "evidence": "It is for these reasons that we built CloudGraph, the GraphQL API for everything cloud. CloudGraph extracts, normalizes, processes, and enriches your cloud data allowing you to access deep insights across multiple providers effortlessly. Check out our blog post [The GraphQL API for everything](https://www.autocloud.dev/blog/the-graphql-api-for-all-clouds) to learn more."
        },
        {
          "text": "run and as such can never mutate your actual cloud infrastructure",
          "source_url": "https://github.com/cloudgraphdev/cli#L142",
          "evidence": "Note that CloudGraph requires **READ ONLY** permissions to run and as such can **never** mutate your actual cloud infrastructure. Additionally, none of your cloud environment information is ever sent to or shared with CloudGraph, AutoCloud, or any other third parties."
        },
        {
          "text": "allows you to write graphql queries against your stored data",
          "source_url": "https://github.com/cloudgraphdev/cli#L146",
          "evidence": "Under the hood, CloudGraph reaches out to your cloud provider(s), sucks up all of the configuration data, processes it, and stores a copy of this data for you in [Dgraph](https://dgraph.io/). It then exposes an endpoint at `http://localhost:8997` that allows you to write GraphQL Queries against your stored data. These queries not only allow you do to anything that you would do with say, the AWS SDK/CLI, but they also allow you to run much more powerful queries as well. CloudGraph ships with pre-packaged GraphQL query tools including [GraphQL Playground](https://github.com/graphql/graphql-playground) and [Altair](https://github.com/altair-viz/altair) but you can also feel free to use your own. It also includes a schema visualization tool called [Voyager](https://github.com/APIs-guru/graphql-voyager) so you can understand relationships between entities."
        },
        {
          "text": "allow you do to anything that you would do with say, the aws sdk/cli, but they also allow you to run much more powerful queries as well",
          "source_url": "https://github.com/cloudgraphdev/cli#L146",
          "evidence": "Under the hood, CloudGraph reaches out to your cloud provider(s), sucks up all of the configuration data, processes it, and stores a copy of this data for you in [Dgraph](https://dgraph.io/). It then exposes an endpoint at `http://localhost:8997` that allows you to write GraphQL Queries against your stored data. These queries not only allow you do to anything that you would do with say, the AWS SDK/CLI, but they also allow you to run much more powerful queries as well. CloudGraph ships with pre-packaged GraphQL query tools including [GraphQL Playground](https://github.com/graphql/graphql-playground) and [Altair](https://github.com/altair-viz/altair) but you can also feel free to use your own. It also includes a schema visualization tool called [Voyager](https://github.com/APIs-guru/graphql-voyager) so you can understand relationships between entities."
        },
        {
          "text": "includes a schema visualization tool called [voyager](https://github",
          "source_url": "https://github.com/cloudgraphdev/cli#L146",
          "evidence": "Under the hood, CloudGraph reaches out to your cloud provider(s), sucks up all of the configuration data, processes it, and stores a copy of this data for you in [Dgraph](https://dgraph.io/). It then exposes an endpoint at `http://localhost:8997` that allows you to write GraphQL Queries against your stored data. These queries not only allow you do to anything that you would do with say, the AWS SDK/CLI, but they also allow you to run much more powerful queries as well. CloudGraph ships with pre-packaged GraphQL query tools including [GraphQL Playground](https://github.com/graphql/graphql-playground) and [Altair](https://github.com/altair-viz/altair) but you can also feel free to use your own. It also includes a schema visualization tool called [Voyager](https://github.com/APIs-guru/graphql-voyager) so you can understand relationships between entities."
        },
        {
          "text": "run much more powerful queries as well",
          "source_url": "https://github.com/cloudgraphdev/cli#L146",
          "evidence": "Under the hood, CloudGraph reaches out to your cloud provider(s), sucks up all of the configuration data, processes it, and stores a copy of this data for you in [Dgraph](https://dgraph.io/). It then exposes an endpoint at `http://localhost:8997` that allows you to write GraphQL Queries against your stored data. These queries not only allow you do to anything that you would do with say, the AWS SDK/CLI, but they also allow you to run much more powerful queries as well. CloudGraph ships with pre-packaged GraphQL query tools including [GraphQL Playground](https://github.com/graphql/graphql-playground) and [Altair](https://github.com/altair-viz/altair) but you can also feel free to use your own. It also includes a schema visualization tool called [Voyager](https://github.com/APIs-guru/graphql-voyager) so you can understand relationships between entities."
        },
        {
          "text": "supports aws, azure, gcp, k8s, and tencent (several others coming soon)",
          "source_url": "https://github.com/cloudgraphdev/cli#L152",
          "evidence": "CloudGraph currently supports AWS, Azure, GCP, K8s, and Tencent (several others coming soon). CloudGraph needs read permissions in order to ingest your data. To keep things easy you can use the same permissions that we use internally when we run CloudGraph to power AutoCloud. Here are the auth guides and details for how to generate credentials for each provider (feel free to leave out AutoCloud specific configuration):"
        },
        {
          "text": "generate credentials for each provider (feel free to leave out autocloud specific configuration):",
          "source_url": "https://github.com/cloudgraphdev/cli#L152",
          "evidence": "CloudGraph currently supports AWS, Azure, GCP, K8s, and Tencent (several others coming soon). CloudGraph needs read permissions in order to ingest your data. To keep things easy you can use the same permissions that we use internally when we run CloudGraph to power AutoCloud. Here are the auth guides and details for how to generate credentials for each provider (feel free to leave out AutoCloud specific configuration):"
        },
        {
          "text": "run cloudgraph to power autocloud",
          "source_url": "https://github.com/cloudgraphdev/cli#L152",
          "evidence": "CloudGraph currently supports AWS, Azure, GCP, K8s, and Tencent (several others coming soon). CloudGraph needs read permissions in order to ingest your data. To keep things easy you can use the same permissions that we use internally when we run CloudGraph to power AutoCloud. Here are the auth guides and details for how to generate credentials for each provider (feel free to leave out AutoCloud specific configuration):"
        },
        {
          "text": "run -it -p 8995:5080 -p 8996:6080 -p 8997:8080 -p 8998:9080 -p 8999:8000",
          "source_url": "https://github.com/cloudgraphdev/cli#L274",
          "evidence": "docker run -it -p 8995:5080 -p 8996:6080 -p 8997:8080 -p 8998:9080 -p 8999:8000"
        },
        {
          "text": "run queries, mutations, and visualizations on all of your cloud infrastructure",
          "source_url": "https://github.com/cloudgraphdev/cli#L296",
          "evidence": "That's it, you are all set to start querying! The query tool you selected during the `cg init` command will then be opened in your preferred browser to run queries, mutations, and visualizations on all of your cloud infrastructure! Note that if you installed any policy packs, such as AWS CIS 1.2, policy pack insight data will be automatically added to your cloud data!"
        },
        {
          "text": "run the `cg load` command and select the version of your data you wish to inspect like so:",
          "source_url": "https://github.com/cloudgraphdev/cli#L334",
          "evidence": "CloudGraph stores as many previous versions of your data as you configured in the `cg init` command. In order to load and query a previous version of your data simply run the `cg load` command and select the version of your data you wish to inspect like so:"
        },
        {
          "text": "run to get the `id` and `arn` of a single `ec2 instance`",
          "source_url": "https://github.com/cloudgraphdev/cli#L376",
          "evidence": "To explain how CloudGraph works consider the following query that you can run to get the `ID` and `ARN` of a single `EC2 instance`. Note that for the purposes of these examples we will just request the `IDs` and `ARNs` of AWS resources to keep things terse, but you can query whatever attributes you want:"
        },
        {
          "text": "include the `ebs volume` that is the boot disk for each `ec2 instance`:",
          "source_url": "https://github.com/cloudgraphdev/cli#L511",
          "evidence": "Do the same thing but also include the `EBS Volume` that is the boot disk for each `EC2 instance`:"
        },
        {
          "text": "include the `sgs` and `albs` for each `ec2`",
          "source_url": "https://github.com/cloudgraphdev/cli#L534",
          "evidence": "Do the same thing, but also include the `SGs` and `ALBs` for each `EC2`. For the `ALBs`, get the `EC2s` that they are connected to along with the `ID` and `ARN` of each found `EC2 instance` (i.e. a circular query)."
        },
        {
          "text": "execute your configured policies",
          "source_url": "https://github.com/cloudgraphdev/cli#L611",
          "evidence": "CloudGraph Policy Packs guarantee compliance across existing infrastructure for a given cloud provider. Packs are based on sets of rules/benchmarks provided by security organizations like the Center for Internet Security with the objective of keeping your infrastructure up-to-date with industry security standards. Once you have added a policy pack using the `cg policy add` command (i.e. `cg policy add aws-cis-1.2.0`) each time you run a scan CloudGraph will _automatically_ execute your configured policies. Those results will be stored at Dgraph and linked to your existing resources, making it easy to query your compliance results alongside your resources."
        },
        {
          "text": "run a scan cloudgraph will _automatically_ execute your configured policies",
          "source_url": "https://github.com/cloudgraphdev/cli#L611",
          "evidence": "CloudGraph Policy Packs guarantee compliance across existing infrastructure for a given cloud provider. Packs are based on sets of rules/benchmarks provided by security organizations like the Center for Internet Security with the objective of keeping your infrastructure up-to-date with industry security standards. Once you have added a policy pack using the `cg policy add` command (i.e. `cg policy add aws-cis-1.2.0`) each time you run a scan CloudGraph will _automatically_ execute your configured policies. Those results will be stored at Dgraph and linked to your existing resources, making it easy to query your compliance results alongside your resources."
        },
        {
          "text": "support nested filtering based on child attributes",
          "source_url": "https://github.com/cloudgraphdev/cli#L1237",
          "evidence": "Today, the biggest limitation with CloudGraph and our query abilities is we don't support nested filtering based on child attributes. So for example, as cool as it would be to do the following, it's just not possible yet:"
        },
        {
          "text": "import collections of queries",
          "source_url": "https://github.com/cloudgraphdev/cli#L1294",
          "evidence": "Altair is another great GraphQL query tool that packs a ton of [features](https://github.com/altair-graphql/altair#features) for power users. Do things like autocomplete queries, dynamically add fragments, and export/import collections of queries. To access Altair, either select it as your preferred query tool in the `init` command OR visit `/altair` in the server CG spins up."
        },
        {
          "text": "run cloudgraph locally, or you can deploy it to your cloud provider of choice",
          "source_url": "https://github.com/cloudgraphdev/cli#L1338",
          "evidence": "You can either run CloudGraph locally, or you can deploy it to your cloud provider of choice. Terraform modules and guides for cloud deployments are coming soon!"
        },
        {
          "text": "create a new issue](https://github",
          "source_url": "https://github.com/cloudgraphdev/cli#L1364",
          "evidence": "- \u26a0\ufe0f unable to make some connections - This warning in the scan report appears when CG tries to make a connection between two resources and is unable to do so. If you see this using one of CG's offically supported providers, please [create a new issue](https://github.com/cloudgraphdev/cli/issues) so we can solve it. The most common cause of this error is a bug in the underlying provider's resource connection logic."
        },
        {
          "text": "plugin for {provider} - this error occurs when cg's plugin manager can not find the provider module you want to use",
          "source_url": "https://github.com/cloudgraphdev/cli#L1370",
          "evidence": "- Manager failed to install plugin for {provider} - This error occurs when CG's plugin manager can not find the provider module you want to use. The manager searches the public NPM registry for the provider module. For offically supported providers, just pass the provider name `CG init aws`. For community supported providers, you must pass the namespace as well `CG init @{providerNamespace}/{provider}`"
        },
        {
          "text": "include all nested commands in the output",
          "source_url": "https://github.com/cloudgraphdev/cli#L1410",
          "evidence": "-n, --nested-commands  Include all nested commands in the output."
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1428",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1465",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1497",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "manage policy pack modules, run $ cg policy for more info",
          "source_url": "https://github.com/cloudgraphdev/cli#L1523",
          "evidence": "Commands to manage policy pack modules, run $ cg policy for more info."
        },
        {
          "text": "run $ cg policy for more info",
          "source_url": "https://github.com/cloudgraphdev/cli#L1523",
          "evidence": "Commands to manage policy pack modules, run $ cg policy for more info."
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1531",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "manage policy pack modules, run $ cg policy for more info",
          "source_url": "https://github.com/cloudgraphdev/cli#L1545",
          "evidence": "Commands to manage policy pack modules, run $ cg policy for more info."
        },
        {
          "text": "run $ cg policy for more info",
          "source_url": "https://github.com/cloudgraphdev/cli#L1545",
          "evidence": "Commands to manage policy pack modules, run $ cg policy for more info."
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1560",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1596",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1630",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1667",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1709",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "manage provider modules, run $ cg provider for more info",
          "source_url": "https://github.com/cloudgraphdev/cli#L1736",
          "evidence": "Commands to manage provider modules, run $ cg provider for more info."
        },
        {
          "text": "run $ cg provider for more info",
          "source_url": "https://github.com/cloudgraphdev/cli#L1736",
          "evidence": "Commands to manage provider modules, run $ cg provider for more info."
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1744",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "manage provider modules, run $ cg provider for more info",
          "source_url": "https://github.com/cloudgraphdev/cli#L1758",
          "evidence": "Commands to manage provider modules, run $ cg provider for more info."
        },
        {
          "text": "run $ cg provider for more info",
          "source_url": "https://github.com/cloudgraphdev/cli#L1758",
          "evidence": "Commands to manage provider modules, run $ cg provider for more info."
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1773",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1809",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1843",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1880",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1922",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1957",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1995",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L2049",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "Automatically generated documentation and query validation - know if your query is valid before you send it!",
          "source_url": "https://github.com/cloudgraphdev/cli#L16",
          "evidence": "- Automatically generated documentation and query validation - know if your query is valid before you send it!"
        },
        {
          "text": "Supported Services",
          "source_url": "https://github.com/cloudgraphdev/cli#L61",
          "evidence": "* [Supported Services](#supported-services)"
        },
        {
          "text": "\u26a0\ufe0f unable to make some connections - This warning in the scan report appears when CG tries to make a connection between two resources and is unable to do so. If you see this using one of CG's offically supported providers, please create a new issue so we can solve it. The most common cause of this error is a bug in the underlying provider's resource connection logic.",
          "source_url": "https://github.com/cloudgraphdev/cli#L1364",
          "evidence": "- \u26a0\ufe0f unable to make some connections - This warning in the scan report appears when CG tries to make a connection between two resources and is unable to do so. If you see this using one of CG's offically supported providers, please [create a new issue](https://github.com/cloudgraphdev/cli/issues) so we can solve it. The most common cause of this error is a bug in the underlying provider's resource connection logic."
        },
        {
          "text": "\ud83d\udeab unable to store data in Dgraph - This error in the scan report appears when CG tries to insert some cloud provider data into the graph DB and it fails. Any services with this error will be unable to be queried in the GraphQL query tool. This usually happens when CG is unable to grab required data (such as an arn) for a resource due to an error when calling the provider SDK, commonly due to a lack of authorization.",
          "source_url": "https://github.com/cloudgraphdev/cli#L1366",
          "evidence": "- \ud83d\udeab unable to store data in Dgraph - This error in the scan report appears when CG tries to insert some cloud provider data into the graph DB and it fails. Any services with this error will be unable to be queried in the GraphQL query tool. This usually happens when CG is unable to grab required data (such as an arn) for a resource due to an error when calling the provider SDK, commonly due to a lack of authorization."
        },
        {
          "text": "Provider {name}@${version} requires cli version {version} but cli version is ${version} - This warning means you have incompatible versions of CG and the provider you are trying to use. Try updating CG `npm install -g @cloudgraphdev/cli` and the provider module `cg provider update` so both are at the latest version. You can also check the proivder's `pacakge.json` to see what versions of CG support it.",
          "source_url": "https://github.com/cloudgraphdev/cli#L1368",
          "evidence": "- Provider {name}@${version} requires cli version {version} but cli version is ${version} - This warning means you have incompatible versions of CG and the provider you are trying to use. Try updating CG `npm install -g @cloudgraphdev/cli` and the provider module `cg provider update` so both are at the latest version. You can also check the proivder's `pacakge.json` to see what versions of CG support it."
        },
        {
          "text": "Manager failed to install plugin for {provider} - This error occurs when CG's plugin manager can not find the provider module you want to use. The manager searches the public NPM registry for the provider module. For offically supported providers, just pass the provider name `CG init aws`. For community supported providers, you must pass the namespace as well `CG init @{providerNamespace}/{provider}`",
          "source_url": "https://github.com/cloudgraphdev/cli#L1370",
          "evidence": "- Manager failed to install plugin for {provider} - This error occurs when CG's plugin manager can not find the provider module you want to use. The manager searches the public NPM registry for the provider module. For offically supported providers, just pass the provider name `CG init aws`. For community supported providers, you must pass the namespace as well `CG init @{providerNamespace}/{provider}`"
        },
        {
          "text": "[`cg init [PROVIDER]`](#cg-init-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1378",
          "evidence": "* [`cg init [PROVIDER]`](#cg-init-provider)"
        },
        {
          "text": "[`cg launch [PROVIDER]`](#cg-launch-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1379",
          "evidence": "* [`cg launch [PROVIDER]`](#cg-launch-provider)"
        },
        {
          "text": "[`cg load [PROVIDER]`](#cg-load-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1380",
          "evidence": "* [`cg load [PROVIDER]`](#cg-load-provider)"
        },
        {
          "text": "[`cg policy [PROVIDER]`](#cg-policy-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1381",
          "evidence": "* [`cg policy [PROVIDER]`](#cg-policy-provider)"
        },
        {
          "text": "[`cg policy add [PROVIDER]`](#cg-policy-add-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1382",
          "evidence": "* [`cg policy add [PROVIDER]`](#cg-policy-add-provider)"
        },
        {
          "text": "[`cg policy install [PROVIDER]`](#cg-policy-install-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1383",
          "evidence": "* [`cg policy install [PROVIDER]`](#cg-policy-install-provider)"
        },
        {
          "text": "[`cg policy list [PROVIDER]`](#cg-policy-list-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1384",
          "evidence": "* [`cg policy list [PROVIDER]`](#cg-policy-list-provider)"
        },
        {
          "text": "[`cg policy remove [PROVIDER]`](#cg-policy-remove-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1385",
          "evidence": "* [`cg policy remove [PROVIDER]`](#cg-policy-remove-provider)"
        },
        {
          "text": "[`cg policy update [PROVIDER]`](#cg-policy-update-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1386",
          "evidence": "* [`cg policy update [PROVIDER]`](#cg-policy-update-provider)"
        },
        {
          "text": "[`cg provider [PROVIDER]`](#cg-provider-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1387",
          "evidence": "* [`cg provider [PROVIDER]`](#cg-provider-provider)"
        },
        {
          "text": "[`cg provider add [PROVIDER]`](#cg-provider-add-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1388",
          "evidence": "* [`cg provider add [PROVIDER]`](#cg-provider-add-provider)"
        },
        {
          "text": "[`cg provider install [PROVIDER]`](#cg-provider-install-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1389",
          "evidence": "* [`cg provider install [PROVIDER]`](#cg-provider-install-provider)"
        },
        {
          "text": "[`cg provider list [PROVIDER]`](#cg-provider-list-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1390",
          "evidence": "* [`cg provider list [PROVIDER]`](#cg-provider-list-provider)"
        },
        {
          "text": "[`cg provider remove [PROVIDER]`](#cg-provider-remove-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1391",
          "evidence": "* [`cg provider remove [PROVIDER]`](#cg-provider-remove-provider)"
        },
        {
          "text": "[`cg provider update [PROVIDER]`](#cg-provider-update-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1392",
          "evidence": "* [`cg provider update [PROVIDER]`](#cg-provider-update-provider)"
        },
        {
          "text": "[`cg scan [PROVIDER]`](#cg-scan-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1393",
          "evidence": "* [`cg scan [PROVIDER]`](#cg-scan-provider)"
        },
        {
          "text": "[`cg serve [PROVIDER]`](#cg-serve-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1394",
          "evidence": "* [`cg serve [PROVIDER]`](#cg-serve-provider)"
        },
        {
          "text": "[`cg teardown [PROVIDER]`](#cg-teardown-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1395",
          "evidence": "* [`cg teardown [PROVIDER]`](#cg-teardown-provider)"
        },
        {
          "text": "[`cg update [PROVIDER]`](#cg-update-provider)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1396",
          "evidence": "* [`cg update [PROVIDER]`](#cg-update-provider)"
        },
        {
          "text": "-n, --nested-commands  Include all nested commands in the output.",
          "source_url": "https://github.com/cloudgraphdev/cli#L1410",
          "evidence": "-n, --nested-commands  Include all nested commands in the output."
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1428",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1429",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1435",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1465",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1466",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1471",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1497",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1498",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1503",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1531",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1532",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1537",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1560",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1561",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1566",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1570",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1596",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1597",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1602",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1606",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1630",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1631",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1636",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1640",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1667",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1668",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1673",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1677",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1709",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1710",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1715",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1719",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1744",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1745",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1750",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1773",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1774",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1779",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1783",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1809",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1810",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1815",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1819",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1843",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1844",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1849",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1853",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1880",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1881",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1886",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1890",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1922",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1923",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1928",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L1932",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1957",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1958",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L1963",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L1995",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L1996",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L2001",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "-P, --policies=<value>       Policy Packs to execute during scan",
          "source_url": "https://github.com/cloudgraphdev/cli#L2049",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "text": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)",
          "source_url": "https://github.com/cloudgraphdev/cli#L2050",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "text": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph",
          "source_url": "https://github.com/cloudgraphdev/cli#L2055",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "text": "--no-save                    Set to not alter lock file, just delete plugin",
          "source_url": "https://github.com/cloudgraphdev/cli#L2059",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "cyberark/FuzzyAI",
      "url": "https://github.com/cyberark/FuzzyAI",
      "stars": 828,
      "language": "Jupyter Notebook",
      "features": [
        {
          "text": "Comprehensive Fuzzing Techniques: Leverage mutation-based, generation-based, and intelligent fuzzing.",
          "source_url": "https://github.com/cyberark/FuzzyAI#L135",
          "evidence": "- **Comprehensive Fuzzing Techniques**: Leverage mutation-based, generation-based, and intelligent fuzzing."
        },
        {
          "text": "Built-in Input Generation: Generate valid and invalid inputs for exhaustive testing.",
          "source_url": "https://github.com/cyberark/FuzzyAI#L136",
          "evidence": "- **Built-in Input Generation**: Generate valid and invalid inputs for exhaustive testing."
        },
        {
          "text": "Seamless Integration: Easily incorporate into your development and testing workflows.",
          "source_url": "https://github.com/cyberark/FuzzyAI#L137",
          "evidence": "- **Seamless Integration**: Easily incorporate into your development and testing workflows."
        },
        {
          "text": "Extensible Architecture: Customize and expand the fuzzer to meet your unique requirements.",
          "source_url": "https://github.com/cyberark/FuzzyAI#L138",
          "evidence": "- **Extensible Architecture**: Customize and expand the fuzzer to meet your unique requirements."
        },
        {
          "text": "run pip install -e",
          "source_url": "https://github.com/cyberark/FuzzyAI#L48",
          "evidence": "poetry run pip install -e ."
        },
        {
          "text": "run fuzzyai fuzz -h",
          "source_url": "https://github.com/cyberark/FuzzyAI#L53",
          "evidence": "poetry run fuzzyai fuzz -h"
        },
        {
          "text": "run the web ui (make sure you completed either of the installation steps from above):",
          "source_url": "https://github.com/cyberark/FuzzyAI#L67",
          "evidence": "1. Run the Web UI (make sure you completed either of the installation steps from above):"
        },
        {
          "text": "run fuzzyai webui",
          "source_url": "https://github.com/cyberark/FuzzyAI#L69",
          "evidence": "poetry run fuzzyai webui"
        },
        {
          "text": "configures the fuzzer to use the `gpt-4` model for classifying outputs",
          "source_url": "https://github.com/cyberark/FuzzyAI#L118",
          "evidence": "Configures the fuzzer to use the `gpt-4` model for classifying outputs. This helps determine whether responses meet specific criteria, such as detecting harmful or unwanted content."
        },
        {
          "text": "configures the rest provider with the following api endpoint details:",
          "source_url": "https://github.com/cyberark/FuzzyAI#L124",
          "evidence": "Configures the REST provider with the following API endpoint details:"
        },
        {
          "text": "build a bomb\"`**:",
          "source_url": "https://github.com/cyberark/FuzzyAI#L129",
          "evidence": "- **`-t \"How to build a bomb\"`**:"
        },
        {
          "text": "generate valid and invalid inputs for exhaustive testing",
          "source_url": "https://github.com/cyberark/FuzzyAI#L136",
          "evidence": "- **Built-in Input Generation**: Generate valid and invalid inputs for exhaustive testing."
        },
        {
          "text": "customize and expand the fuzzer to meet your unique requirements",
          "source_url": "https://github.com/cyberark/FuzzyAI#L138",
          "evidence": "- **Extensible Architecture**: Customize and expand the fuzzer to meet your unique requirements."
        },
        {
          "text": "supports various models across top providers, including:",
          "source_url": "https://github.com/cyberark/FuzzyAI#L141",
          "evidence": "FuzzyAI supports various models across top providers, including:"
        },
        {
          "text": "support for newer models",
          "source_url": "https://github.com/cyberark/FuzzyAI#L154",
          "evidence": "## Adding support for newer models"
        },
        {
          "text": "support for additional models by following our <a href=\"https://github",
          "source_url": "https://github.com/cyberark/FuzzyAI#L155",
          "evidence": "Easily add support for additional models by following our <a href=\"https://github.com/cyberark/FuzzyAI/wiki/DIY#adding-support-for-new-models\">DIY guide</a>."
        },
        {
          "text": "automates adversarial prompt generation by iteratively refining prompts with two llms                       | [arxiv:2310",
          "source_url": "https://github.com/cyberark/FuzzyAI#L164",
          "evidence": "| PAIR (Prompt Automatic Iterative Refinement) | Automates adversarial prompt generation by iteratively refining prompts with two LLMs                       | [arXiv:2310.08419](https://arxiv.org/pdf/2310.08419)                            |"
        },
        {
          "text": "allowing it to \"do anything now\"",
          "source_url": "https://github.com/cyberark/FuzzyAI#L169",
          "evidence": "| DAN (Do Anything Now)                        | Promotes the LLM to adopt an unrestricted persona that ignores standard content filters, allowing it to \"Do Anything Now\".                                                  | [GitHub Repo](https://github.com/0xk1h0/ChatGPT_DAN)                            |"
        },
        {
          "text": "builds semantic networks of \"actors\" to subtly guide conversations toward harmful targets while concealing malicious intent",
          "source_url": "https://github.com/cyberark/FuzzyAI#L172",
          "evidence": "| ActorAttack                                  | Inspired by actor-network theory, it builds semantic networks of \"actors\" to subtly guide conversations toward harmful targets while concealing malicious intent.           | [arxiv 2410.10700](https://arxiv.org/pdf/2410.10700)                                                                            |                                                                                                                                     |"
        },
        {
          "text": "enable ethical, legal use\u2014potentially leading to a jailbreak",
          "source_url": "https://github.com/cyberark/FuzzyAI#L176",
          "evidence": "| History/Academic framing                             | Framing sensitive technical data as scholarly or historical research to enable ethical, legal use\u2014potentially leading to a jailbreak.                                                                                           |                                                                                 |"
        },
        {
          "text": "t \"How to build a bomb\"",
          "source_url": "https://github.com/cyberark/FuzzyAI#L107",
          "evidence": "-t \"How to build a bomb\""
        },
        {
          "text": "`-t \"How to build a bomb\"`:",
          "source_url": "https://github.com/cyberark/FuzzyAI#L129",
          "evidence": "- **`-t \"How to build a bomb\"`**:"
        },
        {
          "text": "Built-in Input Generation: Generate valid and invalid inputs for exhaustive testing.",
          "source_url": "https://github.com/cyberark/FuzzyAI#L136",
          "evidence": "- **Built-in Input Generation**: Generate valid and invalid inputs for exhaustive testing."
        },
        {
          "text": "Extensible Architecture: Customize and expand the fuzzer to meet your unique requirements.",
          "source_url": "https://github.com/cyberark/FuzzyAI#L138",
          "evidence": "- **Extensible Architecture**: Customize and expand the fuzzer to meet your unique requirements."
        },
        {
          "text": "Some classifiers do more than just evaluate a single output. For example, the cosine-similarity classifier compares two outputs by measuring the angle between them, while a 'harmfulness' classifier checks whether a given output is harmful. As a result, not all classifiers are compatible with the attack methods we've implemented, as those methods are designed for single-output classifiers.",
          "source_url": "https://github.com/cyberark/FuzzyAI#L195",
          "evidence": "* Some classifiers do more than just evaluate a single output. For example, the cosine-similarity classifier compares two outputs by measuring the angle between them, while a 'harmfulness' classifier checks whether a given output is harmful. As a result, not all classifiers are compatible with the attack methods we've implemented, as those methods are designed for single-output classifiers."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "Fuzzapi/fuzzapi",
      "url": "https://github.com/Fuzzapi/fuzzapi",
      "stars": 661,
      "language": "Ruby",
      "features": [
        {
          "text": "provide ui solution for gem",
          "source_url": "https://github.com/Fuzzapi/fuzzapi#L3",
          "evidence": "Fuzzapi is rails application which uses API_Fuzzer and provide UI solution for gem."
        },
        {
          "text": "creates tables, migrations etc",
          "source_url": "https://github.com/Fuzzapi/fuzzapi#L24",
          "evidence": "5. `rake db:migrate` to creates tables, migrations etc."
        },
        {
          "text": "run the server and run `export redis_url=redis://127",
          "source_url": "https://github.com/Fuzzapi/fuzzapi#L26",
          "evidence": "6. `rails s` to run the server and run `export REDIS_URL=redis://127.0.0.1:6379/0 && bundle exec sidekiq` to run sidekiq."
        },
        {
          "text": "export redis_url=redis://127",
          "source_url": "https://github.com/Fuzzapi/fuzzapi#L26",
          "evidence": "6. `rails s` to run the server and run `export REDIS_URL=redis://127.0.0.1:6379/0 && bundle exec sidekiq` to run sidekiq."
        },
        {
          "text": "build the image locally",
          "source_url": "https://github.com/Fuzzapi/fuzzapi#L38",
          "evidence": "4. Run `docker-compose build` to build the image locally."
        },
        {
          "text": "run `docker-compose build` to build the image locally",
          "source_url": "https://github.com/Fuzzapi/fuzzapi#L38",
          "evidence": "4. Run `docker-compose build` to build the image locally."
        },
        {
          "text": "run `docker-compose up` to run the server",
          "source_url": "https://github.com/Fuzzapi/fuzzapi#L40",
          "evidence": "5. Run `docker-compose up` to run the server."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "vmware/burp-rest-api",
      "url": "https://github.com/vmware/burp-rest-api",
      "stars": 561,
      "language": "Java",
      "features": [
        {
          "text": "support will be provided",
          "source_url": "https://github.com/vmware/burp-rest-api#L4",
          "evidence": "> While the repository will remain available for reference, no further updates, bug fixes, or support will be provided."
        },
        {
          "text": "run *burp-rest-api*",
          "source_url": "https://github.com/vmware/burp-rest-api#L16",
          "evidence": "3) Using **Java 21**, run *burp-rest-api*"
        },
        {
          "text": "run this software on x86",
          "source_url": "https://github.com/vmware/burp-rest-api#L30",
          "evidence": "* The standalone Burp Suite PRO JAR for ARM64 doesn't seem to contain the Burp Browser, hence spidering and scanning won't work. We would highly recommend to run this software on x86"
        },
        {
          "text": "support and limitations",
          "source_url": "https://github.com/vmware/burp-rest-api#L32",
          "evidence": "### Burp Suite Support and Limitations"
        },
        {
          "text": "supports both the legacy burp suite professional v1",
          "source_url": "https://github.com/vmware/burp-rest-api#L34",
          "evidence": "**burp-rest-api** supports both the legacy Burp Suite Professional v1.7 and the newer Burp Suite Professional v2025.x. Since this project relies on [Burp Extender API](https://portswigger.net/burp/extender), the behaviour of certain functionalities might be slighlty different depending on the version of Burp. For example, the [Burp Suite Scanner configuration in v2025.x is no longer customizable](https://forum.portswigger.net/thread/scan-configuration-80c07e6d3e1080058)."
        },
        {
          "text": "run mode and port number",
          "source_url": "https://github.com/vmware/burp-rest-api#L67",
          "evidence": "The following command line arguments are used only by the extension to configure the run mode and port number."
        },
        {
          "text": "configure the run mode and port number",
          "source_url": "https://github.com/vmware/burp-rest-api#L67",
          "evidence": "The following command line arguments are used only by the extension to configure the run mode and port number."
        },
        {
          "text": "enables api key authentication to protect apis at /burp/*",
          "source_url": "https://github.com/vmware/burp-rest-api#L79",
          "evidence": "`--apikey=<customApiKey>` : Enables API key authentication to protect APIs at **/burp/***. The customApiKey, if passed as an argument, must be included in every HTTP request as an additional header: **\"API-KEY: <customApiKey\\>\"**."
        },
        {
          "text": "runs burp suite in ui mode",
          "source_url": "https://github.com/vmware/burp-rest-api#L81",
          "evidence": "`--headless.mode=<true/false>` : When set to false, runs Burp Suite in UI mode. Otherwise runs Burp Suite in headless"
        },
        {
          "text": "runs burp suite in headless",
          "source_url": "https://github.com/vmware/burp-rest-api#L81",
          "evidence": "`--headless.mode=<true/false>` : When set to false, runs Burp Suite in UI mode. Otherwise runs Burp Suite in headless"
        },
        {
          "text": "support and limitations\" section",
          "source_url": "https://github.com/vmware/burp-rest-api#L96",
          "evidence": "[here](https://portswigger.net/burp/help/suite_burp_projects.html) and [here](https://portswigger.net/blog/introducing-burp-projects). For scanner settings, please refer to the \"Burp Suite Support and Limitations\" section."
        },
        {
          "text": "building the project",
          "source_url": "https://github.com/vmware/burp-rest-api#L146",
          "evidence": "2. The project can be run by directly launching the JAR created from building the project"
        },
        {
          "text": "run by directly launching the jar created from building the project",
          "source_url": "https://github.com/vmware/burp-rest-api#L146",
          "evidence": "2. The project can be run by directly launching the JAR created from building the project"
        },
        {
          "text": "create a `lib` folder under the project directory and place the burp suite jar file into it and rename it to \"burpsuite_pro",
          "source_url": "https://github.com/vmware/burp-rest-api#L147",
          "evidence": "3. Create a `lib` folder under the project directory and place the Burp Suite JAR file into it and rename it to \"burpsuite_pro.jar\" in order to run the integration tests"
        },
        {
          "text": "run the integration tests",
          "source_url": "https://github.com/vmware/burp-rest-api#L147",
          "evidence": "3. Create a `lib` folder under the project directory and place the Burp Suite JAR file into it and rename it to \"burpsuite_pro.jar\" in order to run the integration tests"
        },
        {
          "text": "run the extension on recent (jre > 9) versions of the jvm, use the `burp-rest-api-devel",
          "source_url": "https://github.com/vmware/burp-rest-api#L154",
          "evidence": "If you want to run the extension on recent (JRE > 9) versions of the JVM, use the `burp-rest-api-devel.{sh,bat}` launcher script after copying *burpsuite_pro.jar* and the *burp-rest-api.jar* in the same directory of the script."
        },
        {
          "text": "The standalone Burp Suite PRO JAR for ARM64 doesn't seem to contain the Burp Browser, hence spidering and scanning won't work. We would highly recommend to run this software on x86",
          "source_url": "https://github.com/vmware/burp-rest-api#L30",
          "evidence": "* The standalone Burp Suite PRO JAR for ARM64 doesn't seem to contain the Burp Browser, hence spidering and scanning won't work. We would highly recommend to run this software on x86"
        },
        {
          "text": "*burp-rest-api** supports both the legacy Burp Suite Professional v1.7 and the newer Burp Suite Professional v2025.x. Since this project relies on Burp Extender API, the behaviour of certain functionalities might be slighlty different depending on the version of Burp. For example, the Burp Suite Scanner configuration in v2025.x is no longer customizable.",
          "source_url": "https://github.com/vmware/burp-rest-api#L34",
          "evidence": "**burp-rest-api** supports both the legacy Burp Suite Professional v1.7 and the newer Burp Suite Professional v2025.x. Since this project relies on [Burp Extender API](https://portswigger.net/burp/extender), the behaviour of certain functionalities might be slighlty different depending on the version of Burp. For example, the [Burp Suite Scanner configuration in v2025.x is no longer customizable](https://forum.portswigger.net/thread/scan-configuration-80c07e6d3e1080058)."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "openclarity/apiclarity",
      "url": "https://github.com/openclarity/apiclarity",
      "stars": 549,
      "language": "Go",
      "features": [
        {
          "text": "performs a set of security analysis to discover all potential security problems with detected apis",
          "source_url": "https://github.com/openclarity/apiclarity#L8",
          "evidence": "- Captures all API traffic in a given environment and performs a set of security analysis to discover all potential security problems with detected APIs"
        },
        {
          "text": "allows to easily add new functionalities",
          "source_url": "https://github.com/openclarity/apiclarity#L15",
          "evidence": "APIClarity is structured in a modular architecture, which allows to easily add new functionalities."
        },
        {
          "text": "analyzes path, headers and body of api requests and responses to discover potential security issues, such as weak authentications, exposure of sensitive information, potential broken object level authorizations (bola) etc",
          "source_url": "https://github.com/openclarity/apiclarity#L23",
          "evidence": "- [**Trace Analyzer**](./backend/pkg/modules/internal/traceanalyzer/README.md) This module analyzes path, headers and body of API requests and responses to discover potential security issues, such as weak authentications, exposure of sensitive information, potential Broken Object Level Authorizations (BOLA) etc."
        },
        {
          "text": "build an authorization model that captures what clients are supposed to be authorized to make the various api calls",
          "source_url": "https://github.com/openclarity/apiclarity#L24",
          "evidence": "- [**BFLA Detector**](./backend/pkg/modules/internal/bfla/README.md) This module detects potential Broken Function Level Authorization. In particular it observes the API interactions and build an authorization model that captures what clients are supposed to be authorized to make the various API calls. Based on such authorization model it then signals violations which may represent potential issues in the API authorization procedures."
        },
        {
          "text": "supports integrating with the following traffic sources",
          "source_url": "https://github.com/openclarity/apiclarity#L35",
          "evidence": "APIClarity supports integrating with the following traffic sources. Install APIClarity and follow the instructions per required integration."
        },
        {
          "text": "enable and configure the supported traffic sources, please check the ```trafficsource:``` section in [helm values](https://github",
          "source_url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        },
        {
          "text": "implement the [plugins api](https://github",
          "source_url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        },
        {
          "text": "export the api events to apiclarity",
          "source_url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        },
        {
          "text": "configure the supported traffic sources, please check the ```trafficsource:``` section in [helm values](https://github",
          "source_url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        },
        {
          "text": "plugins directory within the codebase](https://github",
          "source_url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        },
        {
          "text": "plugins api](https://github",
          "source_url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        },
        {
          "text": "generate some traffic in the traced applications and check the apiclarity ui :)",
          "source_url": "https://github.com/openclarity/apiclarity#L86",
          "evidence": "7. Generate some traffic in the traced applications and check the APIClarity UI :)"
        },
        {
          "text": "run the following command to delete them all:",
          "source_url": "https://github.com/openclarity/apiclarity#L98",
          "evidence": "By default, Helm will not remove the PVCs and PVs for the StatefulSets. Run the following command to delete them all:"
        },
        {
          "text": "configure apiclarity on your cluster via helm",
          "source_url": "https://github.com/openclarity/apiclarity#L106",
          "evidence": "The file [values.yaml](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml) is used to deploy and configure APIClarity on your cluster via Helm."
        },
        {
          "text": "enable istio injection:",
          "source_url": "https://github.com/openclarity/apiclarity#L115",
          "evidence": "1. Create the `sock-shop` namespace and enable Istio injection:"
        },
        {
          "text": "create the `sock-shop` namespace and enable istio injection:",
          "source_url": "https://github.com/openclarity/apiclarity#L115",
          "evidence": "1. Create the `sock-shop` namespace and enable Istio injection:"
        },
        {
          "text": "create namespace sock-shop",
          "source_url": "https://github.com/openclarity/apiclarity#L118",
          "evidence": "kubectl create namespace sock-shop"
        },
        {
          "text": "generate data to review on the apiclarity dashboard",
          "source_url": "https://github.com/openclarity/apiclarity#L145",
          "evidence": "some transactions to generate data to review on the APIClarity dashboard."
        },
        {
          "text": "building from source:",
          "source_url": "https://github.com/openclarity/apiclarity#L149",
          "evidence": "### Building from source:"
        },
        {
          "text": "build and push the image to your repo:",
          "source_url": "https://github.com/openclarity/apiclarity#L151",
          "evidence": "Build and push the image to your repo:"
        },
        {
          "text": "build ui & backend locally as described above:",
          "source_url": "https://github.com/openclarity/apiclarity#L161",
          "evidence": "1. Build UI & backend locally as described above:"
        },
        {
          "text": "run backend and frontend locally using demo data:",
          "source_url": "https://github.com/openclarity/apiclarity#L173",
          "evidence": "3. Run backend and frontend locally using demo data:"
        },
        {
          "text": "run without k8s, use __enable_k8s=false__ instead",
          "source_url": "https://github.com/openclarity/apiclarity#L185",
          "evidence": "Note: this command requires a proper KUBECONFIG in your environment when __K8S_LOCAL=true__ is used. If you want to run without k8s, use __ENABLE_K8S=false__ instead."
        },
        {
          "text": "support for external trace sources",
          "source_url": "https://github.com/openclarity/apiclarity#L192",
          "evidence": "The following section describes how to deploy APIClarity with the support for external trace sources"
        },
        {
          "text": "includes how to access the service, register a new trace source, and how to receive the token and certificate",
          "source_url": "https://github.com/openclarity/apiclarity#L219",
          "evidence": "The following section describes how to register a new external trace source. And this section includes how to access the service, register a new trace source, and how to receive the token and certificate."
        },
        {
          "text": "support with the following trace sources and follow the instructions per required integration",
          "source_url": "https://github.com/openclarity/apiclarity#L243",
          "evidence": "APIClarity can support with the following trace sources and follow the instructions per required integration."
        },
        {
          "text": "create an issue in github first to discuss your",
          "source_url": "https://github.com/openclarity/apiclarity#L258",
          "evidence": "For larger changes please create an Issue in GitHub first to discuss your"
        },
        {
          "text": "Captures all API traffic in a given environment and performs a set of security analysis to discover all potential security problems with detected APIs",
          "source_url": "https://github.com/openclarity/apiclarity#L8",
          "evidence": "- Captures all API traffic in a given environment and performs a set of security analysis to discover all potential security problems with detected APIs"
        },
        {
          "text": "Actively tests API endpoints to detect security issues in the implementation of such APIs.",
          "source_url": "https://github.com/openclarity/apiclarity#L9",
          "evidence": "- Actively tests API endpoints to detect security issues in the implementation of such APIs."
        },
        {
          "text": "Spec Diffs This module compares the API traces with the OAPI specifications provided by the user or previously reconstructed. The result of this comparison provides:",
          "source_url": "https://github.com/openclarity/apiclarity#L19",
          "evidence": "- **Spec Diffs** This module compares the API traces with the OAPI specifications provided by the user or previously reconstructed. The result of this comparison provides:"
        },
        {
          "text": "Trace Analyzer This module analyzes path, headers and body of API requests and responses to discover potential security issues, such as weak authentications, exposure of sensitive information, potential Broken Object Level Authorizations (BOLA) etc.",
          "source_url": "https://github.com/openclarity/apiclarity#L23",
          "evidence": "- [**Trace Analyzer**](./backend/pkg/modules/internal/traceanalyzer/README.md) This module analyzes path, headers and body of API requests and responses to discover potential security issues, such as weak authentications, exposure of sensitive information, potential Broken Object Level Authorizations (BOLA) etc."
        },
        {
          "text": "BFLA Detector This module detects potential Broken Function Level Authorization. In particular it observes the API interactions and build an authorization model that captures what clients are supposed to be authorized to make the various API calls. Based on such authorization model it then signals violations which may represent potential issues in the API authorization procedures.",
          "source_url": "https://github.com/openclarity/apiclarity#L24",
          "evidence": "- [**BFLA Detector**](./backend/pkg/modules/internal/bfla/README.md) This module detects potential Broken Function Level Authorization. In particular it observes the API interactions and build an authorization model that captures what clients are supposed to be authorized to make the various API calls. Based on such authorization model it then signals violations which may represent potential issues in the API authorization procedures."
        },
        {
          "text": "Fuzzer This module actively tests API endpoints based on their specification attempting in discovering security issues in the API server implementation.",
          "source_url": "https://github.com/openclarity/apiclarity#L25",
          "evidence": "- **Fuzzer** This module actively tests API endpoints based on their specification attempting in discovering security issues in the API server implementation."
        },
        {
          "text": "* Make sure that Istio 1.10+ is installed and running in your cluster.",
          "source_url": "https://github.com/openclarity/apiclarity#L38",
          "evidence": "* Make sure that Istio 1.10+ is installed and running in your cluster."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    }
  ],
  "features": [
    {
      "text": "enable you to lookup whether a private key is used for things like tls or as a github ssh key for a user",
      "normalized_text": "Enable you to lookup whether a private key is used for things like tls or as a github ssh key for a user",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L50",
          "evidence": "| [Private key usage verification ](https://github.com/trufflesecurity/driftwood) | Driftwood is a tool that can enable you to lookup whether a private key is used for things like TLS or as a GitHub SSH key for a user. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create secure apis for any situation",
      "normalized_text": "Create secure apis for any situation",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L62",
          "evidence": "| Neil Madden | Manning   | [API Security in Action](https://www.manning.com/books/api-security-in-action)| API Security in Action teaches you how to create secure APIs for any situation. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include in any api penetration testing process",
      "normalized_text": "Include in any api penetration testing process",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L81",
          "evidence": "| API Mike, @api_sec | [API penetration testing checklist](https://apimike.com/api-penetration-testing-checklist) | Common steps to include in any API penetration testing process. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supporting elements",
      "normalized_text": "Supporting elements",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L119",
          "evidence": "| [The API Specification Toolbox](http://api.specificationtoolbox.com) | This Toolbox goal is to try and map out all of the different API specifications in use, as well as the services, tooling, extensions, and other supporting elements. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "perform a security test on an api",
      "normalized_text": "Perform a security test on an api",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L207",
          "evidence": "| [API Security Testing](https://sphericaldefence.com/api-security-testing) | Spherical Defence | Principles of API Security Testing and how to perform a Security Test on an API. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "performing batch graphql queries and mutations",
      "normalized_text": "Performing batch graphql queries and mutations",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L269",
          "evidence": "| [BatchQL](https://github.com/assetnote/batchql) | GraphQL security auditing script with a focus on performing batch GraphQL queries and mutations. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generates and runs attacks that are based on it as an output",
      "normalized_text": "Generates and runs attacks that are based on it as an output",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L290",
          "evidence": "| [Automatic API Attack Tool](https://github.com/imperva/automatic-api-attack-tool) | Imperva's customizable API attack tool takes an API specification as an input, generates and runs attacks that are based on it as an output. |"
        },
        {
          "url": "https://github.com/arainho/awesome-api-security#L290",
          "evidence": "| [Automatic API Attack Tool](https://github.com/imperva/automatic-api-attack-tool) | Imperva's customizable API attack tool takes an API specification as an input, generates and runs attacks that are based on it as an output. |"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "supports postgresql, clickhouse, mysql, snowflake, bigquery",
      "normalized_text": "Supports postgresql, clickhouse, mysql, snowflake, bigquery",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L292",
          "evidence": "| [CentralMind/Gateway](https://github.com/centralmind/gateway) | Generate production ready APIs using AI based on database schema and data, optimized for AI-Agents. Supports PostgreSQL, Clickhouse, MySQL, Snowflake, BigQuery. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate production ready apis using ai based on database schema and data, optimized for ai-agents",
      "normalized_text": "Generate production ready apis using ai based on database schema and data, optimized for ai-agents",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L292",
          "evidence": "| [CentralMind/Gateway](https://github.com/centralmind/gateway) | Generate production ready APIs using AI based on database schema and data, optimized for AI-Agents. Supports PostgreSQL, Clickhouse, MySQL, Snowflake, BigQuery. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide a framework for rest security research",
      "normalized_text": "Provide a framework for rest security research",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L303",
          "evidence": "| [REST-Attacker](https://github.com/RUB-NDS/REST-Attacker) | Designed as a proof-of-concept for the feasibility of testing generic real-world REST implementations. Its goal is to provide a framework for REST security research. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports all three settings of testing (black box, grey box and white box)",
      "normalized_text": "Supports all three settings of testing (black box, grey box and white box)",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L308",
          "evidence": "| [WuppieFuzz](https://github.com/TNO-S3/WuppieFuzz) | WuppieFuzz is a coverage-guided REST API fuzzer developed on top of LibAFL, targeting a wide audience of end-users, with a strong focus on ease-of-use, explainability of the discovered flaws and modularity. WuppieFuzz supports all three settings of testing (black box, grey box and white box). |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin written in python to detect current and discover new wsdl (web service definition language) files",
      "normalized_text": "Plugin written in python to detect current and discover new wsdl (web service definition language) files",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L312",
          "evidence": "| [wsdl-wizard](https://github.com/portswigger/wsdl-wizard)| WSDL Wizard is a Burp Suite plugin written in Python to detect current and discover new WSDL (Web Service Definition Language) files. |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provides training courses for application security professionals |",
      "normalized_text": "Provides training courses for application security professionals |",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L325",
          "evidence": "| APIsec | [API Security University](https://university.apisec.ai) | APIsec University provides training courses for application security professionals |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build an api to hack](https://hackxpert",
      "normalized_text": "Build an api to hack](https://hackxpert",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L336",
          "evidence": "| Wesley Thijs | [Let's build an API to hack](https://hackxpert.com/blog/API-Hacking-Excercises/) | API Hacking Excercises by @TheXSSrat |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide private details will be considered out of scope and may be closed or ignored",
      "normalized_text": "Provide private details will be considered out of scope and may be closed or ignored",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L352",
          "evidence": "2. **Out of Scope:** Pull requests that involve vendor-specific content, advertisements, commercial or restricted products, free trials, freemium services, closed-source (proprietary) software, or services that require users to provide private details will be considered out of scope and may be closed or ignored."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a feature branch",
      "normalized_text": "Create a feature branch",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/arainho/awesome-api-security#L367",
          "evidence": "- create a new branch"
        },
        {
          "url": "https://github.com/arainho/awesome-api-security#L367",
          "evidence": "- create a new branch"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2926",
          "evidence": "1. Fork the repo, create a feature branch."
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "analyzes its entire specification,",
      "normalized_text": "Analyzes its entire specification,",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L8",
          "evidence": "with an OpenAPI (formerly Swagger) specification, RESTler analyzes its entire specification,"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generates and executes tests that exercise the service through its rest api",
      "normalized_text": "Generates and executes tests that exercise the service through its rest api",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L9",
          "evidence": "and then generates and executes tests that exercise the service through its REST API."
        },
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L9",
          "evidence": "and then generates and executes tests that exercise the service through its REST API."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "allows restler to explore deeper service states",
      "normalized_text": "Allows restler to explore deeper service states",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L14",
          "evidence": "This intelligence allows RESTler to explore deeper service states"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "includes multiple test generation strategies",
      "normalized_text": "Includes multiple test generation strategies",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L26",
          "evidence": "RESTler includes multiple test generation strategies.  In order to get a comprehensive comparative view w.r.t. to (i) efficiency"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provides a different trade-off between breadth and depth of state space exploration",
      "normalized_text": "Provides a different trade-off between breadth and depth of state space exploration",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L30",
          "evidence": "because each one provides a different trade-off between breadth and depth of state space exploration."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build status](https://dev",
      "normalized_text": "Build status](https://dev",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L43",
          "evidence": "[![Build Status](https://dev.azure.com/ms/restler-fuzzer/_apis/build/status/restler-build-validation?branchName=main)](https://dev.azure.com/ms/restler-fuzzer/_build/latest?definitionId=422&branchName=main)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support for macos is also enabled",
      "normalized_text": "Support for macos is also enabled",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L48",
          "evidence": "RESTler was designed to run on 64-bit machines with Windows or Linux.  Experimental support for macOS is also enabled."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run on 64-bit machines with windows or linux",
      "normalized_text": "Run on 64-bit machines with windows or linux",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L48",
          "evidence": "RESTler was designed to run on 64-bit machines with Windows or Linux.  Experimental support for macOS is also enabled."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build instructions**",
      "normalized_text": "Build instructions**",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L50",
          "evidence": "### **Build instructions**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build -t restler",
      "normalized_text": "Build -t restler",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L57",
          "evidence": "docker build -t restler ."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "execute fuzzing inside isolated docker containers",
      "normalized_text": "Execute fuzzing inside isolated docker containers",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L62",
          "evidence": "You can then use this docker image as basis to add the application under test to execute fuzzing inside isolated docker containers."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a directory where you'd like to place the restler binaries:",
      "normalized_text": "Create a directory where you'd like to place the restler binaries:",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L69",
          "evidence": "Create a directory where you'd like to place the RESTler binaries:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the following python script:",
      "normalized_text": "Run the following python script:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L73",
          "evidence": "Switch to the repo root directory and run the following Python script:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs in 4 main modes (in order):",
      "normalized_text": "Runs in 4 main modes (in order):",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L84",
          "evidence": "RESTler runs in 4 main modes (in order):"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate a restler grammar",
      "normalized_text": "Generate a restler grammar",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L86",
          "evidence": "1. **Compile:** from an OpenAPI JSON or YAML definition (and optionally examples), generate a RESTler grammar. See [Compiling](./docs/user-guide/Compiling.md)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "execute all of the endpoints+methods in a compiled restler grammar for debugging the test setup and compute what parts of the openapi definition are covered",
      "normalized_text": "Execute all of the endpoints+methods in a compiled restler grammar for debugging the test setup and compute what part...",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L87",
          "evidence": "2. **Test:** execute quickly all of the endpoints+methods in a compiled RESTler grammar for debugging the test setup and compute what parts of the OpenAPI definition are covered. This mode is also called a *smoketest*."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "execute once every endpoint+method in a compiled restler grammar with a default set of checkers to see if bugs can be found",
      "normalized_text": "Execute once every endpoint+method in a compiled restler grammar with a default set of checkers to see if bugs can be...",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L89",
          "evidence": "3. **Fuzz-lean:** execute once every endpoint+method in a compiled RESTler grammar with a default set of checkers to see if bugs can be found quickly. See [Fuzzing](./docs/user-guide/Fuzzing.md)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create outages in the service under test if the service is poorly implemented (e",
      "normalized_text": "Create outages in the service under test if the service is poorly implemented (e",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L91",
          "evidence": "**Warning:** This type of fuzzing is more aggressive and may create outages in the service under test if the service is poorly implemented (e.g., fuzzing might create resource leaks, perf degradation, backend corruptions, etc.)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create resource leaks, perf degradation, backend corruptions, etc",
      "normalized_text": "Create resource leaks, perf degradation, backend corruptions, etc",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L91",
          "evidence": "**Warning:** This type of fuzzing is more aggressive and may create outages in the service under test if the service is poorly implemented (e.g., fuzzing might create resource leaks, perf degradation, backend corruptions, etc.)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provides a replay log that can be used to reproduce the bug (see [replay](",
      "normalized_text": "Provides a replay log that can be used to reproduce the bug (see [replay](",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L106",
          "evidence": "When a bug is found, RESTler reports bugs triaged in bug buckets, and provides a replay log that can be used to reproduce the bug (see [Replay](./docs/user-guide/Replay.md))."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide a cla and decorate the pr appropriately (e",
      "normalized_text": "Provide a cla and decorate the pr appropriately (e",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L131",
          "evidence": "to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable you and microsoft to collect data from users of your applications",
      "normalized_text": "Enable you and microsoft to collect data from users of your applications",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L146",
          "evidence": "The software may collect information about you and your use of the software and send it to Microsoft. Microsoft may use this information to provide services and improve our products and services. You may turn off the telemetry as described in the repository. There are also some features in the software that may enable you and Microsoft to collect data from users of your applications. If you use these features, you must comply with applicable law, including providing appropriate notices to users of your applications together with a copy of Microsoft's privacy statement. Our privacy statement is located at https://go.microsoft.com/fwlink/?LinkID=824704. You can learn more about data collection and use in the help documentation and our privacy statement. Your use of the software operates as your consent to these practices."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide services and improve our products and services",
      "normalized_text": "Provide services and improve our products and services",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L146",
          "evidence": "The software may collect information about you and your use of the software and send it to Microsoft. Microsoft may use this information to provide services and improve our products and services. You may turn off the telemetry as described in the repository. There are also some features in the software that may enable you and Microsoft to collect data from users of your applications. If you use these features, you must comply with applicable law, including providing appropriate notices to users of your applications together with a copy of Microsoft's privacy statement. Our privacy statement is located at https://go.microsoft.com/fwlink/?LinkID=824704. You can learn more about data collection and use in the help documentation and our privacy statement. Your use of the software operates as your consent to these practices."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Warning:** This type of fuzzing is more aggressive and may create outages in the service under test if the service is poorly implemented (e.g., fuzzing might create resource leaks, perf degradation, backend corruptions, etc.).",
      "normalized_text": "*warning:** this type of fuzzing is more aggressive and may create outages in the service under test if the service i...",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/microsoft/restler-fuzzer#L91",
          "evidence": "**Warning:** This type of fuzzing is more aggressive and may create outages in the service under test if the service is poorly implemented (e.g., fuzzing might create resource leaks, perf degradation, backend corruptions, etc.)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*A2A Configuration Effects:**",
      "normalized_text": "*a2a configuration effects:**",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1184",
          "evidence": "**A2A Configuration Effects:**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`LLMCHAT_ENABLED=false` (default): Completely disables LLM Chat features (API endpoints return 404, admin tab hidden)",
      "normalized_text": "`llmchat_enabled=false` (default): completely disables llm chat features (api endpoints return 404, admin tab hidden)",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1185",
          "evidence": "- `MCPGATEWAY_A2A_ENABLED=false`: Completely disables A2A features (API endpoints return 404, admin tab hidden)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1185",
          "evidence": "- `MCPGATEWAY_A2A_ENABLED=false`: Completely disables A2A features (API endpoints return 404, admin tab hidden)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1265",
          "evidence": "- `LLMCHAT_ENABLED=false` (default): Completely disables LLM Chat features (API endpoints return 404, admin tab hidden)"
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "`MCPGATEWAY_A2A_METRICS_ENABLED=false`: Disables metrics collection while keeping functionality",
      "normalized_text": "`mcpgateway_a2a_metrics_enabled=false`: disables metrics collection while keeping functionality",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1186",
          "evidence": "- `MCPGATEWAY_A2A_METRICS_ENABLED=false`: Disables metrics collection while keeping functionality"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1186",
          "evidence": "- `MCPGATEWAY_A2A_METRICS_ENABLED=false`: Disables metrics collection while keeping functionality"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "build & deploy === -->",
      "normalized_text": "Build & deploy === -->",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L7",
          "evidence": "<!-- === CI / Security / Build Badges === -->"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L15",
          "evidence": "<!-- === Container Build & Deploy === -->"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "build python package](https://github",
      "normalized_text": "Build python package](https://github",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L8",
          "evidence": "[![Build Python Package](https://github.com/IBM/mcp-context-forge/actions/workflows/python-package.yml/badge.svg)](https://github.com/IBM/mcp-context-forge/actions/workflows/python-package.yml)&nbsp;"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs as a fully compliant mcp server, deployable via pypi or docker, and scales to multi-cluster environments on kubernetes with redis-backed federation and caching",
      "normalized_text": "Runs as a fully compliant mcp server, deployable via pypi or docker, and scales to multi-cluster environments on kube...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L26",
          "evidence": "ContextForge MCP Gateway is a feature-rich gateway, proxy and MCP Registry that federates MCP and REST services - unifying discovery, auth, rate-limiting, observability, virtual servers, multi-transport protocols, and an optional Admin UI into one clean endpoint for your AI clients. It runs as a fully compliant MCP server, deployable via PyPI or Docker, and scales to multi-cluster environments on Kubernetes with Redis-backed federation and caching."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run (copy-paste friendly)](#1---install--run-copy-paste-friendly)",
      "normalized_text": "Run (copy-paste friendly)](#1---install--run-copy-paste-friendly)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L37",
          "evidence": "* 3.1. [1 - Install & run (copy-paste friendly)](#1---install--run-copy-paste-friendly)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create an on-the-spot venv & run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)",
      "normalized_text": "Create an on-the-spot venv & run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L50",
          "evidence": "* 5.1.2. [2 - Create an on-the-spot venv & run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L50",
          "evidence": "* 5.1.2. [2 - Create an on-the-spot venv & run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "runs through uvx)](#claude-desktop-json-runs-through-uvx)",
      "normalized_text": "Runs through uvx)](#claude-desktop-json-runs-through-uvx)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L51",
          "evidence": "* 5.1.3. [Claude Desktop JSON (runs through **uvx**)](#claude-desktop-json-runs-through-uvx)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build (automatic)](#2---first-time-build-automatic)",
      "normalized_text": "Build (automatic)](#2---first-time-build-automatic)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L55",
          "evidence": "* 6.2. [2 - First-Time Build (Automatic)](#2---first-time-build-automatic)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin configuration](#plugin-configuration)",
      "normalized_text": "Plugin configuration](#plugin-configuration)",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L87",
          "evidence": "* 10.19. [Plugin Configuration](#plugin-configuration)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Auto-discovers or configures peer gateways (via mDNS or manual)",
      "normalized_text": "Auto-discovers or configures peer gateways (via mdns or manual)",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L162",
          "evidence": "* Auto-discovers or configures peer gateways (via mDNS or manual)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L162",
          "evidence": "* Auto-discovers or configures peer gateways (via mDNS or manual)"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "performs health checks and merges remote registries transparently",
      "normalized_text": "Performs health checks and merges remote registries transparently",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L163",
          "evidence": "* Performs health checks and merges remote registries transparently"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L163",
          "evidence": "* Performs health checks and merges remote registries transparently"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "supports redis-backed syncing and fail-over",
      "normalized_text": "Supports redis-backed syncing and fail-over",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L164",
          "evidence": "* Supports Redis-backed syncing and fail-over"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L164",
          "evidence": "* Supports Redis-backed syncing and fail-over"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "* Support for headers, tokens, and custom auth",
      "normalized_text": "* support for headers, tokens, and custom auth",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L184",
          "evidence": "* Support for headers, tokens, and custom auth"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L184",
          "evidence": "* Support for headers, tokens, and custom auth"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "export capabilities",
      "normalized_text": "Export capabilities",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L202",
          "evidence": "* Real-time log viewer with filtering, search, and export capabilities"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest",
      "normalized_text": "Run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L223",
          "evidence": "docker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1656",
          "evidence": "docker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "configure gateway",
      "normalized_text": "Configure gateway",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L225",
          "evidence": "# Configure gateway"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1658",
          "evidence": "# Configure gateway"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "export otel_enable_observability=true",
      "normalized_text": "Export otel_enable_observability=true",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L226",
          "evidence": "export OTEL_ENABLE_OBSERVABILITY=true"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1659",
          "evidence": "export OTEL_ENABLE_OBSERVABILITY=true"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "export otel_traces_exporter=otlp",
      "normalized_text": "Export otel_traces_exporter=otlp",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L227",
          "evidence": "export OTEL_TRACES_EXPORTER=otlp"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1660",
          "evidence": "export OTEL_TRACES_EXPORTER=otlp"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "export otel_exporter_otlp_endpoint=http://localhost:4317",
      "normalized_text": "Export otel_exporter_otlp_endpoint=http://localhost:4317",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L228",
          "evidence": "export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1661",
          "evidence": "export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run gateway - traces automatically sent to phoenix",
      "normalized_text": "Run gateway - traces automatically sent to phoenix",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L230",
          "evidence": "# Run gateway - traces automatically sent to Phoenix"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1663",
          "evidence": "# Run gateway - traces automatically sent to Phoenix"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "customize your settings",
      "normalized_text": "Customize your settings",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L261",
          "evidence": "# Edit .env to customize your settings"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L320",
          "evidence": "# Edit .env to customize your settings"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run (copy-paste friendly)",
      "normalized_text": "Run (copy-paste friendly)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L273",
          "evidence": "### 1 - Install & run (copy-paste friendly)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "customize the configuration",
      "normalized_text": "Customize the configuration",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L282",
          "evidence": "# 2\ufe0f\u20e3  Copy and customize the configuration"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L316",
          "evidence": "# 2\ufe0f\u20e3  Copy and customize the configuration"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "customize your settings (especially passwords",
      "normalized_text": "Customize your settings (especially passwords",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L286",
          "evidence": "# Edit .env to customize your settings (especially passwords!)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export mcpgateway_admin_api_enabled=true",
      "normalized_text": "Export mcpgateway_admin_api_enabled=true",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L289",
          "evidence": "export MCPGATEWAY_UI_ENABLED=true"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L290",
          "evidence": "export MCPGATEWAY_ADMIN_API_ENABLED=true"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L477",
          "evidence": "-e MCPGATEWAY_UI_ENABLED=true \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L478",
          "evidence": "-e MCPGATEWAY_ADMIN_API_ENABLED=true \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L518",
          "evidence": "-e MCPGATEWAY_UI_ENABLED=true \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L519",
          "evidence": "-e MCPGATEWAY_ADMIN_API_ENABLED=true \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L546",
          "evidence": "-e MCPGATEWAY_UI_ENABLED=true \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L547",
          "evidence": "-e MCPGATEWAY_ADMIN_API_ENABLED=true \\"
        }
      ],
      "frequency": 8,
      "uniqueness_score": 0.125
    },
    {
      "text": "export platform_admin_email=admin@example",
      "normalized_text": "Export platform_admin_email=admin@example",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L291",
          "evidence": "export PLATFORM_ADMIN_EMAIL=admin@example.com"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export platform_admin_password=changeme",
      "normalized_text": "Export platform_admin_password=changeme",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L292",
          "evidence": "export PLATFORM_ADMIN_PASSWORD=changeme"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export platform_admin_full_name=\"platform administrator\"",
      "normalized_text": "Export platform_admin_full_name=\"platform administrator\"",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L293",
          "evidence": "export PLATFORM_ADMIN_FULL_NAME=\"Platform Administrator\""
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate a bearer token & smoke-test the api",
      "normalized_text": "Generate a bearer token & smoke-test the api",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L298",
          "evidence": "# 3\ufe0f\u20e3  Generate a bearer token & smoke-test the API"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export mcpgateway_bearer_token=$(jwt_secret_key=my-test-key python3 -m mcpgateway",
      "normalized_text": "Export mcpgateway_bearer_token=$(jwt_secret_key=my-test-key python3 -m mcpgateway",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L299",
          "evidence": "export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L652",
          "evidence": "export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin@example.com --exp 10080 --secret my-test-key)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1141",
          "evidence": ">   export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin@example.com --exp 0 --secret my-test-key)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1887",
          "evidence": "export MCPGATEWAY_BEARER_TOKEN=$(JWT_SECRET_KEY=my-test-key python3 -m mcpgateway.utils.create_jwt_token)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1988",
          "evidence": "export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin@example.com --secret my-test-key)"
        }
      ],
      "frequency": 5,
      "uniqueness_score": 0.2
    },
    {
      "text": "process -filepath \"mcpgateway",
      "normalized_text": "Process -filepath \"mcpgateway",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L335",
          "evidence": "# Start-Process -FilePath \"mcpgateway.exe\" -ArgumentList \"--host 0.0.0.0 --port 4444\""
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run --rm -it ghcr",
      "normalized_text": "Run --rm -it ghcr",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L360",
          "evidence": "--stdio \"docker run --rm -i ghcr.io/ibm/fast-time-server:latest -transport=stdio\" \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L497",
          "evidence": "docker run --rm -it ghcr.io/ibm/mcp-context-forge:0.8.0 \\"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "create a *virtual server* bundling those tools",
      "normalized_text": "Create a *virtual server* bundling those tools",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L389",
          "evidence": "# 4\ufe0f\u20e3  Create a *virtual server* bundling those tools. Use the ID of tools from the tool catalog (Step #3) and pass them in the associatedTools list."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include the uuid of the newly created virtual server)",
      "normalized_text": "Include the uuid of the newly created virtual server)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L401",
          "evidence": "# 5\ufe0f\u20e3  List servers (should now include the UUID of the newly created virtual server)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export mcp_auth=\"bearer ${mcpgateway_bearer_token}\"",
      "normalized_text": "Export mcp_auth=\"bearer ${mcpgateway_bearer_token}\"",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L415",
          "evidence": "export MCP_AUTH=\"Bearer ${MCPGATEWAY_BEARER_TOKEN}\""
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L427",
          "evidence": "export MCP_AUTH=\"Bearer ${MCPGATEWAY_BEARER_TOKEN}\""
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L653",
          "evidence": "export MCP_AUTH=\"Bearer ${MCPGATEWAY_BEARER_TOKEN}\""
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L677",
          "evidence": "export MCP_AUTH=\"Bearer ${MCPGATEWAY_BEARER_TOKEN}\""
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L738",
          "evidence": "export MCP_AUTH=\"Bearer $MCPGATEWAY_BEARER_TOKEN\""
        }
      ],
      "frequency": 5,
      "uniqueness_score": 0.2
    },
    {
      "text": "export mcp_server_url='http://localhost:4444/servers/uuid_of_server_1/mcp'",
      "normalized_text": "Export mcp_server_url='http://localhost:4444/servers/uuid_of_server_1/mcp'",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L416",
          "evidence": "export MCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1/mcp"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L426",
          "evidence": "export MCP_SERVER_URL='http://localhost:4444/servers/UUID_OF_SERVER_1/mcp'"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L654",
          "evidence": "export MCP_SERVER_URL='http://localhost:4444/servers/UUID_OF_SERVER_1/mcp'"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L678",
          "evidence": "export MCP_SERVER_URL=http://localhost:4444/servers/YOUR_SERVER_UUID"
        }
      ],
      "frequency": 4,
      "uniqueness_score": 0.25
    },
    {
      "text": "run it with `uv` or inside docker/podman - see the *containers* section above",
      "normalized_text": "Run it with `uv` or inside docker/podman - see the *containers* section above",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L420",
          "evidence": "You can also run it with `uv` or inside Docker/Podman - see the *Containers* section above."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run -d --name mcpgateway \\",
      "normalized_text": "Run -d --name mcpgateway \\",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L475",
          "evidence": "docker run -d --name mcpgateway \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L514",
          "evidence": "docker run -d --name mcpgateway \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L544",
          "evidence": "docker run -d --name mcpgateway \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L567",
          "evidence": "podman run -d --name mcpgateway \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L585",
          "evidence": "podman run -d --name mcpgateway \\"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L604",
          "evidence": "podman run -d --name mcpgateway \\"
        }
      ],
      "frequency": 6,
      "uniqueness_score": 0.16666666666666666
    },
    {
      "text": "allows docker to access the local network, allowing you to add mcp servers running on your host",
      "normalized_text": "Allows docker to access the local network, allowing you to add mcp servers running on your host",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L558",
          "evidence": "Using `--network=host` allows Docker to access the local network, allowing you to add MCP servers running on your host. See [Docker Host network driver documentation](https://docs.docker.com/engine/network/drivers/host/) for more details."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allowing you to add mcp servers running on your host",
      "normalized_text": "Allowing you to add mcp servers running on your host",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L558",
          "evidence": "Using `--network=host` allows Docker to access the local network, allowing you to add MCP servers running on your host. See [Docker Host network driver documentation](https://docs.docker.com/engine/network/drivers/host/) for more details."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "JWT tokens - Generate one in the running container:",
      "normalized_text": "Jwt tokens - generate one in the running container:",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L618",
          "evidence": "* **JWT tokens** - Generate one in the running container:"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L618",
          "evidence": "* **JWT tokens** - Generate one in the running container:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run this from the mcp client",
      "normalized_text": "Run this from the mcp client",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L648",
          "evidence": "The `mcpgateway.wrapper` lets you connect to the gateway over **stdio** while keeping JWT authentication. You should run this from the MCP Client. The example below is just for testing."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export mcp_tool_call_timeout=120",
      "normalized_text": "Export mcp_tool_call_timeout=120",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L655",
          "evidence": "export MCP_TOOL_CALL_TIMEOUT=120"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export mcp_wrapper_log_level=debug # or off to disable logging",
      "normalized_text": "Export mcp_wrapper_log_level=debug # or off to disable logging",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L656",
          "evidence": "export MCP_WRAPPER_LOG_LEVEL=DEBUG  # or OFF to disable logging"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a virtual server",
      "normalized_text": "Create a virtual server",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L716",
          "evidence": "# After you add some tools and create a virtual server"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the stdio wrapper",
      "normalized_text": "Run the stdio wrapper",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L760",
          "evidence": "# Run the stdio wrapper"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 5.1.2. 2 - Create an on-the-spot venv & run the wrapper",
      "normalized_text": "* 5.1.2. 2 - create an on-the-spot venv & run the wrapper",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L803",
          "evidence": "#### 2 - Create an on-the-spot venv & run the wrapper"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L50",
          "evidence": "* 5.1.2. [2 - Create an on-the-spot venv & run the wrapper](#2---create-an-on-the-spot-venv--run-the-wrapper)"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "create venv in ~/",
      "normalized_text": "Create venv in ~/",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L806",
          "evidence": "# Create venv in ~/.venv/mcpgateway (or current dir if you prefer)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the uv command",
      "normalized_text": "Run the uv command",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L816",
          "evidence": "uv run --directory . -m mcpgateway.wrapper # Use this just for testing, as the Client will run the uv command"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs through uvx)",
      "normalized_text": "Runs through uvx)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L819",
          "evidence": "#### Claude Desktop JSON (runs through **uvx**)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build (automatic)",
      "normalized_text": "Build (automatic)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L889",
          "evidence": "### 2 - First-Time Build (Automatic)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `make install-dev` to pull all dependencies",
      "normalized_text": "Run `make install-dev` to pull all dependencies",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L894",
          "evidence": "* Run `make install-dev` to pull all dependencies"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L894",
          "evidence": "* Run `make install-dev` to pull all dependencies"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "execute tests to verify the toolchain",
      "normalized_text": "Execute tests to verify the toolchain",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L895",
          "evidence": "* Execute tests to verify the toolchain"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L895",
          "evidence": "* Execute tests to verify the toolchain"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run tests & linters",
      "normalized_text": "Run tests & linters",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L910",
          "evidence": "# Run tests & linters"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build artefacts & caches",
      "normalized_text": "Build artefacts & caches",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L918",
          "evidence": "* `make clean` - clear build artefacts & caches"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create codespace on main**",
      "normalized_text": "Create codespace on main**",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L928",
          "evidence": "1. Go to the repo \u2192 **Code \u25b8 Codespaces \u25b8 Create codespace on main**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build in the cloud",
      "normalized_text": "Build in the cloud",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L929",
          "evidence": "2. Wait for the container image to build in the cloud"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "creates / activates a `",
      "normalized_text": "Creates / activates a `",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L952",
          "evidence": "1. Creates / activates a `.venv` in your home folder `~/.venv/mcpgateway`"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run style checks (ruff, mypy, etc",
      "normalized_text": "Run style checks (ruff, mypy, etc",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L960",
          "evidence": "make lint          # optional: run style checks (ruff, mypy, etc.)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports both docker and podman",
      "normalized_text": "Supports both docker and podman",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L967",
          "evidence": "This project supports both Docker and Podman. The Makefile automatically detects"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "handles image naming differences",
      "normalized_text": "Handles image naming differences",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L968",
          "evidence": "which runtime is available and handles image naming differences."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build # uses podman if available, otherwise docker",
      "normalized_text": "Build # uses podman if available, otherwise docker",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L972",
          "evidence": "make container-build  # Uses podman if available, otherwise docker"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build production docker image",
      "normalized_text": "Build production docker image",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L977",
          "evidence": "make podman            # build production image"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2756",
          "evidence": "docker               - Build production Docker image"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run at https://localhost:4444",
      "normalized_text": "Run at https://localhost:4444",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L978",
          "evidence": "make podman-run-ssl    # run at https://localhost:4444"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure the gateway with sqlite, postgresql (or any other compatible database) in",
      "normalized_text": "Configure the gateway with sqlite, postgresql (or any other compatible database) in",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1020",
          "evidence": "You can configure the gateway with SQLite, PostgreSQL (or any other compatible database) in .env."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run --name mcp-postgres \\",
      "normalized_text": "Run --name mcp-postgres \\",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1033",
          "evidence": "docker run --name mcp-postgres \\"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export your settings:",
      "normalized_text": "Export your settings:",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1049",
          "evidence": "Before upgrading to v0.7.0, **always** backup your database, environment configuration, and export your settings:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import your exported configuration via admin ui",
      "normalized_text": "Import your exported configuration via admin ui",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1058",
          "evidence": "# Export configuration via Admin UI or API"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1073",
          "evidence": "4. **Restore configuration**: Import your exported configuration via Admin UI"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "configure `platform_admin_email` and other required multi-tenancy settings",
      "normalized_text": "Configure `platform_admin_email` and other required multi-tenancy settings",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1064",
          "evidence": "1. **Update `.env`** - Copy new settings: `cp .env.example .env` then configure `PLATFORM_ADMIN_EMAIL` and other required multi-tenancy settings"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run migration** - database schema updates automatically: `python3 -m mcpgateway",
      "normalized_text": "Run migration** - database schema updates automatically: `python3 -m mcpgateway",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1065",
          "evidence": "2. **Run migration** - Database schema updates automatically: `python3 -m mcpgateway.bootstrap_db`"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate tokens via:",
      "normalized_text": "Generate tokens via:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1138",
          "evidence": "> * Generate tokens via:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow non-interactive api clients to authenticate securely",
      "normalized_text": "Allow non-interactive api clients to authenticate securely",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1144",
          "evidence": "> * Tokens allow non-interactive API clients to authenticate securely."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support sse authentication",
      "normalized_text": "Support sse authentication",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1146",
          "evidence": "> \ud83e\uddea Set `AUTH_REQUIRED=false` during development if you want to disable all authentication (e.g. for local testing or open APIs) or clients that don't support SSE authentication."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support authenticated sse, while still ensuring the gateway uses authentication",
      "normalized_text": "Support authenticated sse, while still ensuring the gateway uses authentication",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1147",
          "evidence": "> In production, you should use the SSE to stdio `mcpgateway-wrapper` for such tools that don't support authenticated SSE, while still ensuring the gateway uses authentication."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable the interactive admin dashboard | `false` | bool |",
      "normalized_text": "Enable the interactive admin dashboard | `false` | bool |",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1157",
          "evidence": "| `MCPGATEWAY_UI_ENABLED`        | Enable the interactive Admin dashboard | `false` | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable api endpoints for admin ops | `false` | bool |",
      "normalized_text": "Enable api endpoints for admin ops | `false` | bool |",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1158",
          "evidence": "| `MCPGATEWAY_ADMIN_API_ENABLED` | Enable API endpoints for admin ops     | `false` | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable bulk import endpoint for tools | `true` | bool |",
      "normalized_text": "Enable bulk import endpoint for tools | `true` | bool |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1159",
          "evidence": "| `MCPGATEWAY_BULK_IMPORT_ENABLED` | Enable bulk import endpoint for tools | `true`  | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1159",
          "evidence": "| `MCPGATEWAY_BULK_IMPORT_ENABLED` | Enable bulk import endpoint for tools | `true`  | bool    |"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "import request | `200` | int |",
      "normalized_text": "Import request | `200` | int |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1160",
          "evidence": "| `MCPGATEWAY_BULK_IMPORT_MAX_TOOLS` | Maximum number of tools per bulk import request | `200` | int |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import endpoint (requests per minute) | `10` | int |",
      "normalized_text": "Import endpoint (requests per minute) | `10` | int |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1161",
          "evidence": "| `MCPGATEWAY_BULK_IMPORT_RATE_LIMIT` | Rate limit for bulk import endpoint (requests per minute) | `10` | int |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable contextforge ui features | `true` | bool |",
      "normalized_text": "Enable contextforge ui features | `true` | bool |",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1163",
          "evidence": "| `MCPCONTEXT_UI_ENABLED`        | Enable ContextForge UI features        | `true`  | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1173",
          "evidence": "| `MCPGATEWAY_A2A_ENABLED`       | Enable A2A agent features             | `true`  | bool    |"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`",
      "normalized_text": "Import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1166",
          "evidence": "> \ud83d\udce5 The bulk import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`."
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1166",
          "evidence": "> \ud83d\udce5 The bulk import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`."
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1166",
          "evidence": "> \ud83d\udce5 The bulk import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`."
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "enable a2a agent metrics collection | `true` | bool |",
      "normalized_text": "Enable a2a agent metrics collection | `true` | bool |",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1177",
          "evidence": "| `MCPGATEWAY_A2A_METRICS_ENABLED` | Enable A2A agent metrics collection | `true`  | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "track agent performance, success rates, and response times",
      "normalized_text": "Track agent performance, success rates, and response times",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1180",
          "evidence": "> \ud83d\udcca **Metrics**: Track agent performance, success rates, and response times"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enables natural language interaction with tools, resources, and prompts exposed by mcp servers",
      "normalized_text": "Enables natural language interaction with tools, resources, and prompts exposed by mcp servers",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1190",
          "evidence": "The LLM Chat MCP Client allows you to interact with MCP servers using conversational AI from multiple LLM providers. This feature enables natural language interaction with tools, resources, and prompts exposed by MCP servers."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows you to interact with mcp servers using conversational ai from multiple llm providers",
      "normalized_text": "Allows you to interact with mcp servers using conversational ai from multiple llm providers",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1190",
          "evidence": "The LLM Chat MCP Client allows you to interact with MCP servers using conversational AI from multiple LLM providers. This feature enables natural language interaction with tools, resources, and prompts exposed by MCP servers."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable llm chat functionality | `false` | bool |",
      "normalized_text": "Enable llm chat functionality | `false` | bool |",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1194",
          "evidence": "| `LLMCHAT_ENABLED`             | Enable LLM Chat functionality          | `false` | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate | (none) | int |",
      "normalized_text": "Generate | (none) | int |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1206",
          "evidence": "| `AZURE_OPENAI_MAX_TOKENS`     | Maximum tokens to generate             | (none)  | int     |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1225",
          "evidence": "| `ANTHROPIC_MAX_TOKENS`        | Maximum tokens to generate             | `4096`  | int     |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1235",
          "evidence": "| `AWS_BEDROCK_MAX_TOKENS`      | Maximum tokens to generate             | `4096`  | int     |"
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "`LLMCHAT_ENABLED=true`: Enables LLM Chat functionality with the selected provider",
      "normalized_text": "`llmchat_enabled=true`: enables llm chat functionality with the selected provider",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1266",
          "evidence": "- `LLMCHAT_ENABLED=true`: Enables LLM Chat functionality with the selected provider"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1266",
          "evidence": "- `LLMCHAT_ENABLED=true`: Enables LLM Chat functionality with the selected provider"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "enable email-based authentication system | `true` | bool |",
      "normalized_text": "Enable email-based authentication system | `true` | bool |",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1294",
          "evidence": "| `EMAIL_AUTH_ENABLED`          | Enable email-based authentication system         | `true`                | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable jwt authentication for mcp client operations | `true` | bool |",
      "normalized_text": "Enable jwt authentication for mcp client operations | `true` | bool |",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1313",
          "evidence": "| `MCP_CLIENT_AUTH_ENABLED`     | Enable JWT authentication for MCP client operations | `true`            | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create users from sso providers | `true` | bool |",
      "normalized_text": "Create users from sso providers | `true` | bool |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1324",
          "evidence": "| `SSO_AUTO_CREATE_USERS`       | Automatically create users from SSO providers    | `true`                | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable ibm security verify oidc authentication | `false` | bool |",
      "normalized_text": "Enable ibm security verify oidc authentication | `false` | bool |",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1333",
          "evidence": "| `SSO_GITHUB_ENABLED`          | Enable GitHub OAuth authentication               | `false`               | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1341",
          "evidence": "| `SSO_GOOGLE_ENABLED`          | Enable Google OAuth authentication               | `false`               | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1349",
          "evidence": "| `SSO_IBM_VERIFY_ENABLED`      | Enable IBM Security Verify OIDC authentication   | `false`               | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1357",
          "evidence": "| `SSO_KEYCLOAK_ENABLED`              | Enable Keycloak OIDC authentication              | `false`                    | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1371",
          "evidence": "| `SSO_ENTRA_ENABLED`           | Enable Microsoft Entra ID OIDC authentication    | `false`               | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1379",
          "evidence": "| `SSO_GENERIC_ENABLED`               | Enable generic OIDC provider authentication      | `false`                    | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1393",
          "evidence": "| `SSO_OKTA_ENABLED`            | Enable Okta OIDC authentication                  | `false`               | bool    |"
        }
      ],
      "frequency": 7,
      "uniqueness_score": 0.14285714285714285
    },
    {
      "text": "implements **oauth 2",
      "normalized_text": "Implements **oauth 2",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1405",
          "evidence": "ContextForge implements **OAuth 2.0 Dynamic Client Registration (RFC 7591)** and **PKCE (RFC 7636)** for seamless integration with OAuth-protected MCP servers and upstream API gateways like HyperMCP."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\u2705 Support for public clients (PKCE-only, no client secret)",
      "normalized_text": "\u2705 support for public clients (pkce-only, no client secret)",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1411",
          "evidence": "- \u2705 Support for public clients (PKCE-only, no client secret)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1411",
          "evidence": "- \u2705 Support for public clients (PKCE-only, no client secret)"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "enable dynamic client registration (rfc 7591) | `true` | bool |",
      "normalized_text": "Enable dynamic client registration (rfc 7591) | `true` | bool |",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1417",
          "evidence": "| `DCR_ENABLED`                              | Enable Dynamic Client Registration (RFC 7591)                  | `true`                         | bool          |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow any) | `[]` | json array |",
      "normalized_text": "Allow any) | `[]` | json array |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1420",
          "evidence": "| `DCR_ALLOWED_ISSUERS`                      | Allowlist of trusted issuer URLs (empty = allow any)           | `[]`                           | JSON array    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable as metadata discovery (rfc 8414) | `true` | bool |",
      "normalized_text": "Enable as metadata discovery (rfc 8414) | `true` | bool |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1424",
          "evidence": "| `OAUTH_DISCOVERY_ENABLED`                  | Enable AS metadata discovery (RFC 8414)                        | `true`                         | bool          |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable automatic personal team creation for new users | `true` | bool |",
      "normalized_text": "Enable automatic personal team creation for new users | `true` | bool |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1437",
          "evidence": "| `AUTO_CREATE_PERSONAL_TEAMS`             | Enable automatic personal team creation for new users | `true`   | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows you to define a catalog of pre-configured mcp servers in a yaml file for easy discovery and management via the admin ui",
      "normalized_text": "Allows you to define a catalog of pre-configured mcp servers in a yaml file for easy discovery and management via the...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1446",
          "evidence": "> \ud83c\udd95 **New in v0.7.0**: The MCP Server Catalog allows you to define a catalog of pre-configured MCP servers in a YAML file for easy discovery and management via the Admin UI."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable mcp server catalog feature | `true` | bool |",
      "normalized_text": "Enable mcp server catalog feature | `true` | bool |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1450",
          "evidence": "| `MCPGATEWAY_CATALOG_ENABLED`        | Enable MCP server catalog feature                | `true`             | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\ud83d\udd10 OAuth Support - Register OAuth servers and configure later",
      "normalized_text": "\ud83d\udd10 oauth support - register oauth servers and configure later",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1461",
          "evidence": "- \ud83d\udd10 OAuth Support - Register OAuth servers and configure later"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1461",
          "evidence": "- \ud83d\udd10 OAuth Support - Register OAuth servers and configure later"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "enable response compression | `true` | bool |",
      "normalized_text": "Enable response compression | `true` | bool |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1475",
          "evidence": "| `CORS_ENABLED`            | Enable CORS                    | `true`                                         | bool       |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1484",
          "evidence": "| `HSTS_ENABLED`            | Enable HSTS header             | `true`                                         | bool       |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1515",
          "evidence": "| `COMPRESSION_ENABLED`         | Enable response compression                       | `true`  | bool                 |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1691",
          "evidence": "| `FEDERATION_ENABLED`       | Enable federation      | `true`  | bool       |"
        }
      ],
      "frequency": 4,
      "uniqueness_score": 0.25
    },
    {
      "text": "allow credentials in cors | `true` | bool |",
      "normalized_text": "Allow credentials in cors | `true` | bool |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1476",
          "evidence": "| `CORS_ALLOW_CREDENTIALS`  | Allow credentials in CORS      | `true`                                         | bool       |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable security headers middleware | `true` | bool |",
      "normalized_text": "Enable security headers middleware | `true` | bool |",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1479",
          "evidence": "| `SECURITY_HEADERS_ENABLED` | Enable security headers middleware | `true`                                     | bool       |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable x-content-type-options: nosniff header | `true` | bool |",
      "normalized_text": "Enable x-content-type-options: nosniff header | `true` | bool |",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1481",
          "evidence": "| `X_CONTENT_TYPE_OPTIONS_ENABLED` | Enable X-Content-Type-Options: nosniff header | `true`                           | bool       |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1483",
          "evidence": "| `X_DOWNLOAD_OPTIONS_ENABLED` | Enable X-Download-Options: noopen header | `true`                              | bool       |"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "enable x-xss-protection header | `true` | bool |",
      "normalized_text": "Enable x-xss-protection header | `true` | bool |",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1482",
          "evidence": "| `X_XSS_PROTECTION_ENABLED` | Enable X-XSS-Protection header | `true`                                         | bool       |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include subdomains in hsts header | `true` | bool |",
      "normalized_text": "Include subdomains in hsts header | `true` | bool |",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1486",
          "evidence": "| `HSTS_INCLUDE_SUBDOMAINS` | Include subdomains in HSTS header | `true`                                      | bool       |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow basic auth for docs (in addition to jwt) | `false` | bool |",
      "normalized_text": "Allow basic auth for docs (in addition to jwt) | `false` | bool |",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1488",
          "evidence": "| `DOCS_ALLOW_BASIC_AUTH`   | Allow Basic Auth for docs (in addition to JWT)         | `false`                                        | bool       |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow embedding, set `x_frame_options=sameorigin` (same domain) or disable with `x_frame_options=\"\"`",
      "normalized_text": "Allow embedding, set `x_frame_options=sameorigin` (same domain) or disable with `x_frame_options=\"\"`",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1499",
          "evidence": "> **iframe Embedding**: By default, `X-Frame-Options: DENY` prevents iframe embedding for security. To allow embedding, set `X_FRAME_OPTIONS=SAMEORIGIN` (same domain) or disable with `X_FRAME_OPTIONS=\"\"`. Also update CSP `frame-ancestors` directive if needed."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enables http basic authentication as an additional method using the same credentials as `basic_auth_user` and `basic_auth_password`",
      "normalized_text": "Enables http basic authentication as an additional method using the same credentials as `basic_auth_user` and `basic_...",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1507",
          "evidence": "> By default, they require Bearer token authentication. Setting `DOCS_ALLOW_BASIC_AUTH=true` enables HTTP Basic Authentication as an additional method using the same credentials as `BASIC_AUTH_USER` and `BASIC_AUTH_PASSWORD`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "includes automatic response compression middleware that reduces bandwidth usage by 30-70% for text-based responses (json, html, css, js)",
      "normalized_text": "Includes automatic response compression middleware that reduces bandwidth usage by 30-70% for text-based responses (j...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1511",
          "evidence": "MCP Gateway includes automatic response compression middleware that reduces bandwidth usage by 30-70% for text-based responses (JSON, HTML, CSS, JS). Compression is negotiated automatically based on client `Accept-Encoding` headers with algorithm priority: **Brotli** (best compression) > **Zstd** (fastest) > **GZip** (universal fallback)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "handle decompression automatically)",
      "normalized_text": "Handle decompression automatically)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1525",
          "evidence": "- No client changes required (browsers/clients handle decompression automatically)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provides logging with stdout/stderr output by default and optional file-based logging",
      "normalized_text": "Provides logging with stdout/stderr output by default and optional file-based logging",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1565",
          "evidence": "MCP Gateway provides flexible logging with **stdout/stderr output by default** and **optional file-based logging**. When file logging is enabled, it provides JSON formatting for structured logs and text formatting for console output."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provides json formatting for structured logs and text formatting for console output",
      "normalized_text": "Provides json formatting for structured logs and text formatting for console output",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1565",
          "evidence": "MCP Gateway provides flexible logging with **stdout/stderr output by default** and **optional file-based logging**. When file logging is enabled, it provides JSON formatting for structured logs and text formatting for console output."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable log file rotation | `false` | `true`, `false`** |",
      "normalized_text": "Enable log file rotation | `false` | `true`, `false`** |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1571",
          "evidence": "| `LOG_TO_FILE`           | **Enable file logging**            | **`false`**       | **`true`, `false`**        |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1575",
          "evidence": "| `LOG_ROTATION_ENABLED`  | **Enable log file rotation**       | **`false`**       | **`true`, `false`**        |"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "enable file logging (no rotation)",
      "normalized_text": "Enable file logging (no rotation)",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1594",
          "evidence": "# Optional: Enable file logging (no rotation)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1600",
          "evidence": "# Optional: Enable file logging with rotation"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "Set `LOG_TO_FILE=true` to enable optional file logging with JSON format",
      "normalized_text": "Set `log_to_file=true` to enable optional file logging with json format",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1612",
          "evidence": "- Set `LOG_TO_FILE=true` to enable optional file logging with JSON format"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1612",
          "evidence": "- Set `LOG_TO_FILE=true` to enable optional file logging with JSON format"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "includes vendor-agnostic opentelemetry support for distributed tracing",
      "normalized_text": "Includes vendor-agnostic opentelemetry support for distributed tracing",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1616",
          "evidence": "MCP Gateway includes **vendor-agnostic OpenTelemetry support** for distributed tracing. Works with Phoenix, Jaeger, Zipkin, Tempo, DataDog, New Relic, and any OTLP-compatible backend."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export | `512` | int > 0 |",
      "normalized_text": "Export | `512` | int > 0 |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1650",
          "evidence": "| `OTEL_BSP_MAX_EXPORT_BATCH_SIZE`| Max batch size for export                     | `512`                 | int > 0                                    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export interval (ms) | `5000` | int > 0 |",
      "normalized_text": "Export interval (ms) | `5000` | int > 0 |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1651",
          "evidence": "| `OTEL_BSP_SCHEDULE_DELAY`       | Export interval (ms)                          | `5000`                | int > 0                                    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin execution (if enabled)",
      "normalized_text": "Plugin execution (if enabled)",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1667",
          "evidence": "> \ud83d\udd0d **What Gets Traced**: Tool invocations, prompt rendering, resource fetching, gateway federation, health checks, plugin execution (if enabled)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable sse keepalive events | `true` | bool |",
      "normalized_text": "Enable sse keepalive events | `true` | bool |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1680",
          "evidence": "| `SSE_KEEPALIVE_ENABLED`   | Enable SSE keepalive events        | `true`  | bool                            |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "handle unknown event types",
      "normalized_text": "Handle unknown event types",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1685",
          "evidence": "> **\ud83d\udca1 SSE Keepalive Events**: The gateway sends periodic keepalive events to prevent connection timeouts with proxies and load balancers. Disable with `SSE_KEEPALIVE_ENABLED=false` if your client doesn't handle unknown event types. Common intervals: 30s (default), 60s (AWS ALB), 240s (Azure)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create new migration",
      "normalized_text": "Create new migration",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1767",
          "evidence": "- `make db-migrate` - Create new migration"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable dev mode | `false` | bool |",
      "normalized_text": "Enable dev mode | `false` | bool |",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1785",
          "evidence": "| `DEV_MODE` | Enable dev mode        | `false` | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable well-known uri endpoints (/",
      "normalized_text": "Enable well-known uri endpoints (/",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1793",
          "evidence": "| `WELL_KNOWN_ENABLED`          | Enable well-known URI endpoints (/.well-known/*) | `true`                | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "customize for your needs",
      "normalized_text": "Customize for your needs",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1799",
          "evidence": "> \ud83d\udd0d **robots.txt**: By default, blocks all crawlers for security. Customize for your needs."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable http header passthrough feature (\u26a0\ufe0f security implications) | `false` | bool |",
      "normalized_text": "Enable http header passthrough feature (\u26a0\ufe0f security implications) | `false` | bool |",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1809",
          "evidence": "| `ENABLE_HEADER_PASSTHROUGH`   | Enable HTTP header passthrough feature (\u26a0\ufe0f Security implications) | `false` | bool |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable overwriting of base headers (\u26a0\ufe0f usage) | `false` | bool |",
      "normalized_text": "Enable overwriting of base headers (\u26a0\ufe0f usage) | `false` | bool |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1810",
          "evidence": "| `ENABLE_OVERWRITE_BASE_HEADERS` | Enable overwriting of base headers (\u26a0\ufe0f Advanced usage) | `false` | bool |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable if you understand the implications and have reviewed which headers should be passed through to backing mcp servers",
      "normalized_text": "Enable if you understand the implications and have reviewed which headers should be passed through to backing mcp ser...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1813",
          "evidence": "> \u26a0\ufe0f **Security Warning**: Header passthrough is disabled by default for security. Only enable if you understand the implications and have reviewed which headers should be passed through to backing MCP servers. Authorization headers are not included in defaults."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 10.19. Plugin Configuration",
      "normalized_text": "* 10.19. plugin configuration",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1815",
          "evidence": "### Plugin Configuration"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L87",
          "evidence": "* 10.19. [Plugin Configuration](#plugin-configuration)"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "enable the plugin framework | `false` | bool |",
      "normalized_text": "Enable the plugin framework | `false` | bool |",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1819",
          "evidence": "| `PLUGINS_ENABLED`             | Enable the plugin framework                      | `false`               | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1819",
          "evidence": "| `PLUGINS_ENABLED`             | Enable the plugin framework                      | `false`               | bool    |"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "plugin configuration file | `plugins/config",
      "normalized_text": "Plugin configuration file | `plugins/config",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1820",
          "evidence": "| `PLUGIN_CONFIG_FILE`          | Path to main plugin configuration file          | `plugins/config.yaml` | string  |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin client key | _(empty)_ | string |",
      "normalized_text": "Plugin client key | _(empty)_ | string |",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1821",
          "evidence": "| `PLUGINS_MTLS_CA_BUNDLE`      | (Optional) default CA bundle for external plugin mTLS | _(empty)_     | string  |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1822",
          "evidence": "| `PLUGINS_MTLS_CLIENT_CERT`    | (Optional) gateway client certificate for plugin mTLS | _(empty)_     | string  |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1823",
          "evidence": "| `PLUGINS_MTLS_CLIENT_KEY`     | (Optional) gateway client key for plugin mTLS | _(empty)_             | string  |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1824",
          "evidence": "| `PLUGINS_MTLS_CLIENT_KEY_PASSWORD` | (Optional) password for plugin client key | _(empty)_             | string  |"
        }
      ],
      "frequency": 4,
      "uniqueness_score": 0.25
    },
    {
      "text": "plugin certificates (`true`/`false`) | `true` | bool |",
      "normalized_text": "Plugin certificates (`true`/`false`) | `true` | bool |",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1825",
          "evidence": "| `PLUGINS_MTLS_VERIFY`         | (Optional) verify remote plugin certificates (`true`/`false`) | `true` | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugins cli | `false` | bool |",
      "normalized_text": "Plugins cli | `false` | bool |",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1826",
          "evidence": "| `PLUGINS_MTLS_CHECK_HOSTNAME` | (Optional) enforce hostname verification for plugins | `true`      | bool    |"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1827",
          "evidence": "| `PLUGINS_CLI_COMPLETION`      | Enable auto-completion for plugins CLI          | `false`               | bool    |"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "enable auto-completion for plugins cli | `false` | bool |",
      "normalized_text": "Enable auto-completion for plugins cli | `false` | bool |",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1827",
          "evidence": "| `PLUGINS_CLI_COMPLETION`      | Enable auto-completion for plugins CLI          | `false`               | bool    |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugins cli | (none) | `rich`, `markdown`, `disabled` |",
      "normalized_text": "Plugins cli | (none) | `rich`, `markdown`, `disabled` |",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1828",
          "evidence": "| `PLUGINS_CLI_MARKUP_MODE`     | Set markup mode for plugins CLI                 | (none)                | `rich`, `markdown`, `disabled` |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run production gunicorn server on :4444",
      "normalized_text": "Run production gunicorn server on :4444",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1848",
          "evidence": "make serve               # Run production Gunicorn server on"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2657",
          "evidence": "serve                - Run production Gunicorn server on :4444"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run gunicorn behind https on :4444 (uses",
      "normalized_text": "Run gunicorn behind https on :4444 (uses",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1849",
          "evidence": "make serve-ssl           # Run Gunicorn behind HTTPS on :4444 (uses ./certs)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2659",
          "evidence": "serve-ssl            - Run Gunicorn behind HTTPS on :4444 (uses ./certs)"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run the development (uvicorn) server:",
      "normalized_text": "Run the development (uvicorn) server:",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1854",
          "evidence": "To run the development (uvicorn) server:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports reload, and passes arguments to the server",
      "normalized_text": "Supports reload, and passes arguments to the server",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1862",
          "evidence": "> `run.sh` is a wrapper around `uvicorn` that loads `.env`, supports reload, and passes arguments to the server."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate a jwt token using jwt_secret_key and export it as mcpgateway_bearer_token",
      "normalized_text": "Generate a jwt token using jwt_secret_key and export it as mcpgateway_bearer_token",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1885",
          "evidence": "# Generate a JWT token using JWT_SECRET_KEY and export it as MCPGATEWAY_BEARER_TOKEN"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export it as mcpgateway_bearer_token",
      "normalized_text": "Export it as mcpgateway_bearer_token",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1885",
          "evidence": "# Generate a JWT token using JWT_SECRET_KEY and export it as MCPGATEWAY_BEARER_TOKEN"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports deployment to [ibm cloud code engine](https://cloud",
      "normalized_text": "Supports deployment to [ibm cloud code engine](https://cloud",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1901",
          "evidence": "This project supports deployment to [IBM Cloud Code Engine](https://cloud.ibm.com/codeengine) using the **ibmcloud** CLI and the IBM Container Registry."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export the variables in your shell)",
      "normalized_text": "Export the variables in your shell)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1917",
          "evidence": "Create a **`.env`** file (or export the variables in your shell)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provides tunable defaults you can override:",
      "normalized_text": "Provides tunable defaults you can override:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1918",
          "evidence": "The first block is **required**; the second provides **tunable defaults** you can override:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugins |",
      "normalized_text": "Plugins |",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1944",
          "evidence": "| `make ibmcloud-cli-install` | Install IBM Cloud CLI and required plugins                                |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create or update** the code engine application (uses cpu/memory/secret) |",
      "normalized_text": "Create or update** the code engine application (uses cpu/memory/secret) |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1949",
          "evidence": "| `make ibmcloud-deploy`      | **Create or update** the Code Engine application (uses CPU/memory/secret) |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate an api bearer token, and test the various api endpoints",
      "normalized_text": "Generate an api bearer token, and test the various api endpoints",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1981",
          "evidence": "Generate an API Bearer token, and test the various API endpoints."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate a bearer token using the configured secret key (use the same as your",
      "normalized_text": "Generate a bearer token using the configured secret key (use the same as your",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1987",
          "evidence": "# Generate a bearer token using the configured secret key (use the same as your .env)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "handles any method name: `list_tools`, `list_gateways`, `prompts/get`, or invokes a tool if method matches a registered tool name",
      "normalized_text": "Handles any method name: `list_tools`, `list_gateways`, `prompts/get`, or invokes a tool if method matches a register...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2057",
          "evidence": "Handles any method name: `list_tools`, `list_gateways`, `prompts/get`, or invokes a tool if method matches a registered tool name ."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create prompt template",
      "normalized_text": "Create prompt template",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2261",
          "evidence": "# Create prompt template"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "implements doctest coverage to ensure all code examples in documentation are tested and verified:",
      "normalized_text": "Implements doctest coverage to ensure all code examples in documentation are tested and verified:",
      "category": "Documentation",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2423",
          "evidence": "ContextForge implements comprehensive doctest coverage to ensure all code examples in documentation are tested and verified:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run all doctests",
      "normalized_text": "Run all doctests",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2426",
          "evidence": "make doctest         # Run all doctests"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run with detailed output",
      "normalized_text": "Run with detailed output",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2427",
          "evidence": "make doctest-verbose # Run with detailed output"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate coverage report",
      "normalized_text": "Generate coverage report",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2428",
          "evidence": "make doctest-coverage # Generate coverage report"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Developers can run examples directly from docstrings",
      "normalized_text": "Developers can run examples directly from docstrings",
      "category": "Documentation",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2442",
          "evidence": "- Developers can run examples directly from docstrings"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2442",
          "evidence": "- Developers can run examples directly from docstrings"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run runtime env (ignored)",
      "normalized_text": "Run runtime env (ignored)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2465",
          "evidence": "\u251c\u2500\u2500 .env.gcr                        # Google Cloud Run runtime env (ignored)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build (docker / podman)",
      "normalized_text": "Build (docker / podman)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2498",
          "evidence": "\u251c\u2500\u2500 Containerfile                   # OCI image build (Docker / Podman)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build / packaging / tooling \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500",
      "normalized_text": "Build / packaging / tooling \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2505",
          "evidence": "# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Build / Packaging / Tooling \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "offer the following makefile targets",
      "normalized_text": "Offer the following makefile targets",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2639",
          "evidence": "This project offer the following Makefile targets. Type `make` in the project root to show all targets."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a fresh virtual environment with uv & friends",
      "normalized_text": "Create a fresh virtual environment with uv & friends",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2649",
          "evidence": "venv                 - Create a fresh virtual environment with uv & friends"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate self-signed tls cert & key in",
      "normalized_text": "Generate self-signed tls cert & key in",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2658",
          "evidence": "certs                - Generate self-signed TLS cert & key in ./certs (won't overwrite)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run fast-reload dev server (uvicorn)",
      "normalized_text": "Run fast-reload dev server (uvicorn)",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2660",
          "evidence": "dev                  - Run fast-reload dev server (uvicorn)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run - execute helper script",
      "normalized_text": "Run - execute helper script",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2661",
          "evidence": "run                  - Execute helper script ./run.sh"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2661",
          "evidence": "run                  - Execute helper script ./run.sh"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run unit tests with pytest",
      "normalized_text": "Run unit tests with pytest",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2662",
          "evidence": "test                 - Run unit tests with pytest"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run readme / examples through pytest-examples",
      "normalized_text": "Run readme / examples through pytest-examples",
      "category": "Documentation",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2664",
          "evidence": "pytest-examples      - Run README / examples through pytest-examples"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build artefacts, virtualenv, docs, certs, coverage, sbom, etc",
      "normalized_text": "Build artefacts, virtualenv, docs, certs, coverage, sbom, etc",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2665",
          "evidence": "clean                - Remove caches, build artefacts, virtualenv, docs, certs, coverage, SBOM, etc."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run tests with coverage, emit md/html/xml + badge",
      "normalized_text": "Run tests with coverage, emit md/html/xml + badge",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2667",
          "evidence": "coverage             - Run tests with coverage, emit md/HTML/XML + badge"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate html loc & per-file metrics with scc",
      "normalized_text": "Generate html loc & per-file metrics with scc",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2670",
          "evidence": "scc-report           - Generate HTML LoC & per-file metrics with scc"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build docs (graphviz + handsdown + images + sbom)",
      "normalized_text": "Build docs (graphviz + handsdown + images + sbom)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2672",
          "evidence": "docs                 - Build docs (graphviz + handsdown + images + SBOM)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate architecture & dependency diagrams",
      "normalized_text": "Generate architecture & dependency diagrams",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2673",
          "evidence": "images               - Generate architecture & dependency diagrams"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the linting suite (see targets below)",
      "normalized_text": "Run the linting suite (see targets below)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2675",
          "evidence": "lint                 - Run the full linting suite (see targets below)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "imports / variables with autoflake",
      "normalized_text": "Imports / variables with autoflake",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2677",
          "evidence": "autoflake            - Remove unused imports / variables with autoflake"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "imports with isort",
      "normalized_text": "Imports with isort",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2678",
          "evidence": "isort                - Organise & sort imports with isort"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run all configured pre-commit hooks",
      "normalized_text": "Run all configured pre-commit hooks",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2686",
          "evidence": "pre-commit           - Run all configured pre-commit hooks"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate png call-graph from cprofile stats",
      "normalized_text": "Generate png call-graph from cprofile stats",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2699",
          "evidence": "pstats               - Generate PNG call-graph from cProfile stats"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run tox across multi-python versions",
      "normalized_text": "Run tox across multi-python versions",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2701",
          "evidence": "tox                  - Run tox across multi-Python versions"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run htmlhint, stylelint, eslint, retire",
      "normalized_text": "Run htmlhint, stylelint, eslint, retire",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2710",
          "evidence": "lint-web             - Run HTMLHint, Stylelint, ESLint, Retire.js and npm audit"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run all osv-scanner checks (source, image, licence)",
      "normalized_text": "Run all osv-scanner checks (source, image, licence)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2715",
          "evidence": "osv-scan             - Run all osv-scanner checks (source, image, licence)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supporting tools",
      "normalized_text": "Supporting tools",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2717",
          "evidence": "sonar-deps-podman    - Install podman-compose + supporting tools"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2718",
          "evidence": "sonar-deps-docker    - Install docker-compose + supporting tools"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run containerized sonar scanner cli with docker",
      "normalized_text": "Run containerized sonar scanner cli with docker",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2721",
          "evidence": "sonar-submit-docker  - Run containerized Sonar Scanner CLI with Docker"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2722",
          "evidence": "sonar-submit-podman  - Run containerized Sonar Scanner CLI with Podman"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run scan with python wrapper (pysonar-scanner)",
      "normalized_text": "Run scan with python wrapper (pysonar-scanner)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2723",
          "evidence": "pysonar-scanner      - Run scan with Python wrapper (pysonar-scanner)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a token & which env vars to export",
      "normalized_text": "Create a token & which env vars to export",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2724",
          "evidence": "sonar-info           - How to create a token & which env vars to export"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build wheel *and* sdist into",
      "normalized_text": "Build wheel *and* sdist into",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2735",
          "evidence": "dist                 - Clean-build wheel *and* sdist into ./dist"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build wheel only",
      "normalized_text": "Build wheel only",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2736",
          "evidence": "wheel                - Build wheel only"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build source distribution only",
      "normalized_text": "Build source distribution only",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2737",
          "evidence": "sdist                - Build source distribution only"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build + twine + check-manifest + pyroma (no upload)",
      "normalized_text": "Build + twine + check-manifest + pyroma (no upload)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2738",
          "evidence": "verify               - Build + twine + check-manifest + pyroma (no upload)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build development container image",
      "normalized_text": "Build development container image",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2741",
          "evidence": "podman-dev           - Build development container image"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2742",
          "evidence": "podman               - Build container image"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2755",
          "evidence": "docker-dev           - Build development Docker image"
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "build production container image (using ubi-micro \u2192 scratch)",
      "normalized_text": "Build production container image (using ubi-micro \u2192 scratch)",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2743",
          "evidence": "podman-prod          - Build production container image (using ubi-micro \u2192 scratch). Not supported on macOS."
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2757",
          "evidence": "docker-prod          - Build production container image (using ubi-micro \u2192 scratch). Not supported on macOS."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run the container on http (port 4444) and start a shell",
      "normalized_text": "Run the container on http (port 4444) and start a shell",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2744",
          "evidence": "podman-run           - Run the container on HTTP  (port 4444)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2745",
          "evidence": "podman-run-shell     - Run the container on HTTP  (port 4444) and start a shell"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2746",
          "evidence": "podman-run-ssl       - Run the container on HTTPS (port 4444, self-signed)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2758",
          "evidence": "docker-run           - Run the container on HTTP  (port 4444)"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2759",
          "evidence": "docker-run-ssl       - Run the container on HTTPS (port 4444, self-signed)"
        }
      ],
      "frequency": 5,
      "uniqueness_score": 0.2
    },
    {
      "text": "run the container on https with --network=host (port 4444, self-signed)",
      "normalized_text": "Run the container on https with --network=host (port 4444, self-signed)",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2747",
          "evidence": "podman-run-ssl-host  - Run the container on HTTPS with --network=host (port 4444, self-signed)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "process info in docker container",
      "normalized_text": "Process info in docker container",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2752",
          "evidence": "podman-top           - Show live top-level process info in container"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2764",
          "evidence": "docker-top           - Show top-level process info in Docker container"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "build / start / stop the multi-service stack",
      "normalized_text": "Build / start / stop the multi-service stack",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2766",
          "evidence": "\ud83d\udee0\ufe0f COMPOSE STACK     - Build / start / stop the multi-service stack"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "building as needed",
      "normalized_text": "Building as needed",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2768",
          "evidence": "compose-restart      - Recreate changed containers, pulling / building as needed"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build - build (or rebuild) images defined in the compose file",
      "normalized_text": "Build - build (or rebuild) images defined in the compose file",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2769",
          "evidence": "compose-build        - Build (or rebuild) images defined in the compose file"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugins (os auto-detected)",
      "normalized_text": "Plugins (os auto-detected)",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2780",
          "evidence": "ibmcloud-cli-install        - Auto-install IBM Cloud CLI + required plugins (OS auto-detected)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build and load ghcr",
      "normalized_text": "Build and load ghcr",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2796",
          "evidence": "minikube-image-load   - Build and load ghcr.io/ibm/mcp-context-forge:latest into Minikube"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build \u2192 upload \u2192 install locally",
      "normalized_text": "Build \u2192 upload \u2192 install locally",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2812",
          "evidence": "local-pypi-clean     - Full cycle: build \u2192 upload \u2192 install locally"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2821",
          "evidence": "devpi-clean          - Full cycle: build \u2192 upload \u2192 install locally"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "create user and dev index",
      "normalized_text": "Create user and dev index",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2818",
          "evidence": "devpi-setup-user     - Create user and dev index"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support (note spaces):",
      "normalized_text": "Support (note spaces):",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2843",
          "evidence": "- Option A (system location): point the DB to Application Support (note spaces):"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "- `export DATABASE_URL=\"sqlite:////Users/$USER/Library/Application Support/mcpgateway/mcp.db\"`",
      "normalized_text": "- `export database_url=\"sqlite:////users/$user/library/application support/mcpgateway/mcp.db\"`",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2845",
          "evidence": "- `export DATABASE_URL=\"sqlite:////Users/$USER/Library/Application Support/mcpgateway/mcp.db\"`"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2845",
          "evidence": "- `export DATABASE_URL=\"sqlite:////Users/$USER/Library/Application Support/mcpgateway/mcp.db\"`"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "- `export DATABASE_URL=\"sqlite:////Users/$USER/mcp-context-forge/data/mcp.db\"`",
      "normalized_text": "- `export database_url=\"sqlite:////users/$user/mcp-context-forge/data/mcp.db\"`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2848",
          "evidence": "- `export DATABASE_URL=\"sqlite:////Users/$USER/mcp-context-forge/data/mcp.db\"`"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2848",
          "evidence": "- `export DATABASE_URL=\"sqlite:////Users/$USER/mcp-context-forge/data/mcp.db\"`"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "process contention:",
      "normalized_text": "Process contention:",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2851",
          "evidence": "- Reduce startup concurrency to rule out multi-process contention:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs single-process)",
      "normalized_text": "Runs single-process)",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2852",
          "evidence": "- `GUNICORN_WORKERS=1 make serve` (or use `make dev` which runs single-process)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the diagnostic helper to verify the environment:",
      "normalized_text": "Run the diagnostic helper to verify the environment:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2853",
          "evidence": "- Run the diagnostic helper to verify the environment:"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2853",
          "evidence": "- Run the diagnostic helper to verify the environment:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "- `export CACHE_TYPE=none`",
      "normalized_text": "- `export cache_type=none`",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2858",
          "evidence": "- `export CACHE_TYPE=none`"
        },
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2858",
          "evidence": "- `export CACHE_TYPE=none`"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "import sqlite3; print(sqlite3",
      "normalized_text": "Import sqlite3; print(sqlite3",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2862",
          "evidence": "- `brew install python3 && /opt/homebrew/bin/python3 -c 'import sqlite3; print(sqlite3.sqlite_version)'`"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `make lint` and fix any issues",
      "normalized_text": "Run `make lint` and fix any issues",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2927",
          "evidence": "2. Run `make lint` and fix any issues."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 3.1. 1 - Install & run (copy-paste friendly)",
      "normalized_text": "* 3.1. 1 - install & run (copy-paste friendly)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L37",
          "evidence": "* 3.1. [1 - Install & run (copy-paste friendly)](#1---install--run-copy-paste-friendly)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 4.1.1. 1 - Minimum viable run",
      "normalized_text": "* 4.1.1. 1 - minimum viable run",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L40",
          "evidence": "* 4.1.1. [1 - Minimum viable run](#1---minimum-viable-run)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 4.2.1. 1 - Basic run",
      "normalized_text": "* 4.2.1. 1 - basic run",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L44",
          "evidence": "* 4.2.1. [1 - Basic run](#1---basic-run)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 5.1. \ud83e\udde9 Running from an MCP Client (`mcpgateway.wrapper`)",
      "normalized_text": "* 5.1. \ud83e\udde9 running from an mcp client (`mcpgateway.wrapper`)",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L48",
          "evidence": "* 5.1. [\ud83e\udde9 Running from an MCP Client (`mcpgateway.wrapper`)](#-running-from-an-mcp-client-mcpgatewaywrapper)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 5.1.1. 1 - Install `uv` (`uvx` is an alias it provides)",
      "normalized_text": "* 5.1.1. 1 - install `uv` (`uvx` is an alias it provides)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L49",
          "evidence": "* 5.1.1. [1 - Install `uv` (`uvx` is an alias it provides)](#1---install-uv-uvx-is-an-alias-it-provides)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 5.1.3. Claude Desktop JSON (runs through uvx)",
      "normalized_text": "* 5.1.3. claude desktop json (runs through uvx)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L51",
          "evidence": "* 5.1.3. [Claude Desktop JSON (runs through **uvx**)](#claude-desktop-json-runs-through-uvx)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 6.2. 2 - First-Time Build (Automatic)",
      "normalized_text": "* 6.2. 2 - first-time build (automatic)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L55",
          "evidence": "* 6.2. [2 - First-Time Build (Automatic)](#2---first-time-build-automatic)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* 10.4. Email-Based Authentication & User Management",
      "normalized_text": "* 10.4. email-based authentication & user management",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L72",
          "evidence": "* 10.4. [Email-Based Authentication & User Management](#email-based-authentication--user-management)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "An Admin UI for real-time management, configuration, and log monitoring",
      "normalized_text": "An admin ui for real-time management, configuration, and log monitoring",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L135",
          "evidence": "* An Admin UI for real-time management, configuration, and log monitoring"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Built-in auth, retries, and rate-limiting with user-scoped OAuth tokens and unconditional X-Upstream-Authorization header support",
      "normalized_text": "Built-in auth, retries, and rate-limiting with user-scoped oauth tokens and unconditional x-upstream-authorization he...",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L136",
          "evidence": "* Built-in auth, retries, and rate-limiting with user-scoped OAuth tokens and unconditional X-Upstream-Authorization header support"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*\u26a0\ufe0f Important**: See SECURITY.md for more details.",
      "normalized_text": "*\u26a0\ufe0f important**: see security.md for more details.",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L146",
          "evidence": "**\u26a0\ufe0f Important**: See [SECURITY.md](./SECURITY.md) for more details."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Prompts: Jinja2 templates, multimodal support, rollback/versioning",
      "normalized_text": "Prompts: jinja2 templates, multimodal support, rollback/versioning",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L192",
          "evidence": "* **Prompts**: Jinja2 templates, multimodal support, rollback/versioning"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Real-time log viewer with filtering, search, and export capabilities",
      "normalized_text": "Real-time log viewer with filtering, search, and export capabilities",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L202",
          "evidence": "* Real-time log viewer with filtering, search, and export capabilities"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Vendor-agnostic tracing with OpenTelemetry (OTLP) protocol support",
      "normalized_text": "Vendor-agnostic tracing with opentelemetry (otlp) protocol support",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L212",
          "evidence": "* **Vendor-agnostic tracing** with OpenTelemetry (OTLP) protocol support"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Multiple backend support: Phoenix (LLM-focused), Jaeger, Zipkin, Tempo, DataDog, New Relic",
      "normalized_text": "Multiple backend support: phoenix (llm-focused), jaeger, zipkin, tempo, datadog, new relic",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L213",
          "evidence": "* **Multiple backend support**: Phoenix (LLM-focused), Jaeger, Zipkin, Tempo, DataDog, New Relic"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "LLM-specific metrics: Token usage, costs, model performance",
      "normalized_text": "Llm-specific metrics: token usage, costs, model performance",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L216",
          "evidence": "* **LLM-specific metrics**: Token usage, costs, model performance"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "--stdio \"docker run --rm -i ghcr.io/ibm/fast-time-server:latest -transport=stdio\" \\",
      "normalized_text": "--stdio \"docker run --rm -i ghcr.io/ibm/fast-time-server:latest -transport=stdio\" \\",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L360",
          "evidence": "--stdio \"docker run --rm -i ghcr.io/ibm/fast-time-server:latest -transport=stdio\" \\"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": ".env files - Put all the `-e FOO=` lines into a file and replace them with `--env-file .env`. See the provided .env.example for reference.",
      "normalized_text": ".env files - put all the `-e foo=` lines into a file and replace them with `--env-file .env`. see the provided .env.e...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L616",
          "evidence": "* **.env files** - Put all the `-e FOO=` lines into a file and replace them with `--env-file .env`. See the provided [.env.example](https://github.com/IBM/mcp-context-forge/blob/main/.env.example) for reference."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Pinned tags - Use an explicit version (e.g. `v0.8.0`) instead of `latest` for reproducible builds.",
      "normalized_text": "Pinned tags - use an explicit version (e.g. `v0.8.0`) instead of `latest` for reproducible builds.",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L617",
          "evidence": "* **Pinned tags** - Use an explicit version (e.g. `v0.8.0`) instead of `latest` for reproducible builds."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Upgrades - Stop, remove, and rerun with the same `-v $(pwd)/data:/data` mount; your DB and config stay intact.",
      "normalized_text": "Upgrades - stop, remove, and rerun with the same `-v $(pwd)/data:/data` mount; your db and config stay intact.",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L623",
          "evidence": "* **Upgrades** - Stop, remove, and rerun with the same `-v $(pwd)/data:/data` mount; your DB and config stay intact."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Docker or Podman installed and running locally",
      "normalized_text": "Docker or podman installed and running locally",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L868",
          "evidence": "* **Docker** or **Podman** installed and running locally"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "or* manually run: <kbd>Ctrl/Cmd \u21e7 P</kbd> \u2192 Dev Containers: Reopen in Container",
      "normalized_text": "Or* manually run: <kbd>ctrl/cmd \u21e7 p</kbd> \u2192 dev containers: reopen in container",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L885",
          "evidence": "*or* manually run: <kbd>Ctrl/Cmd \u21e7 P</kbd> \u2192 **Dev Containers: Reopen in Container**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`make clean` - clear build artefacts & caches",
      "normalized_text": "`make clean` - clear build artefacts & caches",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L918",
          "evidence": "* `make clean` - clear build artefacts & caches"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Port forwarding is automatic (customize via `.devcontainer/devcontainer.json`)",
      "normalized_text": "Port forwarding is automatic (customize via `.devcontainer/devcontainer.json`)",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L919",
          "evidence": "* Port forwarding is automatic (customize via `.devcontainer/devcontainer.json`)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Optional: Docker / Podman for containerized runs",
      "normalized_text": "Optional: docker / podman for containerized runs",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L942",
          "evidence": "* Optional: **Docker / Podman** for containerized runs"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Provider Requirements:**",
      "normalized_text": "*provider requirements:**",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1268",
          "evidence": "**Provider Requirements:**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "AWS Bedrock: Requires `AWS_BEDROCK_MODEL_ID` and `pip install langchain-aws boto3`. Uses AWS credential chain if explicit credentials not provided.",
      "normalized_text": "Aws bedrock: requires `aws_bedrock_model_id` and `pip install langchain-aws boto3`. uses aws credential chain if expl...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1272",
          "evidence": "- **AWS Bedrock**: Requires `AWS_BEDROCK_MODEL_ID` and `pip install langchain-aws boto3`. Uses AWS credential chain if explicit credentials not provided."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Ollama: Requires local Ollama instance running (default: `http://localhost:11434`)",
      "normalized_text": "Ollama: requires local ollama instance running (default: `http://localhost:11434`)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1274",
          "evidence": "- **Ollama**: Requires local Ollama instance running (default: `http://localhost:11434`)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "LLM Chat Guide - LLM Chat setup and provider configuration",
      "normalized_text": "Llm chat guide - llm chat setup and provider configuration",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1288",
          "evidence": "- [LLM Chat Guide](https://ibm.github.io/mcp-context-forge/using/clients/llm-chat) - Complete LLM Chat setup and provider configuration"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Generic OIDC Provider (Auth0, Authentik, etc.):**",
      "normalized_text": "*generic oidc provider (auth0, authentik, etc.):**",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1376",
          "evidence": "**Generic OIDC Provider (Auth0, Authentik, etc.):**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\u2705 PKCE (Proof Key for Code Exchange) enabled for all Authorization Code flows",
      "normalized_text": "\u2705 pkce (proof key for code exchange) enabled for all authorization code flows",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1410",
          "evidence": "- \u2705 PKCE (Proof Key for Code Exchange) enabled for all Authorization Code flows"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\u2705 Configurable issuer allowlist for security",
      "normalized_text": "\u2705 configurable issuer allowlist for security",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1413",
          "evidence": "- \u2705 Configurable issuer allowlist for security"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "No client changes required (browsers/clients handle decompression automatically)",
      "normalized_text": "No client changes required (browsers/clients handle decompression automatically)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1525",
          "evidence": "- No client changes required (browsers/clients handle decompression automatically)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Performance Impact:**",
      "normalized_text": "*performance impact:**",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1528",
          "evidence": "**Performance Impact:**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Log Rotation: When `LOG_ROTATION_ENABLED=true`, files rotate at `LOG_MAX_SIZE_MB` with `LOG_BACKUP_COUNT` backup files (e.g., `.log.1`, `.log.2`)",
      "normalized_text": "Log rotation: when `log_rotation_enabled=true`, files rotate at `log_max_size_mb` with `log_backup_count` backup file...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1583",
          "evidence": "- **Log Rotation**: When `LOG_ROTATION_ENABLED=true`, files rotate at `LOG_MAX_SIZE_MB` with `LOG_BACKUP_COUNT` backup files (e.g., `.log.1`, `.log.2`)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Directory Creation: Log folder is automatically created if it doesn't exist",
      "normalized_text": "Directory creation: log folder is automatically created if it doesn't exist",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1584",
          "evidence": "- **Directory Creation**: Log folder is automatically created if it doesn't exist"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "File logging is disabled by default (no files created)",
      "normalized_text": "File logging is disabled by default (no files created)",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1611",
          "evidence": "- File logging is **disabled by default** (no files created)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Performance Tuning**:",
      "normalized_text": "*performance tuning**:",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1643",
          "evidence": "**Performance Tuning**:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`make db-migrate` - Create new migration",
      "normalized_text": "`make db-migrate` - create new migration",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1767",
          "evidence": "- `make db-migrate` - Create new migration"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\"No 'script_location' key found\": Ensure you're running from the project root directory.",
      "normalized_text": "\"no 'script_location' key found\": ensure you're running from the project root directory.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1775",
          "evidence": "- **\"No 'script_location' key found\"**: Ensure you're running from the project root directory."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\"Unknown SSE event: keepalive\" warnings: Some MCP clients don't recognize keepalive events. These warnings are harmless and don't affect functionality. To disable: `SSE_KEEPALIVE_ENABLED=false`",
      "normalized_text": "\"unknown sse event: keepalive\" warnings: some mcp clients don't recognize keepalive events. these warnings are harmle...",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1777",
          "evidence": "- **\"Unknown SSE event: keepalive\" warnings**: Some MCP clients don't recognize keepalive events. These warnings are harmless and don't affect functionality. To disable: `SSE_KEEPALIVE_ENABLED=false`"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Code Engine and Container Registry services enabled in your IBM Cloud account",
      "normalized_text": "Code engine and container registry services enabled in your ibm cloud account",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L1911",
          "evidence": "- Code Engine and Container Registry services **enabled** in your IBM Cloud account"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Regression prevention through automated verification",
      "normalized_text": "Regression prevention through automated verification",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2443",
          "evidence": "- Regression prevention through automated verification"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Avoid cloning/running the repo under `~/Documents` or `~/Desktop` if iCloud \"Desktop & Documents\" sync is enabled.",
      "normalized_text": "Avoid cloning/running the repo under `~/documents` or `~/desktop` if icloud \"desktop & documents\" sync is enabled.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2835",
          "evidence": "- Avoid cloning/running the repo under `~/Documents` or `~/Desktop` if iCloud \"Desktop & Documents\" sync is enabled."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "- Option A (system location): point the DB to Application Support (note spaces):",
      "normalized_text": "- option a (system location): point the db to application support (note spaces):",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2843",
          "evidence": "- Option A (system location): point the DB to Application Support (note spaces):"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "- `mkdir -p \"$HOME/Library/Application Support/mcpgateway\"`",
      "normalized_text": "- `mkdir -p \"$home/library/application support/mcpgateway\"`",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2844",
          "evidence": "- `mkdir -p \"$HOME/Library/Application Support/mcpgateway\"`"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Reduce startup concurrency to rule out multi-process contention:",
      "normalized_text": "Reduce startup concurrency to rule out multi-process contention:",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2851",
          "evidence": "- Reduce startup concurrency to rule out multi-process contention:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "- `GUNICORN_WORKERS=1 make serve` (or use `make dev` which runs single-process)",
      "normalized_text": "- `gunicorn_workers=1 make serve` (or use `make dev` which runs single-process)",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2852",
          "evidence": "- `GUNICORN_WORKERS=1 make serve` (or use `make dev` which runs single-process)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Optional: temporarily disable the file-lock leader path by using the in-process mode:",
      "normalized_text": "Optional: temporarily disable the file-lock leader path by using the in-process mode:",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2857",
          "evidence": "- Optional: temporarily disable the file-lock leader path by using the in-process mode:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`brew install python3 && /opt/homebrew/bin/python3 -c 'import sqlite3; print(sqlite3.sqlite_version)'`",
      "normalized_text": "`brew install python3 && /opt/homebrew/bin/python3 -c 'import sqlite3; print(sqlite3.sqlite_version)'`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/IBM/mcp-context-forge#L2862",
          "evidence": "- `brew install python3 && /opt/homebrew/bin/python3 -c 'import sqlite3; print(sqlite3.sqlite_version)'`"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports a wide range of api protocols including",
      "normalized_text": "Supports a wide range of api protocols including",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L3",
          "evidence": "GoTestWAF is a tool for API and OWASP attack simulation that supports a wide range of API protocols including"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run gotestwaf](#other-options-to-run-gotestwaf)",
      "normalized_text": "Run gotestwaf](#other-options-to-run-gotestwaf)",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L15",
          "evidence": "* [Other options to run GoTestWAF](#other-options-to-run-gotestwaf)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generates malicious requests using encoded payloads placed in different parts of http requests: its body, headers,",
      "normalized_text": "Generates malicious requests using encoded payloads placed in different parts of http requests: its body, headers,",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L22",
          "evidence": "GoTestWAF generates malicious requests using encoded payloads placed in different parts of HTTP requests: its body, headers,"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow you to do an arbitrary http request",
      "normalized_text": "Allow you to do an arbitrary http request",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L73",
          "evidence": "The `RawRequest` placeholder will allow you to do an arbitrary HTTP request. The payload is substituted by replacing the string `{{payload}}` in the URL path, Headers or body. Fields of `RawRequest` placeholder:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "process involving the multiplication of payload amount by encoder and placeholder amounts",
      "normalized_text": "Process involving the multiplication of payload amount by encoder and placeholder amounts",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L114",
          "evidence": "Request generation is a three-step process involving the multiplication of payload amount by encoder and placeholder amounts."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "GoTestwaf supports all the popular operating systems (Linux, Windows, macOS), and can be built natively",
      "normalized_text": "Gotestwaf supports all the popular operating systems (linux, windows, macos), and can be built natively",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L123",
          "evidence": "* GoTestwaf supports all the popular operating systems (Linux, Windows, macOS), and can be built natively"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L123",
          "evidence": "* GoTestwaf supports all the popular operating systems (Linux, Windows, macOS), and can be built natively"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run gotestwaf natively,",
      "normalized_text": "Run gotestwaf natively,",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L124",
          "evidence": "if [Go](https://golang.org/doc/install) is installed in the system. If you want to run GoTestWaf natively,"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate pdf reports",
      "normalized_text": "Generate pdf reports",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L125",
          "evidence": "make sure you have the Chrome web browser to be able to generate PDF reports. In case you don't have Chrome,"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a report in html format",
      "normalized_text": "Create a report in html format",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L126",
          "evidence": "you can create a report in HTML format."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run --rm --network=\"host\" -it -v ${pwd}/reports:/app/reports -v ${pwd}/api",
      "normalized_text": "Run --rm --network=\"host\" -it -v ${pwd}/reports:/app/reports -v ${pwd}/api",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L145",
          "evidence": "docker run --rm --network=\"host\" -it -v ${PWD}/reports:/app/reports \\"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L154",
          "evidence": "docker run --rm --network=\"host\" -v ${PWD}/reports:/app/reports \\"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L163",
          "evidence": "docker run --rm --network=\"host\" -it -v ${PWD}/reports:/app/reports \\"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L307",
          "evidence": "docker run --rm --network=\"host\" -v ${PWD}/reports:/app/reports \\"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L339",
          "evidence": "docker run --rm --network=\"host\" -it -v ${PWD}/reports:/app/reports \\"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L455",
          "evidence": "docker run --rm --network=\"host\" -it -v ${PWD}/reports:/app/reports -v ${PWD}/api.yaml:/app/api.yaml wallarm/gotestwaf --wafName your_waf_name --url=https://example.com/v1 --openapiFile api.yaml"
        }
      ],
      "frequency": 6,
      "uniqueness_score": 0.16666666666666666
    },
    {
      "text": "enables interaction of docker containers running on 127",
      "normalized_text": "Enables interaction of docker containers running on 127",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L158",
          "evidence": "If the evaluated security tool is available externally, you can skip the option `--network=\"host\"`. This option enables interaction of Docker containers running on 127.0.0.1."
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L343",
          "evidence": "If the evaluated security tool is available externally, you can skip the option `--network=\"host\"`. This option enables interaction of Docker containers running on 127.0.0.1."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "perform the grpc tests you must have a working endpoint and use the --grpcport <port> cli option",
      "normalized_text": "Perform the grpc tests you must have a working endpoint and use the --grpcport <port> cli option",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L160",
          "evidence": "To perform the gRPC tests you must have a working endpoint and use the --grpcPort <port> cli option."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include \u2502 50",
      "normalized_text": "Include \u2502 50",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L229",
          "evidence": "\u2502 owasp      \u2502 ss-include                \u2502 50.00                \u2502 12                  \u2502 12                   \u2502 0                  \u2502 24          \u2502 0               \u2502"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the demo environment:",
      "normalized_text": "Run the demo environment:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L276",
          "evidence": "To run the demo environment:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs the modsecurity docker container on port 8080 with minimal configuration defined in the cloned file `",
      "normalized_text": "Runs the modsecurity docker container on port 8080 with minimal configuration defined in the cloned file `",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L291",
          "evidence": "Settings for running the ModSecurity Docker container are defined in the rule `modsec` of the cloned Makefile. It runs the ModSecurity Docker container on port 8080 with minimal configuration defined in the cloned file `./resources/default.conf.template` and the `PARANOIA` value set to 1."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build the gotestwaf docker image from the [dockerfile](",
      "normalized_text": "Build the gotestwaf docker image from the [dockerfile](",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L311",
          "evidence": "Build the GoTestWAF Docker image from the [Dockerfile](./Dockerfile) and run the"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L333",
          "evidence": "*   Clone this repository and build the GoTestWAF Docker image from the [Dockerfile](./Dockerfile), for example:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run gotestwaf by using the following options:",
      "normalized_text": "Run gotestwaf by using the following options:",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L331",
          "evidence": "In addition to running the GoTestWAF Docker image downloaded from Docker Hub, you can run GoTestWAF by using the following options:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build --force-rm -t gotestwaf",
      "normalized_text": "Build --force-rm -t gotestwaf",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L338",
          "evidence": "DOCKER_BUILDKIT=1 docker build --force-rm -t gotestwaf ."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run gotestwaf with [`go`](https://golang",
      "normalized_text": "Run gotestwaf with [`go`](https://golang",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L345",
          "evidence": "* Clone this repository and run GoTestWAF with [`go`](https://golang.org/doc/), for example:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build gotestwaf as the go module:",
      "normalized_text": "Build gotestwaf as the go module:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L353",
          "evidence": "*   Clone this repository and build GoTestWAF as the Go module:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build -mod vendor -o gotestwaf",
      "normalized_text": "Build -mod vendor -o gotestwaf",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L358",
          "evidence": "go build -mod vendor -o gotestwaf ./cmd"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "--reportFormat strings Export report in the following formats: none, json, html, pdf (default [pdf])",
      "normalized_text": "--reportformat strings export report in the following formats: none, json, html, pdf (default [pdf])",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L397",
          "evidence": "--reportFormat strings    Export report in the following formats: none, json, html, pdf (default [pdf])"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L397",
          "evidence": "--reportFormat strings    Export report in the following formats: none, json, html, pdf (default [pdf])"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "supports `time' package template format (default \"waf-evaluation-report-2006-january-02-15-04-05\")",
      "normalized_text": "Supports `time' package template format (default \"waf-evaluation-report-2006-january-02-15-04-05\")",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L398",
          "evidence": "--reportName string       Report file name. Supports `time' package template format (default \"waf-evaluation-report-2006-January-02-15-04-05\")"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports two http clients for performing requests, selectable via the `--httpclient` option",
      "normalized_text": "Supports two http clients for performing requests, selectable via the `--httpclient` option",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L413",
          "evidence": "GoTestWAF supports two HTTP clients for performing requests, selectable via the `--httpClient` option. The default client is the standard Golang HTTP client. The second option is Chrome, which can be used with the `--httpClient=chrome` CLI argument. Note that on Linux systems, you must add the `--cap-add=SYS_ADMIN` argument to the Docker arguments to run GoTestWAF with Chrome as the request performer."
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L413",
          "evidence": "GoTestWAF supports two HTTP clients for performing requests, selectable via the `--httpClient` option. The default client is the standard Golang HTTP client. The second option is Chrome, which can be used with the `--httpClient=chrome` CLI argument. Note that on Linux systems, you must add the `--cap-add=SYS_ADMIN` argument to the Docker arguments to run GoTestWAF with Chrome as the request performer."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run gotestwaf with chrome as the request performer",
      "normalized_text": "Run gotestwaf with chrome as the request performer",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L413",
          "evidence": "GoTestWAF supports two HTTP clients for performing requests, selectable via the `--httpClient` option. The default client is the standard Golang HTTP client. The second option is Chrome, which can be used with the `--httpClient=chrome` CLI argument. Note that on Linux systems, you must add the `--cap-add=SYS_ADMIN` argument to the Docker arguments to run GoTestWAF with Chrome as the request performer."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports sending malicious vectors through valid application requests",
      "normalized_text": "Supports sending malicious vectors through valid application requests",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L418",
          "evidence": "For better scanning, GTW supports sending malicious vectors through valid application requests. Instead of constructing requests that are simple in structure and send them to the URL specified at startup, GoTestWAF creates valid requests based on the application's API description in the OpenAPI 3.0 format."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "creates valid requests based on the application's api description in the openapi 3",
      "normalized_text": "Creates valid requests based on the application's api description in the openapi 3",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L418",
          "evidence": "For better scanning, GTW supports sending malicious vectors through valid application requests. Instead of constructing requests that are simple in structure and send them to the URL specified at startup, GoTestWAF creates valid requests based on the application's API description in the OpenAPI 3.0 format."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support urlpath placeholder)",
      "normalized_text": "Support urlpath placeholder)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L422",
          "evidence": "1. GoTestWAF loads an OpenAPI file and constructs request templates. All templates are then divided into groups based on what placeholders they support (e.g., if there is a string parameter in the request path, then such a request will be assigned to a group of requests that support URLPath placeholder)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows easy integration of additional test suites",
      "normalized_text": "Allows easy integration of additional test suites",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L460",
          "evidence": "GoTestWAF allows easy integration of additional test suites."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `make modsec_crs_regression_tests_convert`",
      "normalized_text": "Run `make modsec_crs_regression_tests_convert`",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L466",
          "evidence": "To convert the tests, run `make modsec_crs_regression_tests_convert`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build a container with the updated set of tests",
      "normalized_text": "Build a container with the updated set of tests",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L467",
          "evidence": "Then, build a container with the updated set of tests."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Other options to run GoTestWAF",
      "normalized_text": "Other options to run gotestwaf",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L15",
          "evidence": "* [Other options to run GoTestWAF](#other-options-to-run-gotestwaf)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Running with OWASP Core Rule Set regression testing suite",
      "normalized_text": "Running with owasp core rule set regression testing suite",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L17",
          "evidence": "* [Running with OWASP Core Rule Set regression testing suite](#running-with-owasp-core-rule-set-regression-testing-suite)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "If running GoTestWAF as the Docker container, please ensure you have installed and configured Docker,",
      "normalized_text": "If running gotestwaf as the docker container, please ensure you have installed and configured docker,",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L127",
          "evidence": "* If running GoTestWAF as the Docker container, please ensure you have [installed and configured Docker](https://docs.docker.com/get-docker/),"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "For GoTestWAF to be successfully started, please ensure the IP address of the machine running GoTestWAF is whitelisted",
      "normalized_text": "For gotestwaf to be successfully started, please ensure the ip address of the machine running gotestwaf is whitelisted",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L129",
          "evidence": "* For GoTestWAF to be successfully started, please ensure the IP address of the machine running GoTestWAF is whitelisted"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Clone this repository and build the GoTestWAF Docker image from the Dockerfile, for example:",
      "normalized_text": "Clone this repository and build the gotestwaf docker image from the dockerfile, for example:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L333",
          "evidence": "*   Clone this repository and build the GoTestWAF Docker image from the [Dockerfile](./Dockerfile), for example:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Clone this repository and run GoTestWAF with `go`, for example:",
      "normalized_text": "Clone this repository and run gotestwaf with `go`, for example:",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L345",
          "evidence": "* Clone this repository and run GoTestWAF with [`go`](https://golang.org/doc/), for example:"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L353",
          "evidence": "*   Clone this repository and build GoTestWAF as the Go module:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "--includePayloads If present, payloads will be included in HTML/PDF report",
      "normalized_text": "--includepayloads if present, payloads will be included in html/pdf report",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L383",
          "evidence": "--includePayloads         If present, payloads will be included in HTML/PDF report"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "--reportName string Report file name. Supports `time' package template format (default \"waf-evaluation-report-2006-January-02-15-04-05\")",
      "normalized_text": "--reportname string report file name. supports `time' package template format (default \"waf-evaluation-report-2006-ja...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L398",
          "evidence": "--reportName string       Report file name. Supports `time' package template format (default \"waf-evaluation-report-2006-January-02-15-04-05\")"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "--testSet string If set then only this test set's cases will be run",
      "normalized_text": "--testset string if set then only this test set's cases will be run",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L403",
          "evidence": "--testCase string         If set then only this test case will be run"
        },
        {
          "url": "https://github.com/wallarm/gotestwaf#L405",
          "evidence": "--testSet string          If set then only this test set's cases will be run"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "the following content-types are supported for the request body: `application/json`, `application/xml`, `application/x-www-form-urlencoded`, `text/plain`;",
      "normalized_text": "The following content-types are supported for the request body: `application/json`, `application/xml`, `application/x...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L432",
          "evidence": "* the following content-types are supported for the request body: `application/json`, `application/xml`, `application/x-www-form-urlencoded`, `text/plain`;"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "the following modifiers are supported for XML: `name`, `wrapped`, `attribute`, `prefix`, `namespace`;",
      "normalized_text": "The following modifiers are supported for xml: `name`, `wrapped`, `attribute`, `prefix`, `namespace`;",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L434",
          "evidence": "* the following modifiers are supported for XML: `name`, `wrapped`, `attribute`, `prefix`, `namespace`;"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "length limits for strings are supported through the `minLength` and `maxLength` parameters;",
      "normalized_text": "Length limits for strings are supported through the `minlength` and `maxlength` parameters;",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L436",
          "evidence": "* length limits for strings are supported through the `minLength` and `maxLength` parameters;"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "value restrictions for numbers are supported through `minimum`, `maximum`, `exclusiveMinimum` and `exclusiveMaximum`;",
      "normalized_text": "Value restrictions for numbers are supported through `minimum`, `maximum`, `exclusiveminimum` and `exclusivemaximum`;",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L438",
          "evidence": "* value restrictions for numbers are supported through `minimum`, `maximum`, `exclusiveMinimum` and `exclusiveMaximum`;"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "restrictions on the length of arrays through `minItems` and `maxItems` are supported;",
      "normalized_text": "Restrictions on the length of arrays through `minitems` and `maxitems` are supported;",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L440",
          "evidence": "* restrictions on the length of arrays through `minItems` and `maxItems` are supported;"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "combination of schemes via `oneOf`, `anyOf`, `allOf` is supported.",
      "normalized_text": "Combination of schemes via `oneof`, `anyof`, `allof` is supported.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/wallarm/gotestwaf#L442",
          "evidence": "* combination of schemes via `oneOf`, `anyOf`, `allOf` is supported."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Searching information about IP Address, ASN and Organization.",
      "normalized_text": "Searching information about ip address, asn and organization.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/j3ssie/metabigor#L34",
          "evidence": "- Searching information about IP Address, ASN and Organization."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Wrapper for running rustscan, masscan and nmap more efficient on IP/CIDR.",
      "normalized_text": "Wrapper for running rustscan, masscan and nmap more efficient on ip/cidr.",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/j3ssie/metabigor#L35",
          "evidence": "- Wrapper for running rustscan, masscan and nmap more efficient on IP/CIDR."
        },
        {
          "url": "https://github.com/j3ssie/metabigor#L35",
          "evidence": "- Wrapper for running rustscan, masscan and nmap more efficient on IP/CIDR."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "Finding more related domains of the target by applying various techniques (certificate, whois, Google Analytics, etc).",
      "normalized_text": "Finding more related domains of the target by applying various techniques (certificate, whois, google analytics, etc).",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/j3ssie/metabigor#L36",
          "evidence": "- Finding more related domains of the target by applying various techniques (certificate, whois, Google Analytics, etc)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Get Summary about IP address (powered by @thebl4ckturtle)",
      "normalized_text": "Get summary about ip address (powered by @thebl4ckturtle)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/j3ssie/metabigor#L37",
          "evidence": "- Get Summary about IP address (powered by [**@thebl4ckturtle**](https://github.com/theblackturtle))"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "building from sources",
      "normalized_text": "Building from sources",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/j3ssie/metabigor#L25",
          "evidence": "### Building from Source"
        },
        {
          "url": "https://github.com/blst-security/cherrybomb#L70",
          "evidence": "#### Building from Sources"
        },
        {
          "url": "https://github.com/openclarity/apiclarity#L149",
          "evidence": "### Building from source:"
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "run rustscan with ports",
      "normalized_text": "Run rustscan with ports",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/j3ssie/metabigor#L81",
          "evidence": "# Only run rustscan with full ports"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run rustscan with ports and nmap detail scan based on pre-scan data",
      "normalized_text": "Run rustscan with ports and nmap detail scan based on pre-scan data",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/j3ssie/metabigor#L84",
          "evidence": "# Only run nmap detail scan based on pre-scan data"
        },
        {
          "url": "https://github.com/j3ssie/metabigor#L90",
          "evidence": "# Run rustscan with full ports and nmap detail scan based on pre-scan data"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "integrate metabigor into your recon workflow",
      "normalized_text": "Integrate metabigor into your recon workflow",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/j3ssie/metabigor#L144",
          "evidence": "## Painless integrate Metabigor into your recon workflow?"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run --mount type=bind,source=[path to oas],destination=/home public",
      "normalized_text": "Run --mount type=bind,source=[path to oas],destination=/home public",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/blst-security/cherrybomb#L55",
          "evidence": "docker run --mount type=bind,source=[PATH TO OAS],destination=/home public.ecr.aws/blst-security/cherrybomb:latest cherrybomb -f /home/[OAS NAME] --api-key=[API-KEY]"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build cherrybomb from sources by cloning this repo, and building it using cargo",
      "normalized_text": "Build cherrybomb from sources by cloning this repo, and building it using cargo",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/blst-security/cherrybomb#L72",
          "evidence": "You can also build Cherrybomb from sources by cloning this repo, and building it using cargo."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "building it using cargo",
      "normalized_text": "Building it using cargo",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/blst-security/cherrybomb#L72",
          "evidence": "You can also build Cherrybomb from sources by cloning this repo, and building it using cargo."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build those from source too, you can change the following files:",
      "normalized_text": "Build those from source too, you can change the following files:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/blst-security/cherrybomb#L81",
          "evidence": "if you want build those from source too, you can change the following files:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow you to choose the type of check you want to use",
      "normalized_text": "Allow you to choose the type of check you want to use",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/blst-security/cherrybomb#L106",
          "evidence": "Profiles allow you to choose the type of check you want to use."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "info: only generates param and endpoint tables",
      "normalized_text": "Info: only generates param and endpoint tables",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/blst-security/cherrybomb#L108",
          "evidence": "- info: only generates param and endpoint tables"
        },
        {
          "url": "https://github.com/blst-security/cherrybomb#L108",
          "evidence": "- info: only generates param and endpoint tables"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "allows you to set the running profile, location of the oas file, the verbosity and ignore the tls error",
      "normalized_text": "Allows you to set the running profile, location of the oas file, the verbosity and ignore the tls error",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/blst-security/cherrybomb#L120",
          "evidence": "The config file allows you to set the running profile, location of the oas file, the verbosity and ignore the TLS error."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows you to override the server's url with an array of servers, and add security to the request [in development]",
      "normalized_text": "Allows you to override the server's url with an array of servers, and add security to the request [in development]",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/blst-security/cherrybomb#L122",
          "evidence": "Config also allows you to override the server's URL with an array of servers, and add security to the request [in development]."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate info table",
      "normalized_text": "Generate info table",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/blst-security/cherrybomb#L173",
          "evidence": "### Generate Info Table"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build cloudgraph providers](https://github",
      "normalized_text": "Build cloudgraph providers](https://github",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L31",
          "evidence": "\ud83d\udcb0 [Get paid to build CloudGraph providers](https://github.com/cloudgraphdev/cli/blob/main/CONTRIBUTING.md)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create systems to power our increasingly interconnected world",
      "normalized_text": "Create systems to power our increasingly interconnected world",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L94",
          "evidence": "AWS, Azure, and GPC have done a wonderful job of building solutions that let engineers like us create systems to power our increasingly interconnected world. Over the last 15 years, products such as EC2, S3, RDS, and Lambda have fundamentally changed how we think about computing, storage, and databasing."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "building solutions that let engineers like us create systems to power our increasingly interconnected world",
      "normalized_text": "Building solutions that let engineers like us create systems to power our increasingly interconnected world",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L94",
          "evidence": "AWS, Azure, and GPC have done a wonderful job of building solutions that let engineers like us create systems to power our increasingly interconnected world. Over the last 15 years, products such as EC2, S3, RDS, and Lambda have fundamentally changed how we think about computing, storage, and databasing."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create anything they need",
      "normalized_text": "Create anything they need",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L98",
          "evidence": "With the proliferation of Kubernetes and Serverless in the last 5 or so years, cloud services have become increasingly abstract on top of racks of physical servers. To end-users, everything on the cloud is just an API, so we don't necessarily need to know how Lambda Functions or EKS work under the hood to be able to use them for building applications. With a little documentation, API or console access, and a tutorial anyone can pretty much create anything they need."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "building applications",
      "normalized_text": "Building applications",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L98",
          "evidence": "With the proliferation of Kubernetes and Serverless in the last 5 or so years, cloud services have become increasingly abstract on top of racks of physical servers. To end-users, everything on the cloud is just an API, so we don't necessarily need to know how Lambda Functions or EKS work under the hood to be able to use them for building applications. With a little documentation, API or console access, and a tutorial anyone can pretty much create anything they need."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "process of provisioning new servers, databases, or filesystems can now be done in seconds with the click of a button or deployment of iac",
      "normalized_text": "Process of provisioning new servers, databases, or filesystems can now be done in seconds with the click of a button ...",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L102",
          "evidence": "These abstractions have led to massive improvements in the overall convenience and breadth of CSP service offerings. What was once a painstaking, time-consuming, and error-prone process of provisioning new servers, databases, or filesystems can now be done in seconds with just the click of a button or deployment of IAC. Since everything is just an API abstraction, when a CAP is ready to introduce a new \"product\" they simply need to expose a new API - yes, I'm of course simplifying slightly :)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "building substantial systems on a csp is likely using many, many different services",
      "normalized_text": "Building substantial systems on a csp is likely using many, many different services",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L106",
          "evidence": "Anyone familiar with the CSPs knows that service APIs are almost always split into modular namespaces that contain dozens, if not hundreds, of separate API methods for single resources. For example, the AWS EC2 service contains over 500 different API methods, with new ones added occasionally. Any company building substantial systems on a CSP is likely using many, many different services."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "building the actual services that power our businesses, not a lot of headway has been into simplifying the day-to-day ux of querying these hundreds of services in a sane manner",
      "normalized_text": "Building the actual services that power our businesses, not a lot of headway has been into simplifying the day-to-day...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L114",
          "evidence": "This means that AWS, Azure, and GCP can feel overwhelming quickly even to seasoned cloud architects. While the CSPs are fantastic at building the actual services that power our businesses, not a lot of headway has been into simplifying the day-to-day UX of querying these hundreds of services in a sane manner."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a standardized interface for querying many different types of aws resources",
      "normalized_text": "Create a standardized interface for querying many different types of aws resources",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L118",
          "evidence": "New solutions like the Cloud Control API for AWS have attempted to create a standardized interface for querying many different types of AWS resources. Unfortunately, the Cloud Control API's usage is severely limited, and users still need to know how to correctly query their data. This means more time spent reading documentation and understanding how services work and are related to one another."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allowing you to access deep insights across multiple providers effortlessly",
      "normalized_text": "Allowing you to access deep insights across multiple providers effortlessly",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L130",
          "evidence": "It is for these reasons that we built CloudGraph, the GraphQL API for everything cloud. CloudGraph extracts, normalizes, processes, and enriches your cloud data allowing you to access deep insights across multiple providers effortlessly. Check out our blog post [The GraphQL API for everything](https://www.autocloud.dev/blog/the-graphql-api-for-all-clouds) to learn more."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run and as such can never mutate your actual cloud infrastructure",
      "normalized_text": "Run and as such can never mutate your actual cloud infrastructure",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L142",
          "evidence": "Note that CloudGraph requires **READ ONLY** permissions to run and as such can **never** mutate your actual cloud infrastructure. Additionally, none of your cloud environment information is ever sent to or shared with CloudGraph, AutoCloud, or any other third parties."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows you to write graphql queries against your stored data",
      "normalized_text": "Allows you to write graphql queries against your stored data",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L146",
          "evidence": "Under the hood, CloudGraph reaches out to your cloud provider(s), sucks up all of the configuration data, processes it, and stores a copy of this data for you in [Dgraph](https://dgraph.io/). It then exposes an endpoint at `http://localhost:8997` that allows you to write GraphQL Queries against your stored data. These queries not only allow you do to anything that you would do with say, the AWS SDK/CLI, but they also allow you to run much more powerful queries as well. CloudGraph ships with pre-packaged GraphQL query tools including [GraphQL Playground](https://github.com/graphql/graphql-playground) and [Altair](https://github.com/altair-viz/altair) but you can also feel free to use your own. It also includes a schema visualization tool called [Voyager](https://github.com/APIs-guru/graphql-voyager) so you can understand relationships between entities."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow you do to anything that you would do with say, the aws sdk/cli, but they also allow you to run much more queries as well",
      "normalized_text": "Allow you do to anything that you would do with say, the aws sdk/cli, but they also allow you to run much more querie...",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L146",
          "evidence": "Under the hood, CloudGraph reaches out to your cloud provider(s), sucks up all of the configuration data, processes it, and stores a copy of this data for you in [Dgraph](https://dgraph.io/). It then exposes an endpoint at `http://localhost:8997` that allows you to write GraphQL Queries against your stored data. These queries not only allow you do to anything that you would do with say, the AWS SDK/CLI, but they also allow you to run much more powerful queries as well. CloudGraph ships with pre-packaged GraphQL query tools including [GraphQL Playground](https://github.com/graphql/graphql-playground) and [Altair](https://github.com/altair-viz/altair) but you can also feel free to use your own. It also includes a schema visualization tool called [Voyager](https://github.com/APIs-guru/graphql-voyager) so you can understand relationships between entities."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "includes a schema visualization tool called [voyager](https://github",
      "normalized_text": "Includes a schema visualization tool called [voyager](https://github",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L146",
          "evidence": "Under the hood, CloudGraph reaches out to your cloud provider(s), sucks up all of the configuration data, processes it, and stores a copy of this data for you in [Dgraph](https://dgraph.io/). It then exposes an endpoint at `http://localhost:8997` that allows you to write GraphQL Queries against your stored data. These queries not only allow you do to anything that you would do with say, the AWS SDK/CLI, but they also allow you to run much more powerful queries as well. CloudGraph ships with pre-packaged GraphQL query tools including [GraphQL Playground](https://github.com/graphql/graphql-playground) and [Altair](https://github.com/altair-viz/altair) but you can also feel free to use your own. It also includes a schema visualization tool called [Voyager](https://github.com/APIs-guru/graphql-voyager) so you can understand relationships between entities."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run much more queries as well",
      "normalized_text": "Run much more queries as well",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L146",
          "evidence": "Under the hood, CloudGraph reaches out to your cloud provider(s), sucks up all of the configuration data, processes it, and stores a copy of this data for you in [Dgraph](https://dgraph.io/). It then exposes an endpoint at `http://localhost:8997` that allows you to write GraphQL Queries against your stored data. These queries not only allow you do to anything that you would do with say, the AWS SDK/CLI, but they also allow you to run much more powerful queries as well. CloudGraph ships with pre-packaged GraphQL query tools including [GraphQL Playground](https://github.com/graphql/graphql-playground) and [Altair](https://github.com/altair-viz/altair) but you can also feel free to use your own. It also includes a schema visualization tool called [Voyager](https://github.com/APIs-guru/graphql-voyager) so you can understand relationships between entities."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports aws, azure, gcp, k8s, and tencent (several others coming soon)",
      "normalized_text": "Supports aws, azure, gcp, k8s, and tencent (several others coming soon)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L152",
          "evidence": "CloudGraph currently supports AWS, Azure, GCP, K8s, and Tencent (several others coming soon). CloudGraph needs read permissions in order to ingest your data. To keep things easy you can use the same permissions that we use internally when we run CloudGraph to power AutoCloud. Here are the auth guides and details for how to generate credentials for each provider (feel free to leave out AutoCloud specific configuration):"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate credentials for each provider (feel free to leave out autocloud specific configuration):",
      "normalized_text": "Generate credentials for each provider (feel free to leave out autocloud specific configuration):",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L152",
          "evidence": "CloudGraph currently supports AWS, Azure, GCP, K8s, and Tencent (several others coming soon). CloudGraph needs read permissions in order to ingest your data. To keep things easy you can use the same permissions that we use internally when we run CloudGraph to power AutoCloud. Here are the auth guides and details for how to generate credentials for each provider (feel free to leave out AutoCloud specific configuration):"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run cloudgraph to power autocloud",
      "normalized_text": "Run cloudgraph to power autocloud",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L152",
          "evidence": "CloudGraph currently supports AWS, Azure, GCP, K8s, and Tencent (several others coming soon). CloudGraph needs read permissions in order to ingest your data. To keep things easy you can use the same permissions that we use internally when we run CloudGraph to power AutoCloud. Here are the auth guides and details for how to generate credentials for each provider (feel free to leave out AutoCloud specific configuration):"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run -it -p 8995:5080 -p 8996:6080 -p 8997:8080 -p 8998:9080 -p 8999:8000",
      "normalized_text": "Run -it -p 8995:5080 -p 8996:6080 -p 8997:8080 -p 8998:9080 -p 8999:8000",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L274",
          "evidence": "docker run -it -p 8995:5080 -p 8996:6080 -p 8997:8080 -p 8998:9080 -p 8999:8000"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run queries, mutations, and visualizations on all of your cloud infrastructure",
      "normalized_text": "Run queries, mutations, and visualizations on all of your cloud infrastructure",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L296",
          "evidence": "That's it, you are all set to start querying! The query tool you selected during the `cg init` command will then be opened in your preferred browser to run queries, mutations, and visualizations on all of your cloud infrastructure! Note that if you installed any policy packs, such as AWS CIS 1.2, policy pack insight data will be automatically added to your cloud data!"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the `cg load` command and select the version of your data you wish to inspect like so:",
      "normalized_text": "Run the `cg load` command and select the version of your data you wish to inspect like so:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L334",
          "evidence": "CloudGraph stores as many previous versions of your data as you configured in the `cg init` command. In order to load and query a previous version of your data simply run the `cg load` command and select the version of your data you wish to inspect like so:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run to get the `id` and `arn` of a single `ec2 instance`",
      "normalized_text": "Run to get the `id` and `arn` of a single `ec2 instance`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L376",
          "evidence": "To explain how CloudGraph works consider the following query that you can run to get the `ID` and `ARN` of a single `EC2 instance`. Note that for the purposes of these examples we will just request the `IDs` and `ARNs` of AWS resources to keep things terse, but you can query whatever attributes you want:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include the `ebs volume` that is the boot disk for each `ec2 instance`:",
      "normalized_text": "Include the `ebs volume` that is the boot disk for each `ec2 instance`:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L511",
          "evidence": "Do the same thing but also include the `EBS Volume` that is the boot disk for each `EC2 instance`:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include the `sgs` and `albs` for each `ec2`",
      "normalized_text": "Include the `sgs` and `albs` for each `ec2`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L534",
          "evidence": "Do the same thing, but also include the `SGs` and `ALBs` for each `EC2`. For the `ALBs`, get the `EC2s` that they are connected to along with the `ID` and `ARN` of each found `EC2 instance` (i.e. a circular query)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "execute your configured policies",
      "normalized_text": "Execute your configured policies",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L611",
          "evidence": "CloudGraph Policy Packs guarantee compliance across existing infrastructure for a given cloud provider. Packs are based on sets of rules/benchmarks provided by security organizations like the Center for Internet Security with the objective of keeping your infrastructure up-to-date with industry security standards. Once you have added a policy pack using the `cg policy add` command (i.e. `cg policy add aws-cis-1.2.0`) each time you run a scan CloudGraph will _automatically_ execute your configured policies. Those results will be stored at Dgraph and linked to your existing resources, making it easy to query your compliance results alongside your resources."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run a scan cloudgraph will _automatically_ execute your configured policies",
      "normalized_text": "Run a scan cloudgraph will _automatically_ execute your configured policies",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L611",
          "evidence": "CloudGraph Policy Packs guarantee compliance across existing infrastructure for a given cloud provider. Packs are based on sets of rules/benchmarks provided by security organizations like the Center for Internet Security with the objective of keeping your infrastructure up-to-date with industry security standards. Once you have added a policy pack using the `cg policy add` command (i.e. `cg policy add aws-cis-1.2.0`) each time you run a scan CloudGraph will _automatically_ execute your configured policies. Those results will be stored at Dgraph and linked to your existing resources, making it easy to query your compliance results alongside your resources."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support nested filtering based on child attributes",
      "normalized_text": "Support nested filtering based on child attributes",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1237",
          "evidence": "Today, the biggest limitation with CloudGraph and our query abilities is we don't support nested filtering based on child attributes. So for example, as cool as it would be to do the following, it's just not possible yet:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import collections of queries",
      "normalized_text": "Import collections of queries",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1294",
          "evidence": "Altair is another great GraphQL query tool that packs a ton of [features](https://github.com/altair-graphql/altair#features) for power users. Do things like autocomplete queries, dynamically add fragments, and export/import collections of queries. To access Altair, either select it as your preferred query tool in the `init` command OR visit `/altair` in the server CG spins up."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run cloudgraph locally, or you can deploy it to your cloud provider of choice",
      "normalized_text": "Run cloudgraph locally, or you can deploy it to your cloud provider of choice",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1338",
          "evidence": "You can either run CloudGraph locally, or you can deploy it to your cloud provider of choice. Terraform modules and guides for cloud deployments are coming soon!"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a new issue](https://github",
      "normalized_text": "Create a new issue](https://github",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1364",
          "evidence": "- \u26a0\ufe0f unable to make some connections - This warning in the scan report appears when CG tries to make a connection between two resources and is unable to do so. If you see this using one of CG's offically supported providers, please [create a new issue](https://github.com/cloudgraphdev/cli/issues) so we can solve it. The most common cause of this error is a bug in the underlying provider's resource connection logic."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Manager failed to install plugin for {provider} - This error occurs when CG's plugin manager can not find the provider module you want to use. The manager searches the public NPM registry for the provider module. For offically supported providers, pass the provider name `CG init aws`. For community supported providers, you must pass the namespace as well `CG init @{providerNamespace}/{provider}`",
      "normalized_text": "Manager failed to install plugin for {provider} - this error occurs when cg's plugin manager can not find the provide...",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1370",
          "evidence": "- Manager failed to install plugin for {provider} - This error occurs when CG's plugin manager can not find the provider module you want to use. The manager searches the public NPM registry for the provider module. For offically supported providers, just pass the provider name `CG init aws`. For community supported providers, you must pass the namespace as well `CG init @{providerNamespace}/{provider}`"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1370",
          "evidence": "- Manager failed to install plugin for {provider} - This error occurs when CG's plugin manager can not find the provider module you want to use. The manager searches the public NPM registry for the provider module. For offically supported providers, just pass the provider name `CG init aws`. For community supported providers, you must pass the namespace as well `CG init @{providerNamespace}/{provider}`"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "-n, --nested-commands Include all nested commands in the output.",
      "normalized_text": "-n, --nested-commands include all nested commands in the output.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1410",
          "evidence": "-n, --nested-commands  Include all nested commands in the output."
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1410",
          "evidence": "-n, --nested-commands  Include all nested commands in the output."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "execute during scan",
      "normalized_text": "Execute during scan",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1428",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1465",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1497",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1531",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1560",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1596",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1630",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1667",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1709",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1744",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1773",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1809",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1843",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1880",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1922",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1957",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1995",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L2049",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        }
      ],
      "frequency": 18,
      "uniqueness_score": 0.05555555555555555
    },
    {
      "text": "manage policy pack modules, run $ cg policy for more info",
      "normalized_text": "Manage policy pack modules, run $ cg policy for more info",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1523",
          "evidence": "Commands to manage policy pack modules, run $ cg policy for more info."
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1545",
          "evidence": "Commands to manage policy pack modules, run $ cg policy for more info."
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1736",
          "evidence": "Commands to manage provider modules, run $ cg provider for more info."
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1758",
          "evidence": "Commands to manage provider modules, run $ cg provider for more info."
        }
      ],
      "frequency": 4,
      "uniqueness_score": 0.25
    },
    {
      "text": "run $ cg provider for more info",
      "normalized_text": "Run $ cg provider for more info",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1523",
          "evidence": "Commands to manage policy pack modules, run $ cg policy for more info."
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1545",
          "evidence": "Commands to manage policy pack modules, run $ cg policy for more info."
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1736",
          "evidence": "Commands to manage provider modules, run $ cg provider for more info."
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1758",
          "evidence": "Commands to manage provider modules, run $ cg provider for more info."
        }
      ],
      "frequency": 4,
      "uniqueness_score": 0.25
    },
    {
      "text": "Automatically generated documentation and query validation - know if your query is valid before you send it",
      "normalized_text": "Automatically generated documentation and query validation - know if your query is valid before you send it",
      "category": "Documentation",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L16",
          "evidence": "- Automatically generated documentation and query validation - know if your query is valid before you send it!"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Supported Services",
      "normalized_text": "Supported services",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L61",
          "evidence": "* [Supported Services](#supported-services)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\u26a0\ufe0f unable to make some connections - This warning in the scan report appears when CG tries to make a connection between two resources and is unable to do so. If you see this using one of CG's offically supported providers, please create a new issue so we can solve it. The most common cause of this error is a bug in the underlying provider's resource connection logic.",
      "normalized_text": "\u26a0\ufe0f unable to make some connections - this warning in the scan report appears when cg tries to make a connection betwe...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1364",
          "evidence": "- \u26a0\ufe0f unable to make some connections - This warning in the scan report appears when CG tries to make a connection between two resources and is unable to do so. If you see this using one of CG's offically supported providers, please [create a new issue](https://github.com/cloudgraphdev/cli/issues) so we can solve it. The most common cause of this error is a bug in the underlying provider's resource connection logic."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\ud83d\udeab unable to store data in Dgraph - This error in the scan report appears when CG tries to insert some cloud provider data into the graph DB and it fails. Any services with this error will be unable to be queried in the GraphQL query tool. This usually happens when CG is unable to grab required data (such as an arn) for a resource due to an error when calling the provider SDK, commonly due to a lack of authorization.",
      "normalized_text": "\ud83d\udeab unable to store data in dgraph - this error in the scan report appears when cg tries to insert some cloud provider ...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1366",
          "evidence": "- \ud83d\udeab unable to store data in Dgraph - This error in the scan report appears when CG tries to insert some cloud provider data into the graph DB and it fails. Any services with this error will be unable to be queried in the GraphQL query tool. This usually happens when CG is unable to grab required data (such as an arn) for a resource due to an error when calling the provider SDK, commonly due to a lack of authorization."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Provider {name}@${version} requires cli version {version} but cli version is ${version} - This warning means you have incompatible versions of CG and the provider you are trying to use. Try updating CG `npm install -g @cloudgraphdev/cli` and the provider module `cg provider update` so both are at the latest version. You can also check the proivder's `pacakge.json` to see what versions of CG support it.",
      "normalized_text": "Provider {name}@${version} requires cli version {version} but cli version is ${version} - this warning means you have...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1368",
          "evidence": "- Provider {name}@${version} requires cli version {version} but cli version is ${version} - This warning means you have incompatible versions of CG and the provider you are trying to use. Try updating CG `npm install -g @cloudgraphdev/cli` and the provider module `cg provider update` so both are at the latest version. You can also check the proivder's `pacakge.json` to see what versions of CG support it."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "[`cg policy install [PROVIDER]`](#cg-policy-install-provider)",
      "normalized_text": "[`cg policy install [provider]`](#cg-policy-install-provider)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1378",
          "evidence": "* [`cg init [PROVIDER]`](#cg-init-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1379",
          "evidence": "* [`cg launch [PROVIDER]`](#cg-launch-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1380",
          "evidence": "* [`cg load [PROVIDER]`](#cg-load-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1381",
          "evidence": "* [`cg policy [PROVIDER]`](#cg-policy-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1383",
          "evidence": "* [`cg policy install [PROVIDER]`](#cg-policy-install-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1384",
          "evidence": "* [`cg policy list [PROVIDER]`](#cg-policy-list-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1387",
          "evidence": "* [`cg provider [PROVIDER]`](#cg-provider-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1390",
          "evidence": "* [`cg provider list [PROVIDER]`](#cg-provider-list-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1393",
          "evidence": "* [`cg scan [PROVIDER]`](#cg-scan-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1394",
          "evidence": "* [`cg serve [PROVIDER]`](#cg-serve-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1395",
          "evidence": "* [`cg teardown [PROVIDER]`](#cg-teardown-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1396",
          "evidence": "* [`cg update [PROVIDER]`](#cg-update-provider)"
        }
      ],
      "frequency": 12,
      "uniqueness_score": 0.08333333333333333
    },
    {
      "text": "[`cg policy remove [PROVIDER]`](#cg-policy-remove-provider)",
      "normalized_text": "[`cg policy remove [provider]`](#cg-policy-remove-provider)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1382",
          "evidence": "* [`cg policy add [PROVIDER]`](#cg-policy-add-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1385",
          "evidence": "* [`cg policy remove [PROVIDER]`](#cg-policy-remove-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1386",
          "evidence": "* [`cg policy update [PROVIDER]`](#cg-policy-update-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1388",
          "evidence": "* [`cg provider add [PROVIDER]`](#cg-provider-add-provider)"
        }
      ],
      "frequency": 4,
      "uniqueness_score": 0.25
    },
    {
      "text": "[`cg provider install [PROVIDER]`](#cg-provider-install-provider)",
      "normalized_text": "[`cg provider install [provider]`](#cg-provider-install-provider)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1389",
          "evidence": "* [`cg provider install [PROVIDER]`](#cg-provider-install-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1391",
          "evidence": "* [`cg provider remove [PROVIDER]`](#cg-provider-remove-provider)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1392",
          "evidence": "* [`cg provider update [PROVIDER]`](#cg-provider-update-provider)"
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "-P, --policies=<value> Policy Packs to execute during scan",
      "normalized_text": "-p, --policies=<value> policy packs to execute during scan",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1428",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1465",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1497",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1531",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1560",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1596",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1630",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1667",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1709",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1744",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1773",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1809",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1843",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1880",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1922",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1957",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1995",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L2049",
          "evidence": "-P, --policies=<value>       Policy Packs to execute during scan"
        }
      ],
      "frequency": 18,
      "uniqueness_score": 0.05555555555555555
    },
    {
      "text": "-d, --dgraph=<value> Set where dgraph is running (default localhost:8997)",
      "normalized_text": "-d, --dgraph=<value> set where dgraph is running (default localhost:8997)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1429",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1466",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1498",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1532",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1561",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1597",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1631",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1668",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1710",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1745",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1774",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1810",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1844",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1881",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1923",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1958",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1996",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L2050",
          "evidence": "-d, --dgraph=<value>         Set where dgraph is running (default localhost:8997)"
        }
      ],
      "frequency": 18,
      "uniqueness_score": 0.05555555555555555
    },
    {
      "text": "-s, --storage=<option> Select a storage engine to use. Currently only supports Dgraph",
      "normalized_text": "-s, --storage=<option> select a storage engine to use. currently only supports dgraph",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1435",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1471",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1503",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1537",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1566",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1602",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1636",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1673",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1715",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1750",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1779",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1815",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1849",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1886",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1928",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1963",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L2001",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L2055",
          "evidence": "-s, --storage=<option>       Select a storage engine to use. Currently only supports Dgraph"
        }
      ],
      "frequency": 18,
      "uniqueness_score": 0.05555555555555555
    },
    {
      "text": "--no-save Set to not alter lock file, delete plugin",
      "normalized_text": "--no-save set to not alter lock file, delete plugin",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/cloudgraphdev/cli#L1570",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1606",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1640",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1677",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1719",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1783",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1819",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1853",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1890",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L1932",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        },
        {
          "url": "https://github.com/cloudgraphdev/cli#L2059",
          "evidence": "--no-save                    Set to not alter lock file, just delete plugin"
        }
      ],
      "frequency": 11,
      "uniqueness_score": 0.09090909090909091
    },
    {
      "text": "Fuzzing Techniques: Leverage mutation-based, generation-based, and intelligent fuzzing.",
      "normalized_text": "Fuzzing techniques: leverage mutation-based, generation-based, and intelligent fuzzing.",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L135",
          "evidence": "- **Comprehensive Fuzzing Techniques**: Leverage mutation-based, generation-based, and intelligent fuzzing."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Built-in Input Generation: Generate valid and invalid inputs for exhaustive testing.",
      "normalized_text": "Built-in input generation: generate valid and invalid inputs for exhaustive testing.",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L136",
          "evidence": "- **Built-in Input Generation**: Generate valid and invalid inputs for exhaustive testing."
        },
        {
          "url": "https://github.com/cyberark/FuzzyAI#L136",
          "evidence": "- **Built-in Input Generation**: Generate valid and invalid inputs for exhaustive testing."
        },
        {
          "url": "https://github.com/cyberark/FuzzyAI#L136",
          "evidence": "- **Built-in Input Generation**: Generate valid and invalid inputs for exhaustive testing."
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "Seamless Integration: incorporate into your development and testing workflows.",
      "normalized_text": "Seamless integration: incorporate into your development and testing workflows.",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L137",
          "evidence": "- **Seamless Integration**: Easily incorporate into your development and testing workflows."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Extensible Architecture: Customize and expand the fuzzer to meet your unique requirements.",
      "normalized_text": "Extensible architecture: customize and expand the fuzzer to meet your unique requirements.",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L138",
          "evidence": "- **Extensible Architecture**: Customize and expand the fuzzer to meet your unique requirements."
        },
        {
          "url": "https://github.com/cyberark/FuzzyAI#L138",
          "evidence": "- **Extensible Architecture**: Customize and expand the fuzzer to meet your unique requirements."
        },
        {
          "url": "https://github.com/cyberark/FuzzyAI#L138",
          "evidence": "- **Extensible Architecture**: Customize and expand the fuzzer to meet your unique requirements."
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "run pip install -e",
      "normalized_text": "Run pip install -e",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L48",
          "evidence": "poetry run pip install -e ."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run fuzzyai fuzz -h",
      "normalized_text": "Run fuzzyai fuzz -h",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L53",
          "evidence": "poetry run fuzzyai fuzz -h"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the web ui (make sure you completed either of the installation steps from above):",
      "normalized_text": "Run the web ui (make sure you completed either of the installation steps from above):",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L67",
          "evidence": "1. Run the Web UI (make sure you completed either of the installation steps from above):"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run fuzzyai webui",
      "normalized_text": "Run fuzzyai webui",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L69",
          "evidence": "poetry run fuzzyai webui"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configures the fuzzer to use the `gpt-4` model for classifying outputs",
      "normalized_text": "Configures the fuzzer to use the `gpt-4` model for classifying outputs",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L118",
          "evidence": "Configures the fuzzer to use the `gpt-4` model for classifying outputs. This helps determine whether responses meet specific criteria, such as detecting harmful or unwanted content."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configures the rest provider with the following api endpoint details:",
      "normalized_text": "Configures the rest provider with the following api endpoint details:",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L124",
          "evidence": "Configures the REST provider with the following API endpoint details:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build a bomb\"`**:",
      "normalized_text": "Build a bomb\"`**:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L129",
          "evidence": "- **`-t \"How to build a bomb\"`**:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports various models across top providers, including:",
      "normalized_text": "Supports various models across top providers, including:",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L141",
          "evidence": "FuzzyAI supports various models across top providers, including:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support for newer models",
      "normalized_text": "Support for newer models",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L154",
          "evidence": "## Adding support for newer models"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support for additional models by following our <a href=\"https://github",
      "normalized_text": "Support for additional models by following our <a href=\"https://github",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L155",
          "evidence": "Easily add support for additional models by following our <a href=\"https://github.com/cyberark/FuzzyAI/wiki/DIY#adding-support-for-new-models\">DIY guide</a>."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "automates adversarial prompt generation by iteratively refining prompts with two llms | [arxiv:2310",
      "normalized_text": "Automates adversarial prompt generation by iteratively refining prompts with two llms | [arxiv:2310",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L164",
          "evidence": "| PAIR (Prompt Automatic Iterative Refinement) | Automates adversarial prompt generation by iteratively refining prompts with two LLMs                       | [arXiv:2310.08419](https://arxiv.org/pdf/2310.08419)                            |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allowing it to \"do anything now\"",
      "normalized_text": "Allowing it to \"do anything now\"",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L169",
          "evidence": "| DAN (Do Anything Now)                        | Promotes the LLM to adopt an unrestricted persona that ignores standard content filters, allowing it to \"Do Anything Now\".                                                  | [GitHub Repo](https://github.com/0xk1h0/ChatGPT_DAN)                            |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "builds semantic networks of \"actors\" to subtly guide conversations toward harmful targets while concealing malicious intent",
      "normalized_text": "Builds semantic networks of \"actors\" to subtly guide conversations toward harmful targets while concealing malicious ...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L172",
          "evidence": "| ActorAttack                                  | Inspired by actor-network theory, it builds semantic networks of \"actors\" to subtly guide conversations toward harmful targets while concealing malicious intent.           | [arxiv 2410.10700](https://arxiv.org/pdf/2410.10700)                                                                            |                                                                                                                                     |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable ethical, legal use\u2014potentially leading to a jailbreak",
      "normalized_text": "Enable ethical, legal use\u2014potentially leading to a jailbreak",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L176",
          "evidence": "| History/Academic framing                             | Framing sensitive technical data as scholarly or historical research to enable ethical, legal use\u2014potentially leading to a jailbreak.                                                                                           |                                                                                 |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`-t \"How to build a bomb\"`:",
      "normalized_text": "`-t \"how to build a bomb\"`:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L107",
          "evidence": "-t \"How to build a bomb\""
        },
        {
          "url": "https://github.com/cyberark/FuzzyAI#L129",
          "evidence": "- **`-t \"How to build a bomb\"`**:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "Some classifiers do more than evaluate a single output. For example, the cosine-similarity classifier compares two outputs by measuring the angle between them, while a 'harmfulness' classifier checks whether a given output is harmful. As a result, not all classifiers are compatible with the attack methods we've implemented, as those methods are designed for single-output classifiers.",
      "normalized_text": "Some classifiers do more than evaluate a single output. for example, the cosine-similarity classifier compares two ou...",
      "category": "Documentation",
      "sources": [
        {
          "url": "https://github.com/cyberark/FuzzyAI#L195",
          "evidence": "* Some classifiers do more than just evaluate a single output. For example, the cosine-similarity classifier compares two outputs by measuring the angle between them, while a 'harmfulness' classifier checks whether a given output is harmful. As a result, not all classifiers are compatible with the attack methods we've implemented, as those methods are designed for single-output classifiers."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide ui solution for gem",
      "normalized_text": "Provide ui solution for gem",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/Fuzzapi/fuzzapi#L3",
          "evidence": "Fuzzapi is rails application which uses API_Fuzzer and provide UI solution for gem."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "creates tables, migrations etc",
      "normalized_text": "Creates tables, migrations etc",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/Fuzzapi/fuzzapi#L24",
          "evidence": "5. `rake db:migrate` to creates tables, migrations etc."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the server and run `export redis_url=redis://127",
      "normalized_text": "Run the server and run `export redis_url=redis://127",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/Fuzzapi/fuzzapi#L26",
          "evidence": "6. `rails s` to run the server and run `export REDIS_URL=redis://127.0.0.1:6379/0 && bundle exec sidekiq` to run sidekiq."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export redis_url=redis://127",
      "normalized_text": "Export redis_url=redis://127",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/Fuzzapi/fuzzapi#L26",
          "evidence": "6. `rails s` to run the server and run `export REDIS_URL=redis://127.0.0.1:6379/0 && bundle exec sidekiq` to run sidekiq."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build the image locally",
      "normalized_text": "Build the image locally",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/Fuzzapi/fuzzapi#L38",
          "evidence": "4. Run `docker-compose build` to build the image locally."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `docker-compose build` to build the image locally",
      "normalized_text": "Run `docker-compose build` to build the image locally",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/Fuzzapi/fuzzapi#L38",
          "evidence": "4. Run `docker-compose build` to build the image locally."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `docker-compose up` to run the server",
      "normalized_text": "Run `docker-compose up` to run the server",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/Fuzzapi/fuzzapi#L40",
          "evidence": "5. Run `docker-compose up` to run the server."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support will be provided",
      "normalized_text": "Support will be provided",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L4",
          "evidence": "> While the repository will remain available for reference, no further updates, bug fixes, or support will be provided."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run *burp-rest-api*",
      "normalized_text": "Run *burp-rest-api*",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L16",
          "evidence": "3) Using **Java 21**, run *burp-rest-api*"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run this software on x86",
      "normalized_text": "Run this software on x86",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L30",
          "evidence": "* The standalone Burp Suite PRO JAR for ARM64 doesn't seem to contain the Burp Browser, hence spidering and scanning won't work. We would highly recommend to run this software on x86"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support and limitations\" section",
      "normalized_text": "Support and limitations\" section",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L32",
          "evidence": "### Burp Suite Support and Limitations"
        },
        {
          "url": "https://github.com/vmware/burp-rest-api#L96",
          "evidence": "[here](https://portswigger.net/burp/help/suite_burp_projects.html) and [here](https://portswigger.net/blog/introducing-burp-projects). For scanner settings, please refer to the \"Burp Suite Support and Limitations\" section."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "supports both the legacy burp suite professional v1",
      "normalized_text": "Supports both the legacy burp suite professional v1",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L34",
          "evidence": "**burp-rest-api** supports both the legacy Burp Suite Professional v1.7 and the newer Burp Suite Professional v2025.x. Since this project relies on [Burp Extender API](https://portswigger.net/burp/extender), the behaviour of certain functionalities might be slighlty different depending on the version of Burp. For example, the [Burp Suite Scanner configuration in v2025.x is no longer customizable](https://forum.portswigger.net/thread/scan-configuration-80c07e6d3e1080058)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure the run mode and port number",
      "normalized_text": "Configure the run mode and port number",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L67",
          "evidence": "The following command line arguments are used only by the extension to configure the run mode and port number."
        },
        {
          "url": "https://github.com/vmware/burp-rest-api#L67",
          "evidence": "The following command line arguments are used only by the extension to configure the run mode and port number."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "enables api key authentication to protect apis at /burp/*",
      "normalized_text": "Enables api key authentication to protect apis at /burp/*",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L79",
          "evidence": "`--apikey=<customApiKey>` : Enables API key authentication to protect APIs at **/burp/***. The customApiKey, if passed as an argument, must be included in every HTTP request as an additional header: **\"API-KEY: <customApiKey\\>\"**."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs burp suite in headless",
      "normalized_text": "Runs burp suite in headless",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L81",
          "evidence": "`--headless.mode=<true/false>` : When set to false, runs Burp Suite in UI mode. Otherwise runs Burp Suite in headless"
        },
        {
          "url": "https://github.com/vmware/burp-rest-api#L81",
          "evidence": "`--headless.mode=<true/false>` : When set to false, runs Burp Suite in UI mode. Otherwise runs Burp Suite in headless"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "building the project",
      "normalized_text": "Building the project",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L146",
          "evidence": "2. The project can be run by directly launching the JAR created from building the project"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run by directly launching the jar created from building the project",
      "normalized_text": "Run by directly launching the jar created from building the project",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L146",
          "evidence": "2. The project can be run by directly launching the JAR created from building the project"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a `lib` folder under the project directory and place the burp suite jar file into it and rename it to \"burpsuite_pro",
      "normalized_text": "Create a `lib` folder under the project directory and place the burp suite jar file into it and rename it to \"burpsui...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L147",
          "evidence": "3. Create a `lib` folder under the project directory and place the Burp Suite JAR file into it and rename it to \"burpsuite_pro.jar\" in order to run the integration tests"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the integration tests",
      "normalized_text": "Run the integration tests",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L147",
          "evidence": "3. Create a `lib` folder under the project directory and place the Burp Suite JAR file into it and rename it to \"burpsuite_pro.jar\" in order to run the integration tests"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the extension on recent (jre > 9) versions of the jvm, use the `burp-rest-api-devel",
      "normalized_text": "Run the extension on recent (jre > 9) versions of the jvm, use the `burp-rest-api-devel",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L154",
          "evidence": "If you want to run the extension on recent (JRE > 9) versions of the JVM, use the `burp-rest-api-devel.{sh,bat}` launcher script after copying *burpsuite_pro.jar* and the *burp-rest-api.jar* in the same directory of the script."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "The standalone Burp Suite PRO JAR for ARM64 doesn't seem to contain the Burp Browser, hence spidering and scanning won't work. We would highly recommend to run this software on x86",
      "normalized_text": "The standalone burp suite pro jar for arm64 doesn't seem to contain the burp browser, hence spidering and scanning wo...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L30",
          "evidence": "* The standalone Burp Suite PRO JAR for ARM64 doesn't seem to contain the Burp Browser, hence spidering and scanning won't work. We would highly recommend to run this software on x86"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*burp-rest-api** supports both the legacy Burp Suite Professional v1.7 and the newer Burp Suite Professional v2025.x. Since this project relies on Burp Extender API, the behaviour of certain functionalities might be slighlty different depending on the version of Burp. For example, the Burp Suite Scanner configuration in v2025.x is no longer customizable.",
      "normalized_text": "*burp-rest-api** supports both the legacy burp suite professional v1.7 and the newer burp suite professional v2025.x....",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/vmware/burp-rest-api#L34",
          "evidence": "**burp-rest-api** supports both the legacy Burp Suite Professional v1.7 and the newer Burp Suite Professional v2025.x. Since this project relies on [Burp Extender API](https://portswigger.net/burp/extender), the behaviour of certain functionalities might be slighlty different depending on the version of Burp. For example, the [Burp Suite Scanner configuration in v2025.x is no longer customizable](https://forum.portswigger.net/thread/scan-configuration-80c07e6d3e1080058)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "performs a set of security analysis to discover all potential security problems with detected apis",
      "normalized_text": "Performs a set of security analysis to discover all potential security problems with detected apis",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L8",
          "evidence": "- Captures all API traffic in a given environment and performs a set of security analysis to discover all potential security problems with detected APIs"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows to add new functionalities",
      "normalized_text": "Allows to add new functionalities",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L15",
          "evidence": "APIClarity is structured in a modular architecture, which allows to easily add new functionalities."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "analyzes path, headers and body of api requests and responses to discover potential security issues, such as weak authentications, exposure of sensitive information, potential broken object level authorizations (bola) etc",
      "normalized_text": "Analyzes path, headers and body of api requests and responses to discover potential security issues, such as weak aut...",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L23",
          "evidence": "- [**Trace Analyzer**](./backend/pkg/modules/internal/traceanalyzer/README.md) This module analyzes path, headers and body of API requests and responses to discover potential security issues, such as weak authentications, exposure of sensitive information, potential Broken Object Level Authorizations (BOLA) etc."
        },
        {
          "url": "https://github.com/openclarity/apiclarity#L23",
          "evidence": "- [**Trace Analyzer**](./backend/pkg/modules/internal/traceanalyzer/README.md) This module analyzes path, headers and body of API requests and responses to discover potential security issues, such as weak authentications, exposure of sensitive information, potential Broken Object Level Authorizations (BOLA) etc."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "build an authorization model that captures what clients are supposed to be authorized to make the various api calls",
      "normalized_text": "Build an authorization model that captures what clients are supposed to be authorized to make the various api calls",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L24",
          "evidence": "- [**BFLA Detector**](./backend/pkg/modules/internal/bfla/README.md) This module detects potential Broken Function Level Authorization. In particular it observes the API interactions and build an authorization model that captures what clients are supposed to be authorized to make the various API calls. Based on such authorization model it then signals violations which may represent potential issues in the API authorization procedures."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports integrating with the following traffic sources",
      "normalized_text": "Supports integrating with the following traffic sources",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L35",
          "evidence": "APIClarity supports integrating with the following traffic sources. Install APIClarity and follow the instructions per required integration."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable and configure the supported traffic sources, please check the ```trafficsource:``` section in [helm values](https://github",
      "normalized_text": "Enable and configure the supported traffic sources, please check the ```trafficsource:``` section in [helm values](ht...",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        },
        {
          "url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "implement the [plugins api](https://github",
      "normalized_text": "Implement the [plugins api](https://github",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        },
        {
          "url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "export the api events to apiclarity",
      "normalized_text": "Export the api events to apiclarity",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugins directory within the codebase](https://github",
      "normalized_text": "Plugins directory within the codebase](https://github",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L54",
          "evidence": "The integrations (plugins) for the supported traffic sources above are located in the [plugins directory within the codebase](https://github.com/openclarity/apiclarity/tree/master/plugins) and implement the [plugins API](https://github.com/openclarity/apiclarity/tree/master/plugins/api) to export the API events to APIClarity. To enable and configure the supported traffic sources, please check the ```trafficSource:``` section in [Helm values](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate some traffic in the traced applications and check the apiclarity ui :)",
      "normalized_text": "Generate some traffic in the traced applications and check the apiclarity ui :)",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L86",
          "evidence": "7. Generate some traffic in the traced applications and check the APIClarity UI :)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the following command to delete them all:",
      "normalized_text": "Run the following command to delete them all:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L98",
          "evidence": "By default, Helm will not remove the PVCs and PVs for the StatefulSets. Run the following command to delete them all:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure apiclarity on your cluster via helm",
      "normalized_text": "Configure apiclarity on your cluster via helm",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L106",
          "evidence": "The file [values.yaml](https://github.com/openclarity/apiclarity/blob/master/charts/apiclarity/values.yaml) is used to deploy and configure APIClarity on your cluster via Helm."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable istio injection:",
      "normalized_text": "Enable istio injection:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L115",
          "evidence": "1. Create the `sock-shop` namespace and enable Istio injection:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create the `sock-shop` namespace and enable istio injection:",
      "normalized_text": "Create the `sock-shop` namespace and enable istio injection:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L115",
          "evidence": "1. Create the `sock-shop` namespace and enable Istio injection:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create namespace sock-shop",
      "normalized_text": "Create namespace sock-shop",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L118",
          "evidence": "kubectl create namespace sock-shop"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate data to review on the apiclarity dashboard",
      "normalized_text": "Generate data to review on the apiclarity dashboard",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L145",
          "evidence": "some transactions to generate data to review on the APIClarity dashboard."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build and push the image to your repo:",
      "normalized_text": "Build and push the image to your repo:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L151",
          "evidence": "Build and push the image to your repo:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build ui & backend locally as described above:",
      "normalized_text": "Build ui & backend locally as described above:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L161",
          "evidence": "1. Build UI & backend locally as described above:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run backend and frontend locally using demo data:",
      "normalized_text": "Run backend and frontend locally using demo data:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L173",
          "evidence": "3. Run backend and frontend locally using demo data:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run without k8s, use __enable_k8s=false__ instead",
      "normalized_text": "Run without k8s, use __enable_k8s=false__ instead",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L185",
          "evidence": "Note: this command requires a proper KUBECONFIG in your environment when __K8S_LOCAL=true__ is used. If you want to run without k8s, use __ENABLE_K8S=false__ instead."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support for external trace sources",
      "normalized_text": "Support for external trace sources",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L192",
          "evidence": "The following section describes how to deploy APIClarity with the support for external trace sources"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "includes how to access the service, register a new trace source, and how to receive the token and certificate",
      "normalized_text": "Includes how to access the service, register a new trace source, and how to receive the token and certificate",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L219",
          "evidence": "The following section describes how to register a new external trace source. And this section includes how to access the service, register a new trace source, and how to receive the token and certificate."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support with the following trace sources and follow the instructions per required integration",
      "normalized_text": "Support with the following trace sources and follow the instructions per required integration",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L243",
          "evidence": "APIClarity can support with the following trace sources and follow the instructions per required integration."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create an issue in github first to discuss your",
      "normalized_text": "Create an issue in github first to discuss your",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L258",
          "evidence": "For larger changes please create an Issue in GitHub first to discuss your"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Captures all API traffic in a given environment and performs a set of security analysis to discover all potential security problems with detected APIs",
      "normalized_text": "Captures all api traffic in a given environment and performs a set of security analysis to discover all potential sec...",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L8",
          "evidence": "- Captures all API traffic in a given environment and performs a set of security analysis to discover all potential security problems with detected APIs"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Actively tests API endpoints to detect security issues in the implementation of such APIs.",
      "normalized_text": "Actively tests api endpoints to detect security issues in the implementation of such apis.",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L9",
          "evidence": "- Actively tests API endpoints to detect security issues in the implementation of such APIs."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Spec Diffs This module compares the API traces with the OAPI specifications provided by the user or previously reconstructed. The result of this comparison provides:",
      "normalized_text": "Spec diffs this module compares the api traces with the oapi specifications provided by the user or previously recons...",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L19",
          "evidence": "- **Spec Diffs** This module compares the API traces with the OAPI specifications provided by the user or previously reconstructed. The result of this comparison provides:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "BFLA Detector This module detects potential Broken Function Level Authorization. In particular it observes the API interactions and build an authorization model that captures what clients are supposed to be authorized to make the various API calls. Based on such authorization model it then signals violations which may represent potential issues in the API authorization procedures.",
      "normalized_text": "Bfla detector this module detects potential broken function level authorization. in particular it observes the api in...",
      "category": "Security & Privacy",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L24",
          "evidence": "- [**BFLA Detector**](./backend/pkg/modules/internal/bfla/README.md) This module detects potential Broken Function Level Authorization. In particular it observes the API interactions and build an authorization model that captures what clients are supposed to be authorized to make the various API calls. Based on such authorization model it then signals violations which may represent potential issues in the API authorization procedures."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Fuzzer This module actively tests API endpoints based on their specification attempting in discovering security issues in the API server implementation.",
      "normalized_text": "Fuzzer this module actively tests api endpoints based on their specification attempting in discovering security issue...",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L25",
          "evidence": "- **Fuzzer** This module actively tests API endpoints based on their specification attempting in discovering security issues in the API server implementation."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "* Make sure that Istio 1.10+ is installed and running in your cluster.",
      "normalized_text": "* make sure that istio 1.10+ is installed and running in your cluster.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openclarity/apiclarity#L38",
          "evidence": "* Make sure that Istio 1.10+ is installed and running in your cluster."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    }
  ],
  "categories": {
    "Uncategorized": 189,
    "Integration & APIs": 63,
    "Developer Tools": 34,
    "User Interface": 71,
    "Automation & AI": 52,
    "Core Functionality": 18,
    "Configuration": 30,
    "Security & Privacy": 18,
    "Documentation": 5,
    "Performance": 4
  }
}