{
  "metadata": {
    "topic": "Code formatters",
    "generated_at": "2025-10-29T15:55:40.028483",
    "repositories_analyzed": 15,
    "total_features": 420,
    "unique_features": 364,
    "deduplication_rate": 0.1333333333333333
  },
  "repositories": [
    {
      "name": "prettier/prettier",
      "url": "https://github.com/prettier/prettier",
      "stars": 51114,
      "language": "JavaScript",
      "features": [
        {
          "text": "run [in your editor](https://prettier",
          "source_url": "https://github.com/prettier/prettier#L79",
          "evidence": "Prettier can be run [in your editor](https://prettier.io/docs/editors) on-save, in a [pre-commit hook](https://prettier.io/docs/precommit), or in [CI environments](https://prettier.io/docs/cli#list-different) to ensure your codebase has a consistent style without devs ever having to post a nit-picky comment on a code review ever again!"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "astral-sh/ruff",
      "url": "https://github.com/astral-sh/ruff",
      "stars": 43409,
      "language": "Rust",
      "features": [
        {
          "text": "run ruff as a linter, try any of the following:",
          "source_url": "https://github.com/astral-sh/ruff#L159",
          "evidence": "To run Ruff as a linter, try any of the following:"
        },
        {
          "text": "run ruff as a formatter:",
          "source_url": "https://github.com/astral-sh/ruff#L169",
          "evidence": "Or, to run Ruff as a formatter:"
        },
        {
          "text": "run the formatter",
          "source_url": "https://github.com/astral-sh/ruff#L189",
          "evidence": "# Run the formatter."
        },
        {
          "text": "enable pyflakes (`f`) and a subset of the pycodestyle (`e`) codes by default",
          "source_url": "https://github.com/astral-sh/ruff#L256",
          "evidence": "# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default."
        },
        {
          "text": "allow fix for all enabled rules (when `--fix`) is provided",
          "source_url": "https://github.com/astral-sh/ruff#L260",
          "evidence": "# Allow fix for all enabled rules (when `--fix`) is provided."
        },
        {
          "text": "allow unused variables when underscore-prefixed",
          "source_url": "https://github.com/astral-sh/ruff#L264",
          "evidence": "# Allow unused variables when underscore-prefixed."
        },
        {
          "text": "enables a collection of unstable",
          "source_url": "https://github.com/astral-sh/ruff#L299",
          "evidence": "file or passing `--preview` on the command line. Preview mode enables a collection of unstable"
        },
        {
          "text": "supports over 800 lint rules**, many of which are inspired by popular tools like flake8,",
          "source_url": "https://github.com/astral-sh/ruff#L309",
          "evidence": "**Ruff supports over 800 lint rules**, many of which are inspired by popular tools like Flake8,"
        },
        {
          "text": "implements every rule in",
          "source_url": "https://github.com/astral-sh/ruff#L310",
          "evidence": "isort, pyupgrade, and others. Regardless of the rule's origin, Ruff re-implements every rule in"
        },
        {
          "text": "enables flake8's `f` rules, along with a subset of the `e` rules, omitting any",
          "source_url": "https://github.com/astral-sh/ruff#L313",
          "evidence": "By default, Ruff enables Flake8's `F` rules, along with a subset of the `E` rules, omitting any"
        },
        {
          "text": "implements some of the most popular flake8 plugins and related code",
          "source_url": "https://github.com/astral-sh/ruff#L322",
          "evidence": "Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code"
        },
        {
          "text": "plugins and related code",
          "source_url": "https://github.com/astral-sh/ruff#L322",
          "evidence": "Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code"
        },
        {
          "text": "includes a \"direct\" rust port of the corresponding tool",
          "source_url": "https://github.com/astral-sh/ruff#L402",
          "evidence": "In some cases, Ruff includes a \"direct\" Rust port of the corresponding tool."
        },
        {
          "text": "import resolver is based on the import resolution algorithm from [pyright](https://github",
          "source_url": "https://github.com/astral-sh/ruff#L410",
          "evidence": "Ruff's import resolver is based on the import resolution algorithm from [Pyright](https://github.com/microsoft/pyright)."
        },
        {
          "text": "build (pypa)](https://github",
          "source_url": "https://github.com/astral-sh/ruff#L513",
          "evidence": "- [build (PyPA)](https://github.com/pypa/build)"
        },
        {
          "text": "\ud83d\udee0\ufe0f `pyproject.toml` support",
          "source_url": "https://github.com/astral-sh/ruff#L30",
          "evidence": "- \ud83d\udee0\ufe0f `pyproject.toml` support"
        },
        {
          "text": "\ud83d\udd27 Fix support, for automatic error correction (e.g., automatically remove unused imports)",
          "source_url": "https://github.com/astral-sh/ruff#L34",
          "evidence": "- \ud83d\udd27 Fix support, for automatic error correction (e.g., automatically remove unused imports)"
        },
        {
          "text": "\ud83d\udccf Over 800 built-in rules, with native re-implementations",
          "source_url": "https://github.com/astral-sh/ruff#L35",
          "evidence": "- \ud83d\udccf Over [800 built-in rules](https://docs.astral.sh/ruff/rules/), with native re-implementations"
        },
        {
          "text": "*Ruff supports over 800 lint rules**, many of which are inspired by popular tools like Flake8,",
          "source_url": "https://github.com/astral-sh/ruff#L309",
          "evidence": "**Ruff supports over 800 lint rules**, many of which are inspired by popular tools like Flake8,"
        },
        {
          "text": "flake8-import-conventions",
          "source_url": "https://github.com/astral-sh/ruff#L348",
          "evidence": "- [flake8-import-conventions](https://github.com/joaopalmeiro/flake8-import-conventions)"
        },
        {
          "text": "flake8-tidy-imports",
          "source_url": "https://github.com/astral-sh/ruff#L363",
          "evidence": "- [flake8-tidy-imports](https://pypi.org/project/flake8-tidy-imports/)"
        },
        {
          "text": "cibuildwheel (PyPA)",
          "source_url": "https://github.com/astral-sh/ruff#L514",
          "evidence": "- [cibuildwheel (PyPA)](https://github.com/pypa/cibuildwheel)"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "psf/black",
      "url": "https://github.com/psf/black",
      "stars": 41100,
      "language": "Python",
      "features": [
        {
          "text": "run _black_ as a package if running it as a script doesn't work:",
          "source_url": "https://github.com/psf/black#L57",
          "evidence": "You can run _Black_ as a package if running it as a script doesn't work:"
        },
        {
          "text": "support for new python",
          "source_url": "https://github.com/psf/black#L71",
          "evidence": "Stylistic changes will mostly be responses to bug reports and support for new Python"
        },
        {
          "text": "configure anything",
          "source_url": "https://github.com/psf/black#L129",
          "evidence": "**Pro-tip**: If you're asking yourself \"Do I need to configure anything?\" the answer is"
        },
        {
          "text": "*Pro-tip**: If you're asking yourself \"Do I need to configure anything?\" the answer is",
          "source_url": "https://github.com/psf/black#L129",
          "evidence": "**Pro-tip**: If you're asking yourself \"Do I need to configure anything?\" the answer is"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "rubocop/rubocop",
      "url": "https://github.com/rubocop/rubocop",
      "stars": 12801,
      "language": "Ruby",
      "features": [
        {
          "text": "supporting its ongoing development](#funding)",
          "source_url": "https://github.com/rubocop/rubocop#L30",
          "evidence": "**Please consider [financially supporting its ongoing development](#funding).**"
        },
        {
          "text": "supports the following runtime ruby implementations:",
          "source_url": "https://github.com/rubocop/rubocop#L79",
          "evidence": "RuboCop officially supports the following runtime Ruby implementations:"
        },
        {
          "text": "include one of these badges in your readme to let people know that your code is written following the community ruby style guide",
          "source_url": "https://github.com/rubocop/rubocop#L90",
          "evidence": "If you use RuboCop in your project, you can include one of these badges in your readme to let people know that your code is written following the community Ruby Style Guide."
        },
        {
          "text": "support the development of rubocop via",
          "source_url": "https://github.com/rubocop/rubocop#L164",
          "evidence": "You can support the development of RuboCop via"
        },
        {
          "text": "support us with a monthly donation and help us continue our activities",
          "source_url": "https://github.com/rubocop/rubocop#L180",
          "evidence": "Support us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/rubocop#backer)]"
        },
        {
          "text": "*RuboCop** is a Ruby static code analyzer (a.k.a. `linter`) and code formatter. Out of the box it",
          "source_url": "https://github.com/rubocop/rubocop#L14",
          "evidence": "**RuboCop** is a Ruby static code analyzer (a.k.a. `linter`) and code formatter. Out of the box it"
        },
        {
          "text": "*Please consider financially supporting its ongoing development.**",
          "source_url": "https://github.com/rubocop/rubocop#L30",
          "evidence": "**Please consider [financially supporting its ongoing development](#funding).**"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "sqlfluff/sqlfluff",
      "url": "https://github.com/sqlfluff/sqlfluff",
      "stars": 9280,
      "language": "Python",
      "features": [
        {
          "text": "allowing you to focus",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L19",
          "evidence": "and dbt. **SQLFluff** will auto-fix most linting errors, allowing you to focus"
        },
        {
          "text": "supports the following sql dialects (though perhaps not in full):",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L39",
          "evidence": "currently supports the following SQL dialects (though perhaps not in full):"
        },
        {
          "text": "extends the `sparksql` dialect with",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L46",
          "evidence": "- [Databricks](https://databricks.com/) (note: this extends the `sparksql` dialect with"
        },
        {
          "text": "support of these dialects and also",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L72",
          "evidence": "We aim to make it easy to expand on the support of these dialects and also"
        },
        {
          "text": "supports the following templates:",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L88",
          "evidence": "**SQLFluff** supports the following templates:"
        },
        {
          "text": "support more templating languages/syntaxes",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L95",
          "evidence": "Again, please raise issues if you wish to support more templating languages/syntaxes."
        },
        {
          "text": "run `sqlfluff lint` or `sqlfluff fix`",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L106",
          "evidence": "To get started, install the package and run `sqlfluff lint` or `sqlfluff fix`."
        },
        {
          "text": "Databricks (note: this extends the `sparksql` dialect with",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L46",
          "evidence": "- [Databricks](https://databricks.com/) (note: this extends the `sparksql` dialect with"
        },
        {
          "text": "*SQLFluff** supports the following templates:",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L88",
          "evidence": "**SQLFluff** supports the following templates:"
        },
        {
          "text": "dbt (requires plugin)",
          "source_url": "https://github.com/sqlfluff/sqlfluff#L93",
          "evidence": "- [dbt](https://www.getdbt.com/) (requires plugin)"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "dr5hn/countries-states-cities-database",
      "url": "https://github.com/dr5hn/countries-states-cities-database",
      "stars": 8907,
      "language": "Python",
      "features": [
        {
          "text": "support (19 languages)",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L16",
          "evidence": "* \u2705 **Most Comprehensive** - 151,024+ cities from 250 countries with timezone & multilingual support (19 languages)"
        },
        {
          "text": "export tool, or direct downloads",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L17",
          "evidence": "* \u2705 **Multiple Integration Options** - NPM/PyPI packages, REST API, Export Tool, or direct downloads"
        },
        {
          "text": "export tool](#\ufe0f-export-tool) \u2022 available formats",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L28",
          "evidence": "- [API](#api-) \u2022 [Export Tool](#\ufe0f-export-tool) \u2022 [Available Formats](#available-formats)"
        },
        {
          "text": "export tool**   | export data in multiple formats                  | [export",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L43",
          "evidence": "| **Export Tool**   | Export data in multiple formats                  | [export.countrystatecity.in](https://export.countrystatecity.in/) |"
        },
        {
          "text": "track data change requests            | [manager",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L44",
          "evidence": "| **Update Tool**   | Submit and track data change requests            | [manager.countrystatecity.in](https://manager.countrystatecity.in/) |"
        },
        {
          "text": "export tool** | < 2 min | custom datasets, specific regions | \u274c | free + credits |",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L53",
          "evidence": "| **Export Tool** | < 2 min | Custom datasets, specific regions | \u274c | Free + credits |"
        },
        {
          "text": "import { country, state, city } from '@countrystatecity/countries';",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L67",
          "evidence": "import { Country, State, City } from '@countrystatecity/countries';"
        },
        {
          "text": "import country, state, city",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L82",
          "evidence": "from countrystatecity import Country, State, City"
        },
        {
          "text": "export tool](https://export",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L108",
          "evidence": "**[Export Tool](https://export.countrystatecity.in/)** - Convert and download data in your preferred format"
        },
        {
          "text": "export to duckdb](#export-to-duckdb) section for instructions",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L126",
          "evidence": "**Note:** DuckDB format is available via manual conversion from SQLite files. See the [Export to DuckDB](#export-to-duckdb) section for instructions."
        },
        {
          "text": "build system:** json (version control) \u2192 mysql (canonical) \u2192 all export formats",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L161",
          "evidence": "**Two-phase build system:** JSON (version control) \u2192 MySQL (canonical) \u2192 All export formats"
        },
        {
          "text": "generates all exports (no local setup needed",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L167",
          "evidence": "**For Contributors:** Edit JSON files in `contributions/` \u2192 Submit PR \u2192 GitHub Actions auto-generates all exports (no local setup needed!)"
        },
        {
          "text": "exports (no local setup needed",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L167",
          "evidence": "**For Contributors:** Edit JSON files in `contributions/` \u2192 Submit PR \u2192 GitHub Actions auto-generates all exports (no local setup needed!)"
        },
        {
          "text": "import mongodb database",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L175",
          "evidence": "How to import MongoDB database?"
        },
        {
          "text": "export to duckdb",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L185",
          "evidence": "## Export to DuckDB"
        },
        {
          "text": "export the database to duckdb format",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L187",
          "evidence": "Want to export the database to DuckDB format? You can easily convert the existing SQLite files to DuckDB format using our conversion script."
        },
        {
          "text": "create duckdb database files that maintain the same structure and data as the original sqlite files, optimized for analytical workloads",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L213",
          "evidence": "The conversion script will create DuckDB database files that maintain the same structure and data as the original SQLite files, optimized for analytical workloads."
        },
        {
          "text": "export performance",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L217",
          "evidence": "### Export Performance"
        },
        {
          "text": "export time | world db size | compressed (",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L218",
          "evidence": "| Format | Export Time | World DB Size | Compressed (.gz) |"
        },
        {
          "text": "generates all export formats",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L279",
          "evidence": "**Note:** Only edit JSON in `contributions/` - GitHub Actions auto-generates all export formats!"
        },
        {
          "text": "tracking | [view repository](https://github",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L314",
          "evidence": "| \ud83d\udc19 **[GitHub](https://github.com/dr5hn/countries-states-cities-database)** | Contributors, raw files, issue tracking | [View Repository](https://github.com/dr5hn/countries-states-cities-database) |"
        },
        {
          "text": "export tool](https://export",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L316",
          "evidence": "| \ud83d\udee0\ufe0f **[Export Tool](https://export.countrystatecity.in/)** | Custom exports, specific formats | [Launch Tool](https://export.countrystatecity.in/) |"
        },
        {
          "text": "\u2705 Most Comprehensive - 151,024+ cities from 250 countries with timezone & multilingual support (19 languages)",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L16",
          "evidence": "* \u2705 **Most Comprehensive** - 151,024+ cities from 250 countries with timezone & multilingual support (19 languages)"
        },
        {
          "text": "\u2705 Multiple Integration Options - NPM/PyPI packages, REST API, Export Tool, or direct downloads",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L17",
          "evidence": "* \u2705 **Multiple Integration Options** - NPM/PyPI packages, REST API, Export Tool, or direct downloads"
        },
        {
          "text": "API \u2022 Export Tool \u2022 Available Formats",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L28",
          "evidence": "- [API](#api-) \u2022 [Export Tool](#\ufe0f-export-tool) \u2022 [Available Formats](#available-formats)"
        },
        {
          "text": "Performance \u2022 License \u2022 Contributing",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L30",
          "evidence": "- [Performance](#performance--benchmarks) \u2022 [License](#-license) \u2022 [Contributing](#contributing)"
        },
        {
          "text": "Platforms \u2022 Support",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L31",
          "evidence": "- [Platforms](#-available-on-multiple-platforms) \u2022 [Support](#\ufe0f-support-my-work)"
        },
        {
          "text": "*Features:** Zero dependencies, TypeScript support, offline-first, tree-shakeable",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L64",
          "evidence": "**Features:** Zero dependencies, TypeScript support, offline-first, tree-shakeable"
        },
        {
          "text": "*Export Tool** - Convert and download data in your preferred format",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L108",
          "evidence": "**[Export Tool](https://export.countrystatecity.in/)** - Convert and download data in your preferred format"
        },
        {
          "text": "*Features:** Multiple formats, flexible selection, custom filtering by region/country, bulk downloads, real-time processing",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L112",
          "evidence": "**Features:** Multiple formats, flexible selection, custom filtering by region/country, bulk downloads, real-time processing"
        },
        {
          "text": "*Note:** DuckDB format is available via manual conversion from SQLite files. See the Export to DuckDB section for instructions.",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L126",
          "evidence": "**Note:** DuckDB format is available via manual conversion from SQLite files. See the [Export to DuckDB](#export-to-duckdb) section for instructions."
        },
        {
          "text": "*Two-phase build system:** JSON (version control) \u2192 MySQL (canonical) \u2192 All export formats",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L161",
          "evidence": "**Two-phase build system:** JSON (version control) \u2192 MySQL (canonical) \u2192 All export formats"
        },
        {
          "text": "*For Contributors:** Edit JSON files in `contributions/` \u2192 Submit PR \u2192 GitHub Actions auto-generates all exports (no local setup needed!)",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L167",
          "evidence": "**For Contributors:** Edit JSON files in `contributions/` \u2192 Submit PR \u2192 GitHub Actions auto-generates all exports (no local setup needed!)"
        },
        {
          "text": "*For Maintainers:** MySQL as single source of truth, dynamic schema detection, one command to regenerate all formats",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L169",
          "evidence": "**For Maintainers:** MySQL as single source of truth, dynamic schema detection, one command to regenerate all formats"
        },
        {
          "text": "*Note:** Only edit JSON in `contributions/` - GitHub Actions auto-generates all export formats!",
          "source_url": "https://github.com/dr5hn/countries-states-cities-database#L279",
          "evidence": "**Note:** Only edit JSON in `contributions/` - GitHub Actions auto-generates all export formats!"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "nicklockwood/SwiftFormat",
      "url": "https://github.com/nicklockwood/SwiftFormat",
      "stars": 8562,
      "language": "Swift",
      "features": [
        {
          "text": "build phase](#xcode-build-phase)",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L18",
          "evidence": "- [Xcode build phase](#xcode-build-phase)"
        },
        {
          "text": "run manually, or as part of some other toolchain",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L70",
          "evidence": "1. As a command-line tool that you run manually, or as part of some other toolchain"
        },
        {
          "text": "build phase in your xcode project, so that it runs every time you press cmd-r or cmd-b, or",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L72",
          "evidence": "3. As a build phase in your Xcode project, so that it runs every time you press Cmd-R or Cmd-B, or"
        },
        {
          "text": "runs every time you press cmd-r or cmd-b, or",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L72",
          "evidence": "3. As a build phase in your Xcode project, so that it runs every time you press Cmd-R or Cmd-B, or"
        },
        {
          "text": "runs on any files you've changed before you check them in",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L73",
          "evidence": "4. As a Git pre-commit hook, so that it runs on any files you've changed before you check them in"
        },
        {
          "text": "build swiftformat manually on macos, linux or windows as follows:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L99",
          "evidence": "Or if you prefer, you can check out and build SwiftFormat manually on macOS, Linux or Windows as follows:"
        },
        {
          "text": "build -c release",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L104",
          "evidence": "$ swift build -c release"
        },
        {
          "text": "build phase instructions below for details",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L107",
          "evidence": "If you are installing SwiftFormat into your project directory, you can use [CocoaPods](https://cocoapods.org/) on macOS to automatically install the swiftformat binary along with your other pods - see the Xcode build phase instructions below for details."
        },
        {
          "text": "include the binary artifactbundle in your `package",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L109",
          "evidence": "Another option is to include the binary artifactbundle in your `Package.swift`:"
        },
        {
          "text": "build the command-line app manually:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L119",
          "evidence": "If you would prefer not to use a package manager, you can build the command-line app manually:"
        },
        {
          "text": "build the `swiftformat (application)` scheme",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L121",
          "evidence": "1. open `SwiftFormat.xcodeproj` and build the `SwiftFormat (Application)` scheme."
        },
        {
          "text": "run `swiftformat --help` to see the available options)",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L127",
          "evidence": "4. Add the following line to the file: `alias swiftformat=\"/usr/local/bin/swiftformat --indent 4\"` (you can omit the `--indent 4`, or replace it with something else. Run `swiftformat --help` to see the available options)."
        },
        {
          "text": "run the command `source ~/",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L129",
          "evidence": "5. Save the `.bash_profile` file and run the command `source ~/.bash_profile` for the changes to take effect."
        },
        {
          "text": "run it in your home directory, it will probably reformat every swift file on your hard drive",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L141",
          "evidence": "**WARNING:** `swiftformat .` will overwrite any Swift files it finds in the current directory, and any subfolders therein. If you run it in your home directory, it will probably reformat every Swift file on your hard drive."
        },
        {
          "text": "include multiple paths separated by spaces",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L151",
          "evidence": "The path can point to either a single Swift file or a directory of files. It can be either be absolute, or relative to the current directory. The `\"\"` quotes around the path are optional, but if the path contains spaces then you either need to use quotes, or escape each space with `\\`. You may include multiple paths separated by spaces."
        },
        {
          "text": "generate a suggested set of options in step 3, you should copy and paste them into the command, either before or after the path(s) to your source files",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L155",
          "evidence": "If you used `--infer-options` to generate a suggested set of options in step 3, you should copy and paste them into the command, either before or after the path(s) to your source files."
        },
        {
          "text": "include swiftformat as part of a command chain",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L167",
          "evidence": "If you prefer, you can use unix pipes to include SwiftFormat as part of a command chain. For example, this is an alternative way to format a file:"
        },
        {
          "text": "provide the file path using the `--stdin-path` argument:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L191",
          "evidence": "When using stdin, SwiftFormat does not have access to the file path of the input, so features that rely on the file location (such as inserting the creation date into header comments, or detecting `.swiftformat` configuration files in the file path) will not work. To solve this, you can provide the file path using the `--stdin-path` argument:"
        },
        {
          "text": "export different configurations using the file menu",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L225",
          "evidence": "You can configure the formatting [rules](#rules) and [options](#options) using the SwiftFormat for Xcode host application. There is currently no way to override these per-project, however, you can import and export different configurations using the File menu. You will need to do this again each time you switch projects."
        },
        {
          "text": "import and export different configurations using the file menu",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L225",
          "evidence": "You can configure the formatting [rules](#rules) and [options](#options) using the SwiftFormat for Xcode host application. There is currently no way to override these per-project, however, you can import and export different configurations using the File menu. You will need to do this again each time you switch projects."
        },
        {
          "text": "configure the formatting rules and options using the swiftformat for xcode host application",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L225",
          "evidence": "You can configure the formatting [rules](#rules) and [options](#options) using the SwiftFormat for Xcode host application. There is currently no way to override these per-project, however, you can import and export different configurations using the File menu. You will need to do this again each time you switch projects."
        },
        {
          "text": "import that file into swiftformat for xcode in order for the xcode source editor extension to use the new configuration",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L229",
          "evidence": "**Note:** SwiftFormat for Xcode cannot automatically detect changes to an imported configuration file. If you update the `.swiftformat` file for your project, you will need to manually re-import that file into SwiftFormat for Xcode in order for the Xcode source editor extension to use the new configuration."
        },
        {
          "text": "run the unit tests, and not every time you build the app",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L235",
          "evidence": "**NOTE:** Adding this script will overwrite your source files as you work on them, which has the annoying side-effect of clearing the undo history. You may wish to add the script to your test target rather than your main target, so that it is invoked only when you run the unit tests, and not every time you build the app."
        },
        {
          "text": "build target (such as the tests)",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L237",
          "evidence": "Alternatively, you might want to consider running SwiftFormat in [lint](#linting) mode as part of your normal build, and then running a formatting pass manually, or as part of a less-frequent build target (such as the tests)."
        },
        {
          "text": "build phase, do the following:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L241",
          "evidence": "To set up SwiftFormat as an Xcode build phase, do the following:"
        },
        {
          "text": "create a buildtools folder and package",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L243",
          "evidence": "#### 1) Create a BuildTools folder and Package.swift"
        },
        {
          "text": "create a folder called `buildtools` in the same folder as your xcodeproj file",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L245",
          "evidence": "1. Create a folder called `BuildTools` in the same folder as your xcodeproj file"
        },
        {
          "text": "create a file called `package",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L246",
          "evidence": "2. In this folder, create a file called `Package.swift`, with the following contents:"
        },
        {
          "text": "import packagedescription",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L249",
          "evidence": "import PackageDescription"
        },
        {
          "text": "create a file called `empty",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L260",
          "evidence": "3. If you are running Xcode 11.4 or later, in the `BuildTools` folder create a file called `Empty.swift` with nothing in it. This is to satisfy a change in Swift Package Manager."
        },
        {
          "text": "build phase to your app target",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L262",
          "evidence": "#### 2) Add a Build phase to your app target"
        },
        {
          "text": "build phases` tab",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L264",
          "evidence": "1. Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab"
        },
        {
          "text": "run script phase` by clicking the little plus icon in the top left",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L265",
          "evidence": "2. Add a `New Run Script Phase` by clicking the little plus icon in the top left"
        },
        {
          "text": "run script` phase above the `compile sources` phase, expand it and paste the following script:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L267",
          "evidence": "4. Drag the new `Run Script` phase **above** the `Compile Sources` phase, expand it and paste the following script:"
        },
        {
          "text": "run -c release swiftformat \"$srcroot\"",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L273",
          "evidence": "swift run -c release swiftformat \"$SRCROOT\""
        },
        {
          "text": "run -c release --package-path buildtools swiftformat \"$srcroot\"` if you need a more complex script and `cd buildtools` breaks stuff",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L276",
          "evidence": "You can also use `swift run -c release --package-path BuildTools swiftformat \"$SRCROOT\"` if you need a more complex script and `cd BuildTools` breaks stuff."
        },
        {
          "text": "build phase to your app target",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L296",
          "evidence": "#### 2) Add a Build phase to your app target"
        },
        {
          "text": "build phases` tab",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L298",
          "evidence": "1. Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab"
        },
        {
          "text": "run script phase` by clicking the little plus icon in the top left",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L299",
          "evidence": "2. Add a `New Run Script Phase` by clicking the little plus icon in the top left"
        },
        {
          "text": "run script` phase above the `compile sources` phase, expand it and paste the following script:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L301",
          "evidence": "4. Drag the new `Run Script` phase **above** the `Compile Sources` phase, expand it and paste the following script:"
        },
        {
          "text": "run script build phase:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L309",
          "evidence": "Alternatively, you could use a locally installed swiftformat command-line tool instead by putting the following in your Run Script build phase:"
        },
        {
          "text": "export path=\"/opt/homebrew/bin:$path\"",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L331",
          "evidence": "export PATH=\"/opt/homebrew/bin:$PATH\""
        },
        {
          "text": "create a symbolic link in `/usr/local/bin` pointing to the actual binary:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L341",
          "evidence": "or you can create a symbolic link in `/usr/local/bin` pointing to the actual binary:"
        },
        {
          "text": "plugin will find an existing `",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L361",
          "evidence": "The plugin will find an existing `.swiftformat` in your package root folder and honor it automatically."
        },
        {
          "text": "plugin from command-line",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L363",
          "evidence": "### Trigger Plugin From Command-Line"
        },
        {
          "text": "plugin --allow-writing-to-package-directory swiftformat",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L366",
          "evidence": "swift package plugin --allow-writing-to-package-directory swiftformat"
        },
        {
          "text": "plugin --allow-writing-to-package-directory swiftformat --target mylibrary --swift-version 5",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L376",
          "evidence": "swift package plugin --allow-writing-to-package-directory swiftformat --target MyLibrary --swift-version 5.6 --verbose"
        },
        {
          "text": "plugin from xcode",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L379",
          "evidence": "### Trigger Plugin From Xcode"
        },
        {
          "text": "plugin execution for a swift package or an xcode project",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L381",
          "evidence": "In Xcode 14 you can trigger the command plugin execution for a Swift package or an Xcode project."
        },
        {
          "text": "run plugin in xcode 14](https://user-images",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L387",
          "evidence": "![Run plugin in Xcode 14](https://user-images.githubusercontent.com/4176826/179352584-db7f7f42-452c-4a42-a329-01b115a237a7.gif)"
        },
        {
          "text": "plugin in xcode 14](https://user-images",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L387",
          "evidence": "![Run plugin in Xcode 14](https://user-images.githubusercontent.com/4176826/179352584-db7f7f42-452c-4a42-a329-01b115a237a7.gif)"
        },
        {
          "text": "run swiftformat on the frontmost xcode document (project or workspace) you can use the following applescript:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L392",
          "evidence": "To run SwiftFormat on the frontmost Xcode document (project or workspace) you can use the following AppleScript:"
        },
        {
          "text": "enable the hook by typing `chmod +x",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L441",
          "evidence": "5. enable the hook by typing `chmod +x .git/hooks/pre-commit` in the terminal."
        },
        {
          "text": "run whenever you run `git commit`",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L443",
          "evidence": "The pre-commit hook will now run whenever you run `git commit`. Running `git commit --no-verify` will skip the pre-commit hook."
        },
        {
          "text": "build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of swiftformat",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L447",
          "evidence": "**NOTE (2):** Unlike the Xcode build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a *post*-commit hook instead, which would run on your continuous integration server."
        },
        {
          "text": "run on your continuous integration server",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L447",
          "evidence": "**NOTE (2):** Unlike the Xcode build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a *post*-commit hook instead, which would run on your continuous integration server."
        },
        {
          "text": "create a github actions workflow using swiftformat, passing the `--reporter github-actions-log` command line option",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L453",
          "evidence": "2. Create a GitHub Actions workflow using SwiftFormat, passing the `--reporter github-actions-log` command line option. The following example action lints pull requests using SwiftFormat, reporting warnings using the GitHub Actions log."
        },
        {
          "text": "plugin to your `gemfile`",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L474",
          "evidence": "2. Add the [`danger-swiftformat`](https://github.com/garriguv/danger-ruby-swiftformat) plugin to your `Gemfile`."
        },
        {
          "text": "build phase](#xcode-build-phase) instructions above)",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L483",
          "evidence": "**NOTE:** It is recommended to add the `swiftformat` binary to your project directory to ensure the same version is used each time (see the [Xcode build phase](#xcode-build-phase) instructions above)."
        },
        {
          "text": "build your swift projects and want to ensure that only properly formatted code is merged to your main branch, try [rules_swiftformat](https://github",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L489",
          "evidence": "If you use [Bazel](https://bazel.build/) to build your Swift projects and want to ensure that only properly formatted code is merged to your main branch, try [rules_swiftformat](https://github.com/cgrindel/rules_swiftformat). The repository contains Bazel rules and macros that format Swift source files using SwiftFormat, test that the formatted files exist in the workspace directory, and copy the formatted files to the workspace directory."
        },
        {
          "text": "provide a path either via an argument:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L501",
          "evidence": "By default, the container runs `swiftformat .` Therefore, you need to provide a path either via an argument:"
        },
        {
          "text": "runs `swiftformat",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L501",
          "evidence": "By default, the container runs `swiftformat .` Therefore, you need to provide a path either via an argument:"
        },
        {
          "text": "run --rm -v /local/source/path:/work ghcr",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L504",
          "evidence": "docker run --rm -v /local/source/path:/work ghcr.io/nicklockwood/swiftformat:latest /work"
        },
        {
          "text": "run --rm -v /local/source/path:/work -w /work ghcr",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L510",
          "evidence": "docker run --rm -v /local/source/path:/work -w /work ghcr.io/nicklockwood/swiftformat:latest"
        },
        {
          "text": "run --rm -v /local/source/path:/work ghcr",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L522",
          "evidence": "docker run --rm -v /local/source/path:/work ghcr.io/nicklockwood/swiftformat:latest /work --lint"
        },
        {
          "text": "builds are subject to breaking changes",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L528",
          "evidence": "***Prerelease builds are subject to breaking changes.***"
        },
        {
          "text": "includes the latest unreleased changes",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L530",
          "evidence": "New rules, options, and fixes are merged to the [`develop`](https://github.com/nicklockwood/SwiftFormat/commits/develop/) branch before being incorporated into an official release. You may want to use a prerelease version of SwiftFormat that includes the latest unreleased changes."
        },
        {
          "text": "build via homebrew by running:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L536",
          "evidence": "You can install a prerelease build via Homebrew by running:"
        },
        {
          "text": "builds of the `develop` branch are available in the [calda/swiftformat-nightly](https://github",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L544",
          "evidence": "Nightly builds of the `develop` branch are available in the [calda/SwiftFormat-nightly](https://github.com/calda/SwiftFormat-nightly) repo. A new release is published every day, unless there have been no changes to `develop` since the last release. You can download executables for the latest nightly release [here](https://github.com/calda/SwiftFormat-nightly/releases/latest)."
        },
        {
          "text": "configure options for specific files or code ranges by using `swiftformat:options` directive in comments inside your swift file",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L563",
          "evidence": "You can configure options for specific files or code ranges by using `swiftformat:options` directive in comments inside your Swift file. To temporarily set one or more options inside a source file, use:"
        },
        {
          "text": "includes over 50 rules, and new ones are added all the time",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L582",
          "evidence": "SwiftFormat includes over 50 rules, and new ones are added all the time. An up-to-date list can be found in [Rules.md](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md) along with documentation for how they are used."
        },
        {
          "text": "enable opt-in rules using `--enable` followed by the rule names:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L588",
          "evidence": "You can disable rules individually using `--disable` followed by a list of one or more comma-delimited rule names, or enable opt-in rules using `--enable` followed by the rule names:"
        },
        {
          "text": "enable just the rules you want",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L618",
          "evidence": "And then individually enable just the rules you want. Alternatively, use the`--rules` argument to *only* enable the rules you specify:"
        },
        {
          "text": "enable the rules you specify:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L618",
          "evidence": "And then individually enable just the rules you want. Alternatively, use the`--rules` argument to *only* enable the rules you specify:"
        },
        {
          "text": "include multiple `--rules` arguments, or use the line continuation character `\\` to wrap the rules onto separate lines:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L624",
          "evidence": "As above, you may include multiple `--rules` arguments, or use the line continuation character `\\` to wrap the rules onto separate lines:"
        },
        {
          "text": "enable the rule(s) again, use:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L641",
          "evidence": "To enable the rule(s) again, use:"
        },
        {
          "text": "enable <rule1> [<rule2> [rule<3>",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L644",
          "evidence": "// swiftformat:enable <rule1> [<rule2> [rule<3> ...]]"
        },
        {
          "text": "enable them all again, use:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L653",
          "evidence": "And to enable them all again, use:"
        },
        {
          "text": "enable or disable rules for the current or previous line",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L667",
          "evidence": "You can also use `this` or `previous` to enable or disable rules for the current or previous line. There is no need to manually re-enable a rule after using the `next`, `this` or `previous` directives."
        },
        {
          "text": "enable a rule after using the `next`, `this` or `previous` directives",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L667",
          "evidence": "You can also use `this` or `previous` to enable or disable rules for the current or previous line. There is no need to manually re-enable a rule after using the `next`, `this` or `previous` directives."
        },
        {
          "text": "enable a rule that was not already enabled when formatting started",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L669",
          "evidence": "**NOTE:** The `swiftformat:enable` directive only serves to counter a previous `swiftformat:disable` directive in the same file. It is not possible to use `swiftformat:enable` to enable a rule that was not already enabled when formatting started."
        },
        {
          "text": "allows you to specify the swift _language mode_ used by your project",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L688",
          "evidence": "SwiftFormat also allows you to specify the Swift _language mode_ used by your project. This is distinct from the Swift compiler version. For example, you can use the Swift 6.0 compiler with either the Swift 5 language mode or the Swift 6 language mode. Some SwiftFormat rules will behave differently under different Swift language modes."
        },
        {
          "text": "create a configuration file, which can be added to your project and shared with other developers",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L698",
          "evidence": "Although it is possible to configure SwiftFormat directly by using the command-line [options](#options) and [rules](#rules) detailed above, it is sometimes more convenient to create a configuration file, which can be added to your project and shared with other developers."
        },
        {
          "text": "configure swiftformat directly by using the command-line options and rules detailed above, it is sometimes more convenient to create a configuration file, which can be added to your project and shared with other developers",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L698",
          "evidence": "Although it is possible to configure SwiftFormat directly by using the command-line [options](#options) and [rules](#rules) detailed above, it is sometimes more convenient to create a configuration file, which can be added to your project and shared with other developers."
        },
        {
          "text": "allows you to override certain rules or formatting options just for a particular directory of files",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L710",
          "evidence": "This allows you to override certain rules or formatting options just for a particular directory of files. You can also specify excluded files relative to that directory using `--exclude`, which may be more convenient than specifying them at the top-level:"
        },
        {
          "text": "include wildcards, specified using unix \"glob\" syntax, as documented below",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L716",
          "evidence": "The `--exclude` option takes a comma-delimited list of file or directory paths to exclude from formatting. Excluded paths are relative to the config file containing the `--exclude` command. The excluded paths can include wildcards, specified using Unix \"Glob\" syntax, as [documented below](#globs)."
        },
        {
          "text": "include blank lines for readability, and can also add comments using a hash prefix (#), e",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L720",
          "evidence": "The config file format is designed to be edited by hand. You may include blank lines for readability, and can also add comments using a hash prefix (#), e.g."
        },
        {
          "text": "create multiple configuration sections within a single `",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L734",
          "evidence": "You can create multiple configuration sections within a single `.swiftformat` file to apply different formatting options to different parts of your project. Each section should specify a `--filter` glob pattern to determine which files the configuration applies to. Options in that section are used when formatting files that match `--filter` glob, in addition to the base options in the file."
        },
        {
          "text": "enable noforceunwrapintests",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L742",
          "evidence": "--enable noForceUnwrapInTests"
        },
        {
          "text": "enable noforcetryintests",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L743",
          "evidence": "--enable noForceTryInTests"
        },
        {
          "text": "generate a config file from your existing project, like this:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L747",
          "evidence": "If you would prefer not to edit the configuration file by hand, you can use the [SwiftFormat for Xcode](#xcode-source-editor-extension) app to edit the configuration and export a configuration file. You can also use the swiftformat command-line-tool's `--inferoptions` command to generate a config file from your existing project, like this:"
        },
        {
          "text": "export a configuration file",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L747",
          "evidence": "If you would prefer not to edit the configuration file by hand, you can use the [SwiftFormat for Xcode](#xcode-source-editor-extension) app to edit the configuration and export a configuration file. You can also use the swiftformat command-line-tool's `--inferoptions` command to generate a config file from your existing project, like this:"
        },
        {
          "text": "run swiftformat as a linter, you can use the `--lint` command-line option:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L797",
          "evidence": "In order to run SwiftFormat as a linter, you can use the `--lint` command-line option:"
        },
        {
          "text": "runs the same rules as format mode, and all the same configuration options apply, however, no files will be modified",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L803",
          "evidence": "This runs the same rules as format mode, and all the same configuration options apply, however, no files will be modified. Instead, SwiftFormat will format each file in memory and then compare the result against the input and report the lines that required changes."
        },
        {
          "text": "build step on your ci server",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L805",
          "evidence": "The `--lint` option is similar to `--dry-run`, but `--lint` returns warnings for every line that required changes, and will return a nonzero error code (see [Error codes](#error-codes) below) if any changes are detected, which is useful if you want it to fail a build step on your CI server."
        },
        {
          "text": "run or if `--lint` detects no violations",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L830",
          "evidence": "* 0 - Success. This code will be returned in the event of a successful formatting run or if `--lint` detects no violations."
        },
        {
          "text": "provide using the `--header` command-line option",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L861",
          "evidence": "The header template is a string that you provide using the `--header` command-line option. Passing a value of `ignore` (the default) will leave the header comments unmodified. Passing `strip` or an empty string `\"\"` will remove them. If you wish to provide a custom header template, the format is as follows:"
        },
        {
          "text": "provide a custom header template, the format is as follows:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L861",
          "evidence": "The header template is a string that you provide using the `--header` command-line option. Passing a value of `ignore` (the default) will leave the header comments unmodified. Passing `strip` or an empty string `\"\"` will remove them. If you wish to provide a custom header template, the format is as follows:"
        },
        {
          "text": "include swift comment markup in the template if you wish: `--header \"/*--- header comment ---*/\"`",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L867",
          "evidence": "You can optionally include Swift comment markup in the template if you wish: `--header \"/*--- Header comment ---*/\"`"
        },
        {
          "text": "include comment markup, each line in the template will be prepended with `//` and a single space",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L869",
          "evidence": "If you do not include comment markup, each line in the template will be prepended with `//` and a single space."
        },
        {
          "text": "include the file name, creation date and/or the current year in a comment header copyright notice",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L871",
          "evidence": "It is common practice to include the file name, creation date and/or the current year in a comment header copyright notice. To do that, you can use the following placeholders:"
        },
        {
          "text": "supports two modes for handling markdown files:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L932",
          "evidence": "SwiftFormat supports two modes for handling markdown files:"
        },
        {
          "text": "configure the behavior of individual rules:",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L952",
          "evidence": "You can also specify SwiftFormat command line options to configure the behavior of individual rules:"
        },
        {
          "text": "support for linting, their primary functions are different",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L973",
          "evidence": "> A. SwiftLint is primarily designed to find and report code smells and style violations in your code. SwiftFormat is designed to fix them. While SwiftLint can autocorrect some issues, and SwiftFormat has some support for [linting](#linting), their primary functions are different."
        },
        {
          "text": "runs on ubuntu linux and windows",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L983",
          "evidence": "> A. SwiftFormat works on macOS 10.13 (High Sierra) and above, and also runs on Ubuntu Linux and Windows."
        },
        {
          "text": "enable only a small subset of rules",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L988",
          "evidence": "> A. The SwiftFormat framework and command-line tool can be compiled using Swift 5.3 and above, and can format programs written in Swift 4.x or 5. Swift 3.x is no longer actively supported. If you are still using Swift 3.x or earlier and find that SwiftFormat breaks your code, the best solution is probably to revert to an earlier SwiftFormat release, or enable only a small subset of rules. Use the `--swift-version` argument to enable additional rules specific to later Swift versions."
        },
        {
          "text": "enable additional rules specific to later swift versions",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L988",
          "evidence": "> A. The SwiftFormat framework and command-line tool can be compiled using Swift 5.3 and above, and can format programs written in Swift 4.x or 5. Swift 3.x is no longer actively supported. If you are still using Swift 3.x or earlier and find that SwiftFormat breaks your code, the best solution is probably to revert to an earlier SwiftFormat release, or enable only a small subset of rules. Use the `--swift-version` argument to enable additional rules specific to later Swift versions."
        },
        {
          "text": "run swiftformat using the `--verbose` option, it will tell you which rules were applied to each file",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L993",
          "evidence": "> A. If you run SwiftFormat using the `--verbose` option, it will tell you which rules were applied to each file. You can then selectively disable certain rules using the `--disable` argument (see below)."
        },
        {
          "text": "build if developers attempt to use an older swiftformat version",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L998",
          "evidence": "> A. You can specify a `--min-version` argument in your project's .swiftformat` file to fail the build if developers attempt to use an older SwiftFormat version."
        },
        {
          "text": "generate the configuration from your existing project",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1003",
          "evidence": "> A. Many configuration options are exposed in the command-line interface or `.swiftformat` configuration file. You can either set these manually, or use the `--infer-options` argument to automatically generate the configuration from your existing project."
        },
        {
          "text": "configure these on a per-project basis",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1007",
          "evidence": "> If you are using the Xcode source editor extension, rules and options can be configured using the [SwiftFormat for Xcode](#xcode-source-editor-extension) host application. Unfortunately, due to limitation of the Extensions API, there is no way to configure these on a per-project basis."
        },
        {
          "text": "build a new version of the command-line tool",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1009",
          "evidence": "> If the options you want aren't exposed, and disabling the rule doesn't solve the problem, the rules are implemented in the file `Rules.swift`, so you can modify them and build a new version of the command-line tool. If you think your changes might be generally useful, make a pull request."
        },
        {
          "text": "processing of swift source code besides formatting",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1034",
          "evidence": "> A. Yes, the SwiftFormat framework can be included in an app or test target, and used for many kinds of parsing and processing of Swift source code besides formatting. The SwiftFormat framework is available as a [CocoaPod](https://cocoapods.org/pods/SwiftFormat) for easy integration."
        },
        {
          "text": "run and debug the command line tool in xcode while developing a new rule",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1040",
          "evidence": "*Q. How do I run and debug the command line tool in Xcode while developing a new rule?*"
        },
        {
          "text": "run the `swiftformat` command line tool via the `swift format (command line tool)` scheme, and you can pass in arguments like `/path/to/my/code --config /path/to/my/config` as the `arguments passed on launch` in xcode's scheme editor",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1042",
          "evidence": "> A. You can run the `swiftformat` command line tool via the `Swift Format (Command Line Tool)` scheme, and you can pass in arguments like `/path/to/my/code --config /path/to/my/config` as the `Arguments Passed On Launch` in Xcode's scheme editor. More instructions are available [here](https://github.com/nicklockwood/SwiftFormat/pull/1804#issuecomment-2263079432)."
        },
        {
          "text": "handles type inference for closures vs keypaths, as discussed [here](https://bugs",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1061",
          "evidence": "* When using the `preferKeyPath` rule, conversion of `compactMap { $0.foo }` to `compactMap(\\.foo)` or `flatMap { $0.foo }` to `flatMap(\\.foo)` will result in code that fails to compile if `foo` is not an `Optional` property. This is due to a difference in the way that Swift handles type inference for closures vs keyPaths, as discussed [here](https://bugs.swift.org/browse/SR-13347). The recommended workaround is to replace `compactMap()` or `flatMap()` with `map()` in these cases, which will not change the behavior of the code."
        },
        {
          "text": "provide a comma-delimited list of methods to be excluded from the rule",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1063",
          "evidence": "* When using the `--self remove` option, the `redundantSelf` rule will remove references to `self` in autoclosure arguments, which may change the meaning of the code, or cause it not to compile. To work around this issue, use the `--self-required` option to provide a comma-delimited list of methods to be excluded from the rule. The `expect()` function from the popular [Nimble](https://github.com/Quick/Nimble) unit testing framework is already excluded by default. If you are using the `--self insert` option then this is not an issue."
        },
        {
          "text": "support for specific functions",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1069",
          "evidence": "* The `trailingClosures` rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the `--trailing-closures` and `--never-trailing` arguments to explicitly opt in or out of trailing closure support for specific functions."
        },
        {
          "text": "generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1069",
          "evidence": "* The `trailingClosures` rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the `--trailing-closures` and `--never-trailing` arguments to explicitly opt in or out of trailing closure support for specific functions."
        },
        {
          "text": "support for command line tools](https://support",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1077",
          "evidence": "* When running a version of SwiftFormat built using Xcode 10.2 on macOS 10.14.3 or earlier, you may experience a crash with the error \"dyld: Library not loaded: @rpath/libswiftCore.dylib\". To fix this, you need to install the [Swift 5 Runtime Support for Command Line Tools](https://support.apple.com/kb/DL1998). These tools are included by default in macOS 10.14.4 and later."
        },
        {
          "text": "include spelling out the closure explicitly in the generic function (instead of using a `typealias`) or disabling the `opaquegenericparameters` rule (e",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1079",
          "evidence": "* If you have a generic typealias that defines a closure (e.g. `typealias ResultCompletion<T> = (Result<T, Error>) -> Void`) and use this closure as an argument in a generic function (e.g. `func handle<T: Decodable>(_ completion: ResultCompletion<T>)`), the `opaqueGenericParameters` rule may update the function definition to use `some` syntax (e.g. `func handle(_ completion: ResultCompletion<some Decodable>)`). `some` syntax is not permitted in closure parameters, so this will no longer compile. Workarounds include spelling out the closure explicitly in the generic function (instead of using a `typealias`) or disabling the `opaqueGenericParameters` rule (e.g. with `// swiftformat:disable:next opaqueGenericParameters`)."
        },
        {
          "text": "include using `--swift-version 5",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1081",
          "evidence": "* If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with `--swift-version 5.7`, the `genericExtensions` rule may cause a build failure by updating extensions of the format `extension Collection where Element == Foo` to `extension Collection<Foo>`. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode [does not include](https://forums.swift.org/t/xcode-14-rc-cannot-specialize-protocol-type/60171) the Swift 5.7 standard library. Workarounds include using `--swift-version 5.6` instead, updating to Xcode 14.1+, or disabling the `genericExtensions` rule (e.g. with `// swiftformat:disable:next genericExtensions`)."
        },
        {
          "text": "build failure by updating extensions of the format `extension collection where element == foo` to `extension collection<foo>`",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1081",
          "evidence": "* If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with `--swift-version 5.7`, the `genericExtensions` rule may cause a build failure by updating extensions of the format `extension Collection where Element == Foo` to `extension Collection<Foo>`. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode [does not include](https://forums.swift.org/t/xcode-14-rc-cannot-specialize-protocol-type/60171) the Swift 5.7 standard library. Workarounds include using `--swift-version 5.6` instead, updating to Xcode 14.1+, or disabling the `genericExtensions` rule (e.g. with `// swiftformat:disable:next genericExtensions`)."
        },
        {
          "text": "build failure in cases where there are multiple static overloads with the same name but different return types",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1083",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases where there are multiple static overloads with the same name but different return types. As a workaround you can rename the overloads to no longer conflict, or exclude the property name with `--preserve-symbols propertyName,otherPropertyName,etc`."
        },
        {
          "text": "build failure in cases where the property's type is a protocol / existential like `let shapestyle: shapestyle =",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1085",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases where the property's type is a protocol / existential like `let shapeStyle: ShapeStyle = .myShapeStyle`, and the value used on the right-hand side is defined in an extension like `extension ShapeStyle where Self == MyShapeStyle { static var myShapeStyle: MyShapeStyle { ... } }`. As a workaround you can use the existential `any` syntax (`let shapeStyle: any ShapeStyle = .myShapeStyle`), which the rule will preserve as-is, or exclude the type name and/or property name with `--preserve-symbols ShapeStyle,myShapeStyle,etc`."
        },
        {
          "text": "build failure in cases like `let foo = foo",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1087",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases like `let foo = Foo.bar` where the value is a static member that doesn't return the same time. For example, `let foo: Foo = .bar` would be invalid if the `bar` property was defined as `static var bar: Bar`. As a workaround you can write the name of the type explicitly, like `let foo: Bar = Foo.bar`, or exclude the type name and/or property name with `--preserve-symbols Bar,bar,etc`."
        },
        {
          "text": "- Xcode build phase",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L18",
          "evidence": "- [Xcode build phase](#xcode-build-phase)"
        },
        {
          "text": "- Swift Package Manager plugin",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L19",
          "evidence": "- [Swift Package Manager plugin](#swift-package-manager-plugin)"
        },
        {
          "text": "- Sublime Text plugin",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L22",
          "evidence": "- [Sublime Text plugin](#sublime-text-plugin)"
        },
        {
          "text": "- Prerelease Builds",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L29",
          "evidence": "- [Prerelease Builds](#prerelease-builds)"
        },
        {
          "text": "*WARNING:** `swiftformat .` will overwrite any Swift files it finds in the current directory, and any subfolders therein. If you run it in your home directory, it will probably reformat every Swift file on your hard drive.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L141",
          "evidence": "**WARNING:** `swiftformat .` will overwrite any Swift files it finds in the current directory, and any subfolders therein. If you run it in your home directory, it will probably reformat every Swift file on your hard drive."
        },
        {
          "text": "*Note:** SwiftFormat for Xcode cannot automatically detect changes to an imported configuration file. If you update the `.swiftformat` file for your project, you will need to manually re-import that file into SwiftFormat for Xcode in order for the Xcode source editor extension to use the new configuration.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L229",
          "evidence": "**Note:** SwiftFormat for Xcode cannot automatically detect changes to an imported configuration file. If you update the `.swiftformat` file for your project, you will need to manually re-import that file into SwiftFormat for Xcode in order for the Xcode source editor extension to use the new configuration."
        },
        {
          "text": "*NOTE:** Adding this script will overwrite your source files as you work on them, which has the annoying side-effect of clearing the undo history. You may wish to add the script to your test target rather than your main target, so that it is invoked only when you run the unit tests, and not every time you build the app.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L235",
          "evidence": "**NOTE:** Adding this script will overwrite your source files as you work on them, which has the annoying side-effect of clearing the undo history. You may wish to add the script to your test target rather than your main target, so that it is invoked only when you run the unit tests, and not every time you build the app."
        },
        {
          "text": "*NOTE:** You may wish to check BuildTools/Package.swift into your source control so that the version used by your run-script phase is kept in version control. It is recommended to add the following to your .gitignore file: `BuildTools/.build` and `BuildTools/.swiftpm`.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L278",
          "evidence": "**NOTE:** You may wish to check BuildTools/Package.swift into your source control so that the version used by your run-script phase is kept in version control. It is recommended to add the following to your .gitignore file: `BuildTools/.build` and `BuildTools/.swiftpm`."
        },
        {
          "text": "*NOTE (2):** If you are using Xcode 15 or later, make sure that the `ENABLE_USER_SCRIPT_SANDBOXING` (aka \"User Script Sandboxing\") option is set to NO, otherwise SwiftFormat won't be able to run correctly.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L280",
          "evidence": "**NOTE (2):** If you are using Xcode 15 or later, make sure that the `ENABLE_USER_SCRIPT_SANDBOXING` (aka \"User Script Sandboxing\") option is set to NO, otherwise SwiftFormat won't be able to run correctly."
        },
        {
          "text": "*NOTE (2):** When installing this way, GateKeeper may block swiftformat from running until you open it manually the first time by right-clicking in the Finder and selecting \"Open\".",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L294",
          "evidence": "**NOTE (2):** When installing this way, GateKeeper may block swiftformat from running until you open it manually the first time by right-clicking in the Finder and selecting \"Open\"."
        },
        {
          "text": "*NOTE (2):** Unlike the Xcode build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a *post*-commit hook instead, which would run on your continuous integration server.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L447",
          "evidence": "**NOTE (2):** Unlike the Xcode build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a *post*-commit hook instead, which would run on your continuous integration server."
        },
        {
          "text": "NOTE: It is recommended to add the `swiftformat` binary to your project directory to ensure the same version is used each time (see the Xcode build phase instructions above).",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L483",
          "evidence": "**NOTE:** It is recommended to add the `swiftformat` binary to your project directory to ensure the same version is used each time (see the [Xcode build phase](#xcode-build-phase) instructions above)."
        },
        {
          "text": "Prerelease builds are subject to breaking changes.*",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L528",
          "evidence": "***Prerelease builds are subject to breaking changes.***"
        },
        {
          "text": "*Nightly Builds:**",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L542",
          "evidence": "**Nightly Builds:**"
        },
        {
          "text": "*NOTE:** The `swiftformat:enable` directive only serves to counter a previous `swiftformat:disable` directive in the same file. It is not possible to use `swiftformat:enable` to enable a rule that was not already enabled when formatting started.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L669",
          "evidence": "**NOTE:** The `swiftformat:enable` directive only serves to counter a previous `swiftformat:disable` directive in the same file. It is not possible to use `swiftformat:enable` to enable a rule that was not already enabled when formatting started."
        },
        {
          "text": "-exclude Pods,Generated",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L713",
          "evidence": "--exclude Pods,Generated"
        },
        {
          "text": "-enable noForceUnwrapInTests",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L742",
          "evidence": "--enable noForceUnwrapInTests"
        },
        {
          "text": "-enable noForceTryInTests",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L743",
          "evidence": "--enable noForceTryInTests"
        },
        {
          "text": "`**/Generated` - Matches any folder called `Generated` in the project.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L785",
          "evidence": "* `**/Generated` - Matches any folder called `Generated` in the project."
        },
        {
          "text": "`**/*_generated.swift` - Matches any Swift file with the suffix \"_generated\" in the project.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L787",
          "evidence": "* `**/*_generated.swift` - Matches any Swift file with the suffix \"_generated\" in the project."
        },
        {
          "text": "0 - Success. This code will be returned in the event of a successful formatting run or if `--lint` detects no violations.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L830",
          "evidence": "* 0 - Success. This code will be returned in the event of a successful formatting run or if `--lint` detects no violations."
        },
        {
          "text": "1 - Lint failure. This code will be returned when running in `--lint` mode, or when autocorrecting in `--strict` mode, if the input requires formatting.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L831",
          "evidence": "* 1 - Lint failure. This code will be returned when running in `--lint` mode, or when autocorrecting in `--strict` mode, if the input requires formatting."
        },
        {
          "text": "`{created}` - the date on which the file was created",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L875",
          "evidence": "* `{created}` - the date on which the file was created"
        },
        {
          "text": "`{created.year}` - the year in which the file was created",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L876",
          "evidence": "* `{created.year}` - the year in which the file was created"
        },
        {
          "text": "-header \"{file}\\nCopyright (c) {year} Foobar Industries\\nCreated by John Smith on {created}.\"",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L883",
          "evidence": "--header \"{file}\\nCopyright (c) {year} Foobar Industries\\nCreated by John Smith on {created}.\""
        },
        {
          "text": "*NOTE:** the `{year}` value and `{created}` date format are determined from the current locale and timezone of the machine running the script. `{author.name}` and `{author.email}` requires the project to be version controlled by git.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L894",
          "evidence": "**NOTE:** the `{year}` value and `{created}` date format are determined from the current locale and timezone of the machine running the script. `{author.name}` and `{author.email}` requires the project to be version controlled by git."
        },
        {
          "text": "Q. What platforms does SwiftFormat support?*",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L981",
          "evidence": "*Q. What platforms does SwiftFormat support?*"
        },
        {
          "text": "Q. What versions of Swift are supported?*",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L986",
          "evidence": "*Q. What versions of Swift are supported?*"
        },
        {
          "text": "Q. How to create own rule?*",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1036",
          "evidence": "*Q. How to create own rule?*"
        },
        {
          "text": "Q. How do I run and debug the command line tool in Xcode while developing a new rule?*",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1040",
          "evidence": "*Q. How do I run and debug the command line tool in Xcode while developing a new rule?*"
        },
        {
          "text": "The `enumNamespaces` rule replaces classes that have only static members with an `enum`. If the class is subclassed, or if there is code that depends on the class exposing certain runtime behaviors, this may break the program. To solve this you can either fix it on a per-case basis by adding a `// swiftformat:disable:next enumNamespaces` comment directive above the class declaration, or you can add `--enum-namespaces structs-only` to prevent the rule being applied to classes, or you can just disable the `enumNamespaces` rule completely.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1049",
          "evidence": "* The `enumNamespaces` rule replaces classes that have only static members with an `enum`. If the class is subclassed, or if there is code that depends on the class exposing certain runtime behaviors, this may break the program. To solve this you can either fix it on a per-case basis by adding a `// swiftformat:disable:next enumNamespaces` comment directive above the class declaration, or you can add `--enum-namespaces structs-only` to prevent the rule being applied to classes, or you can just disable the `enumNamespaces` rule completely."
        },
        {
          "text": "When using the `initCoderUnavailable` rule, if an `init` that is marked as unavailable is overridden elsewhere in the program then it will cause a compilation error. The recommended workaround is to remove the override (which shouldn't affect the program behavior if the init was really unused) or use the `// swiftformat:disable:next initCoderUnavailable` comment directive to disable the rule for the overridden init (or just disable the `initCoderUnavailable` rule completely).",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1057",
          "evidence": "* When using the `initCoderUnavailable` rule, if an `init` that is marked as unavailable is overridden elsewhere in the program then it will cause a compilation error. The recommended workaround is to remove the override (which shouldn't affect the program behavior if the init was really unused) or use the `// swiftformat:disable:next initCoderUnavailable` comment directive to disable the rule for the overridden init (or just disable the `initCoderUnavailable` rule completely)."
        },
        {
          "text": "When using the `preferKeyPath` rule, conversion of `compactMap { $0.foo }` to `compactMap(\\.foo)` or `flatMap { $0.foo }` to `flatMap(\\.foo)` will result in code that fails to compile if `foo` is not an `Optional` property. This is due to a difference in the way that Swift handles type inference for closures vs keyPaths, as discussed here. The recommended workaround is to replace `compactMap()` or `flatMap()` with `map()` in these cases, which will not change the behavior of the code.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1061",
          "evidence": "* When using the `preferKeyPath` rule, conversion of `compactMap { $0.foo }` to `compactMap(\\.foo)` or `flatMap { $0.foo }` to `flatMap(\\.foo)` will result in code that fails to compile if `foo` is not an `Optional` property. This is due to a difference in the way that Swift handles type inference for closures vs keyPaths, as discussed [here](https://bugs.swift.org/browse/SR-13347). The recommended workaround is to replace `compactMap()` or `flatMap()` with `map()` in these cases, which will not change the behavior of the code."
        },
        {
          "text": "When using the `--self remove` option, the `redundantSelf` rule will remove references to `self` in autoclosure arguments, which may change the meaning of the code, or cause it not to compile. To work around this issue, use the `--self-required` option to provide a comma-delimited list of methods to be excluded from the rule. The `expect()` function from the popular Nimble unit testing framework is already excluded by default. If you are using the `--self insert` option then this is not an issue.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1063",
          "evidence": "* When using the `--self remove` option, the `redundantSelf` rule will remove references to `self` in autoclosure arguments, which may change the meaning of the code, or cause it not to compile. To work around this issue, use the `--self-required` option to provide a comma-delimited list of methods to be excluded from the rule. The `expect()` function from the popular [Nimble](https://github.com/Quick/Nimble) unit testing framework is already excluded by default. If you are using the `--self insert` option then this is not an issue."
        },
        {
          "text": "The `trailingClosures` rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the `--trailing-closures` and `--never-trailing` arguments to explicitly opt in or out of trailing closure support for specific functions.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1069",
          "evidence": "* The `trailingClosures` rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the `--trailing-closures` and `--never-trailing` arguments to explicitly opt in or out of trailing closure support for specific functions."
        },
        {
          "text": "When running a version of SwiftFormat built using Xcode 10.2 on macOS 10.14.3 or earlier, you may experience a crash with the error \"dyld: Library not loaded: @rpath/libswiftCore.dylib\". To fix this, you need to install the Swift 5 Runtime Support for Command Line Tools. These tools are included by default in macOS 10.14.4 and later.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1077",
          "evidence": "* When running a version of SwiftFormat built using Xcode 10.2 on macOS 10.14.3 or earlier, you may experience a crash with the error \"dyld: Library not loaded: @rpath/libswiftCore.dylib\". To fix this, you need to install the [Swift 5 Runtime Support for Command Line Tools](https://support.apple.com/kb/DL1998). These tools are included by default in macOS 10.14.4 and later."
        },
        {
          "text": "If you have a generic typealias that defines a closure (e.g. `typealias ResultCompletion<T> = (Result<T, Error>) -> Void`) and use this closure as an argument in a generic function (e.g. `func handle<T: Decodable>(_ completion: ResultCompletion<T>)`), the `opaqueGenericParameters` rule may update the function definition to use `some` syntax (e.g. `func handle(_ completion: ResultCompletion<some Decodable>)`). `some` syntax is not permitted in closure parameters, so this will no longer compile. Workarounds include spelling out the closure explicitly in the generic function (instead of using a `typealias`) or disabling the `opaqueGenericParameters` rule (e.g. with `// swiftformat:disable:next opaqueGenericParameters`).",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1079",
          "evidence": "* If you have a generic typealias that defines a closure (e.g. `typealias ResultCompletion<T> = (Result<T, Error>) -> Void`) and use this closure as an argument in a generic function (e.g. `func handle<T: Decodable>(_ completion: ResultCompletion<T>)`), the `opaqueGenericParameters` rule may update the function definition to use `some` syntax (e.g. `func handle(_ completion: ResultCompletion<some Decodable>)`). `some` syntax is not permitted in closure parameters, so this will no longer compile. Workarounds include spelling out the closure explicitly in the generic function (instead of using a `typealias`) or disabling the `opaqueGenericParameters` rule (e.g. with `// swiftformat:disable:next opaqueGenericParameters`)."
        },
        {
          "text": "If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with `--swift-version 5.7`, the `genericExtensions` rule may cause a build failure by updating extensions of the format `extension Collection where Element == Foo` to `extension Collection<Foo>`. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode does not include the Swift 5.7 standard library. Workarounds include using `--swift-version 5.6` instead, updating to Xcode 14.1+, or disabling the `genericExtensions` rule (e.g. with `// swiftformat:disable:next genericExtensions`).",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1081",
          "evidence": "* If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with `--swift-version 5.7`, the `genericExtensions` rule may cause a build failure by updating extensions of the format `extension Collection where Element == Foo` to `extension Collection<Foo>`. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode [does not include](https://forums.swift.org/t/xcode-14-rc-cannot-specialize-protocol-type/60171) the Swift 5.7 standard library. Workarounds include using `--swift-version 5.6` instead, updating to Xcode 14.1+, or disabling the `genericExtensions` rule (e.g. with `// swiftformat:disable:next genericExtensions`)."
        },
        {
          "text": "The `propertyTypes` rule can cause a build failure in cases where there are multiple static overloads with the same name but different return types. As a workaround you can rename the overloads to no longer conflict, or exclude the property name with `--preserve-symbols propertyName,otherPropertyName,etc`.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1083",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases where there are multiple static overloads with the same name but different return types. As a workaround you can rename the overloads to no longer conflict, or exclude the property name with `--preserve-symbols propertyName,otherPropertyName,etc`."
        },
        {
          "text": "The `propertyTypes` rule can cause a build failure in cases where the property's type is a protocol / existential like `let shapeStyle: ShapeStyle = .myShapeStyle`, and the value used on the right-hand side is defined in an extension like `extension ShapeStyle where Self == MyShapeStyle { static var myShapeStyle: MyShapeStyle { ... } }`. As a workaround you can use the existential `any` syntax (`let shapeStyle: any ShapeStyle = .myShapeStyle`), which the rule will preserve as-is, or exclude the type name and/or property name with `--preserve-symbols ShapeStyle,myShapeStyle,etc`.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1085",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases where the property's type is a protocol / existential like `let shapeStyle: ShapeStyle = .myShapeStyle`, and the value used on the right-hand side is defined in an extension like `extension ShapeStyle where Self == MyShapeStyle { static var myShapeStyle: MyShapeStyle { ... } }`. As a workaround you can use the existential `any` syntax (`let shapeStyle: any ShapeStyle = .myShapeStyle`), which the rule will preserve as-is, or exclude the type name and/or property name with `--preserve-symbols ShapeStyle,myShapeStyle,etc`."
        },
        {
          "text": "The `propertyTypes` rule can cause a build failure in cases like `let foo = Foo.bar` where the value is a static member that doesn't return the same time. For example, `let foo: Foo = .bar` would be invalid if the `bar` property was defined as `static var bar: Bar`. As a workaround you can write the name of the type explicitly, like `let foo: Bar = Foo.bar`, or exclude the type name and/or property name with `--preserve-symbols Bar,bar,etc`.",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1087",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases like `let foo = Foo.bar` where the value is a static member that doesn't return the same time. For example, `let foo: Foo = .bar` would be invalid if the `bar` property was defined as `static var bar: Bar`. As a workaround you can write the name of the type explicitly, like `let foo: Bar = Foo.bar`, or exclude the type name and/or property name with `--preserve-symbols Bar,bar,etc`."
        },
        {
          "text": "Aerobounce - Homebrew cask and Sublime Text plugin",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1108",
          "evidence": "* [Aerobounce](https://github.com/aerobounce) - Homebrew cask and Sublime Text plugin"
        },
        {
          "text": "Yonas Kolb - Swift Package Manager integration",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1111",
          "evidence": "* [Yonas Kolb](https://github.com/yonaskolb) - Swift Package Manager integration"
        },
        {
          "text": "Mahdi Bchatnia - Linux build workflow",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1121",
          "evidence": "* [Mahdi Bchatnia](https://github.com/inket) - Linux build workflow"
        },
        {
          "text": "Saleem Abdulrasool - Windows build workflow",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1122",
          "evidence": "* [Saleem Abdulrasool](https://github.com/compnerd) - Windows build workflow"
        },
        {
          "text": "Marco Eidinger - Swift Package Manager plugin",
          "source_url": "https://github.com/nicklockwood/SwiftFormat#L1124",
          "evidence": "* [Marco Eidinger](https://github.com/MarcoEidinger) - Swift Package Manager plugin"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "openai/agents.md",
      "url": "https://github.com/openai/agents.md",
      "stars": 7726,
      "language": "TypeScript",
      "features": [
        {
          "text": "provide context and instructions to help ai coding agents work on your project",
          "source_url": "https://github.com/openai/agents.md#L10",
          "evidence": "to provide context and instructions to help AI coding agents work on your project."
        },
        {
          "text": "run where <project_name>` to jump to a package instead of scanning with `ls`",
          "source_url": "https://github.com/openai/agents.md#L18",
          "evidence": "- Use `pnpm dlx turbo run where <project_name>` to jump to a package instead of scanning with `ls`."
        },
        {
          "text": "run `pnpm install --filter <project_name>` to add the package to your workspace so vite, eslint, and typescript can see it",
          "source_url": "https://github.com/openai/agents.md#L19",
          "evidence": "- Run `pnpm install --filter <project_name>` to add the package to your workspace so Vite, ESLint, and TypeScript can see it."
        },
        {
          "text": "create vite@latest <project_name> -- --template react-ts` to spin up a new react + vite package with typescript checks ready",
          "source_url": "https://github.com/openai/agents.md#L20",
          "evidence": "- Use `pnpm create vite@latest <project_name> -- --template react-ts` to spin up a new React + Vite package with TypeScript checks ready."
        },
        {
          "text": "run `pnpm turbo run test --filter <project_name>` to run every check defined for that package",
          "source_url": "https://github.com/openai/agents.md#L25",
          "evidence": "- Run `pnpm turbo run test --filter <project_name>` to run every check defined for that package."
        },
        {
          "text": "run -t \"<test name>\"`",
          "source_url": "https://github.com/openai/agents.md#L27",
          "evidence": "- To focus on one step, add the Vitest pattern: `pnpm vitest run -t \"<test name>\"`."
        },
        {
          "text": "run `pnpm lint --filter <project_name>` to be sure eslint and typescript rules still pass",
          "source_url": "https://github.com/openai/agents.md#L29",
          "evidence": "- After moving files or changing imports, run `pnpm lint --filter <project_name>` to be sure ESLint and TypeScript rules still pass."
        },
        {
          "text": "run `pnpm lint` and `pnpm test` before committing",
          "source_url": "https://github.com/openai/agents.md#L34",
          "evidence": "- Always run `pnpm lint` and `pnpm test` before committing."
        },
        {
          "text": "includes a basic next",
          "source_url": "https://github.com/openai/agents.md#L39",
          "evidence": "This repository also includes a basic Next.js website hosted at https://agents.md/"
        },
        {
          "text": "Use `pnpm dlx turbo run where <project_name>` to jump to a package instead of scanning with `ls`.",
          "source_url": "https://github.com/openai/agents.md#L18",
          "evidence": "- Use `pnpm dlx turbo run where <project_name>` to jump to a package instead of scanning with `ls`."
        },
        {
          "text": "Run `pnpm install --filter <project_name>` to add the package to your workspace so Vite, ESLint, and TypeScript can see it.",
          "source_url": "https://github.com/openai/agents.md#L19",
          "evidence": "- Run `pnpm install --filter <project_name>` to add the package to your workspace so Vite, ESLint, and TypeScript can see it."
        },
        {
          "text": "Use `pnpm create vite@latest <project_name> -- --template react-ts` to spin up a new React + Vite package with TypeScript checks ready.",
          "source_url": "https://github.com/openai/agents.md#L20",
          "evidence": "- Use `pnpm create vite@latest <project_name> -- --template react-ts` to spin up a new React + Vite package with TypeScript checks ready."
        },
        {
          "text": "Run `pnpm turbo run test --filter <project_name>` to run every check defined for that package.",
          "source_url": "https://github.com/openai/agents.md#L25",
          "evidence": "- Run `pnpm turbo run test --filter <project_name>` to run every check defined for that package."
        },
        {
          "text": "To focus on one step, add the Vitest pattern: `pnpm vitest run -t \"<test name>\"`.",
          "source_url": "https://github.com/openai/agents.md#L27",
          "evidence": "- To focus on one step, add the Vitest pattern: `pnpm vitest run -t \"<test name>\"`."
        },
        {
          "text": "After moving files or changing imports, run `pnpm lint --filter <project_name>` to be sure ESLint and TypeScript rules still pass.",
          "source_url": "https://github.com/openai/agents.md#L29",
          "evidence": "- After moving files or changing imports, run `pnpm lint --filter <project_name>` to be sure ESLint and TypeScript rules still pass."
        },
        {
          "text": "Always run `pnpm lint` and `pnpm test` before committing.",
          "source_url": "https://github.com/openai/agents.md#L34",
          "evidence": "- Always run `pnpm lint` and `pnpm test` before committing."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "rust-lang/rustfmt",
      "url": "https://github.com/rust-lang/rustfmt",
      "stars": 6629,
      "language": "Rust",
      "features": [
        {
          "text": "provide a minimal travis ci",
          "source_url": "https://github.com/rust-lang/rustfmt#L9",
          "evidence": "You can use rustfmt in Travis CI builds. We provide a minimal Travis CI"
        },
        {
          "text": "run `rustfmt` with rust 1",
          "source_url": "https://github.com/rust-lang/rustfmt#L14",
          "evidence": "You can run `rustfmt` with Rust 1.24 and above."
        },
        {
          "text": "run on a cargo project in the current working directory:",
          "source_url": "https://github.com/rust-lang/rustfmt#L24",
          "evidence": "To run on a cargo project in the current working directory:"
        },
        {
          "text": "run on a cargo project in the current working directory:",
          "source_url": "https://github.com/rust-lang/rustfmt#L40",
          "evidence": "To run on a cargo project in the current working directory:"
        },
        {
          "text": "includes macro expansion)",
          "source_url": "https://github.com/rust-lang/rustfmt#L60",
          "evidence": "stage of compilation and in Rust includes macro expansion)."
        },
        {
          "text": "run rustfmt by just typing `rustfmt filename` if you used `cargo",
          "source_url": "https://github.com/rust-lang/rustfmt#L76",
          "evidence": "You can run Rustfmt by just typing `rustfmt filename` if you used `cargo"
        },
        {
          "text": "includes out of line",
          "source_url": "https://github.com/rust-lang/rustfmt#L77",
          "evidence": "install`. This runs rustfmt on the given file, if the file includes out of line"
        },
        {
          "text": "runs rustfmt on the given file, if the file includes out of line",
          "source_url": "https://github.com/rust-lang/rustfmt#L77",
          "evidence": "install`. This runs rustfmt on the given file, if the file includes out of line"
        },
        {
          "text": "run on a whole module or crate, you",
          "source_url": "https://github.com/rust-lang/rustfmt#L78",
          "evidence": "modules, then we reformat those too. So to run on a whole module or crate, you"
        },
        {
          "text": "run on the root file (usually mod",
          "source_url": "https://github.com/rust-lang/rustfmt#L79",
          "evidence": "just need to run on the root file (usually mod.rs or lib.rs). Rustfmt can also"
        },
        {
          "text": "run `rustfmt --help` for information about available arguments",
          "source_url": "https://github.com/rust-lang/rustfmt#L83",
          "evidence": "You can run `rustfmt --help` for information about available arguments."
        },
        {
          "text": "run rustfmt against a project is with `cargo fmt`",
          "source_url": "https://github.com/rust-lang/rustfmt#L84",
          "evidence": "The easiest way to run rustfmt against a project is with `cargo fmt`. `cargo fmt` works on both"
        },
        {
          "text": "support `--check`, use `--write-mode diff`)",
          "source_url": "https://github.com/rust-lang/rustfmt#L128",
          "evidence": "support `--check`, use `--write-mode diff`)."
        },
        {
          "text": "run rustfmt after this, use `cargo run --bin rustfmt -- filename`",
          "source_url": "https://github.com/rust-lang/rustfmt#L151",
          "evidence": "To run rustfmt after this, use `cargo run --bin rustfmt -- filename`. See the"
        },
        {
          "text": "create a toml file called",
          "source_url": "https://github.com/rust-lang/rustfmt#L157",
          "evidence": "Rustfmt is designed to be very configurable. You can create a TOML file called"
        },
        {
          "text": "configure the `edition` in your `rustfmt",
          "source_url": "https://github.com/rust-lang/rustfmt#L175",
          "evidence": "When running `cargo fmt`, the `edition` is automatically read from the `Cargo.toml` file. However, when running `rustfmt` directly, the `edition` defaults to 2015. For consistent parsing between rustfmt and `cargo fmt`, you should configure the `edition` in your `rustfmt.toml` file:"
        },
        {
          "text": "configure the `edition` in your `rustfmt",
          "source_url": "https://github.com/rust-lang/rustfmt#L199",
          "evidence": "* To ensure consistent parsing between `cargo fmt` and `rustfmt`, you should configure the [`edition`](#rusts-editions) in your `rustfmt.toml` file."
        },
        {
          "text": "configure the `style_edition` in your `rustfmt",
          "source_url": "https://github.com/rust-lang/rustfmt#L200",
          "evidence": "* To ensure consistent formatting between `cargo fmt` and `rustfmt`, you should configure the [`style_edition`](#style-editions) in your `rustfmt.toml` file."
        },
        {
          "text": "run rustfmt, place a file named `rustfmt",
          "source_url": "https://github.com/rust-lang/rustfmt#L219",
          "evidence": "* When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in"
        },
        {
          "text": "generate a file containing the default configuration with",
          "source_url": "https://github.com/rust-lang/rustfmt#L221",
          "evidence": "rustfmt. You can generate a file containing the default configuration with"
        },
        {
          "text": "customize as needed",
          "source_url": "https://github.com/rust-lang/rustfmt#L222",
          "evidence": "`rustfmt --print-config default rustfmt.toml` and customize as needed."
        },
        {
          "text": "To ensure consistent parsing between `cargo fmt` and `rustfmt`, you should configure the `edition` in your `rustfmt.toml` file.",
          "source_url": "https://github.com/rust-lang/rustfmt#L199",
          "evidence": "* To ensure consistent parsing between `cargo fmt` and `rustfmt`, you should configure the [`edition`](#rusts-editions) in your `rustfmt.toml` file."
        },
        {
          "text": "To ensure consistent formatting between `cargo fmt` and `rustfmt`, you should configure the `style_edition` in your `rustfmt.toml` file.",
          "source_url": "https://github.com/rust-lang/rustfmt#L200",
          "evidence": "* To ensure consistent formatting between `cargo fmt` and `rustfmt`, you should configure the [`style_edition`](#style-editions) in your `rustfmt.toml` file."
        },
        {
          "text": "When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in",
          "source_url": "https://github.com/rust-lang/rustfmt#L219",
          "evidence": "* When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "lancedb/lance",
      "url": "https://github.com/lancedb/lance",
      "stars": 5604,
      "language": "Rust",
      "features": [
        {
          "text": "LanceDB, a serverless, low-latency vector database for ML applications",
          "source_url": "https://github.com/lancedb/lance#L255",
          "evidence": "* [LanceDB](https://github.com/lancedb/lancedb), a serverless, low-latency vector database for ML applications"
        },
        {
          "text": "LanceDB Enterprise, hyperscale LanceDB with enterprise SLA.",
          "source_url": "https://github.com/lancedb/lance#L256",
          "evidence": "* [LanceDB Enterprise](https://docs.lancedb.com/enterprise/introduction), hyperscale LanceDB with enterprise SLA."
        },
        {
          "text": "Leading multimodal Gen AI companies for training over petabyte-scale multimodal data.",
          "source_url": "https://github.com/lancedb/lance#L257",
          "evidence": "* Leading multimodal Gen AI companies for training over petabyte-scale multimodal data."
        },
        {
          "text": "Self-driving car company for large-scale storage, retrieval and processing of multi-modal data.",
          "source_url": "https://github.com/lancedb/lance#L258",
          "evidence": "* Self-driving car company for large-scale storage, retrieval and processing of multi-modal data."
        },
        {
          "text": "E-commerce company for billion-scale+ vector personalized search.",
          "source_url": "https://github.com/lancedb/lance#L259",
          "evidence": "* E-commerce company for billion-scale+ vector personalized search."
        },
        {
          "text": "building search engines and feature stores",
          "source_url": "https://github.com/lancedb/lance#L35",
          "evidence": "1. Building search engines and feature stores."
        },
        {
          "text": "manage versions of your data without needing extra infrastructure",
          "source_url": "https://github.com/lancedb/lance#L45",
          "evidence": "* **Zero-copy, automatic versioning:** manage versions of your data without needing extra infrastructure."
        },
        {
          "text": "import pandas as pd",
          "source_url": "https://github.com/lancedb/lance#L77",
          "evidence": "import pandas as pd"
        },
        {
          "text": "import pyarrow as pa",
          "source_url": "https://github.com/lancedb/lance#L78",
          "evidence": "import pyarrow as pa"
        },
        {
          "text": "import vec_to_table",
          "source_url": "https://github.com/lancedb/lance#L123",
          "evidence": "from lance.vector import vec_to_table"
        },
        {
          "text": "import numpy as np",
          "source_url": "https://github.com/lancedb/lance#L124",
          "evidence": "import numpy as np"
        },
        {
          "text": "support both cpus (``x86_64`` and ``arm``) and gpu (``nvidia (cuda)`` and ``apple silicon (mps)``)",
          "source_url": "https://github.com/lancedb/lance#L179",
          "evidence": "Support both CPUs (``x86_64`` and ``arm``) and GPU (``Nvidia (cuda)`` and ``Apple Silicon (mps)``)."
        },
        {
          "text": "support efficient filters like \u201cfind images where detected objects include cats\u201d",
          "source_url": "https://github.com/lancedb/lance#L183",
          "evidence": "**Nested fields**: Lance stores each subfield as a separate column to support efficient filters like \u201cfind images where detected objects include cats\u201d."
        },
        {
          "text": "support creating new versions automatically via appends, overwrites, and index creation",
          "source_url": "https://github.com/lancedb/lance#L185",
          "evidence": "**Versioning**: A Manifest can be used to record snapshots. Currently we support creating new versions automatically via appends, overwrites, and index creation."
        },
        {
          "text": "support `btree`, `bitmap`, `full text search`, `label list`,",
          "source_url": "https://github.com/lancedb/lance#L189",
          "evidence": "**Rich secondary indices**: Support `BTree`, `Bitmap`, `Full text search`, `Label list`,"
        },
        {
          "text": "create a lance dataset using the oxford pet dataset to do some preliminary performance testing of lance as compared to parquet and raw image/xmls",
          "source_url": "https://github.com/lancedb/lance#L208",
          "evidence": "We create a Lance dataset using the Oxford Pet dataset to do some preliminary performance testing of Lance as compared to Parquet and raw image/XMLs. For analytics queries, Lance is 50-100x better than reading the raw metadata. For batched random access, Lance is 100x better than both parquet and raw files."
        },
        {
          "text": "building yet another data format",
          "source_url": "https://github.com/lancedb/lance#L212",
          "evidence": "## Why are you building yet another data format?!"
        },
        {
          "text": "integrate into data infrastructure and slow to train over cloud storage",
          "source_url": "https://github.com/lancedb/lance#L231",
          "evidence": "is difficult to integrate into data infrastructure and slow to train over cloud storage."
        },
        {
          "text": "analyze data, they have to convert the data into training-friendly formats, such",
          "source_url": "https://github.com/lancedb/lance#L233",
          "evidence": "or Google BigQuery) to collect and analyze data, they have to convert the data into training-friendly formats, such"
        },
        {
          "text": "support       | rich  | rich          | decent     | limited  | rich     | rich      |",
          "source_url": "https://github.com/lancedb/lance#L250",
          "evidence": "| Infra Support       | Rich  | Rich          | Decent     | Limited  | Rich     | Rich      |"
        },
        {
          "text": "processing of multi-modal data",
          "source_url": "https://github.com/lancedb/lance#L258",
          "evidence": "* Self-driving car company for large-scale storage, retrieval and processing of multi-modal data."
        },
        {
          "text": "High-performance random access: 100x faster than Parquet without sacrificing scan performance.",
          "source_url": "https://github.com/lancedb/lance#L41",
          "evidence": "* **High-performance random access:** 100x faster than Parquet without sacrificing scan performance."
        },
        {
          "text": "Zero-copy, automatic versioning: manage versions of your data without needing extra infrastructure.",
          "source_url": "https://github.com/lancedb/lance#L45",
          "evidence": "* **Zero-copy, automatic versioning:** manage versions of your data without needing extra infrastructure."
        },
        {
          "text": "*Nested fields**: Lance stores each subfield as a separate column to support efficient filters like \u201cfind images where detected objects include cats\u201d.",
          "source_url": "https://github.com/lancedb/lance#L183",
          "evidence": "**Nested fields**: Lance stores each subfield as a separate column to support efficient filters like \u201cfind images where detected objects include cats\u201d."
        },
        {
          "text": "*Versioning**: A Manifest can be used to record snapshots. Currently we support creating new versions automatically via appends, overwrites, and index creation.",
          "source_url": "https://github.com/lancedb/lance#L185",
          "evidence": "**Versioning**: A Manifest can be used to record snapshots. Currently we support creating new versions automatically via appends, overwrites, and index creation."
        },
        {
          "text": "*Fast updates** (ROADMAP): Updates will be supported via write-ahead logs.",
          "source_url": "https://github.com/lancedb/lance#L187",
          "evidence": "**Fast updates** (ROADMAP): Updates will be supported via write-ahead logs."
        },
        {
          "text": "*Rich secondary indices**: Support `BTree`, `Bitmap`, `Full text search`, `Label list`,",
          "source_url": "https://github.com/lancedb/lance#L189",
          "evidence": "**Rich secondary indices**: Support `BTree`, `Bitmap`, `Full text search`, `Label list`,"
        },
        {
          "text": "Self-driving car company for large-scale storage, retrieval and processing of multi-modal data.",
          "source_url": "https://github.com/lancedb/lance#L258",
          "evidence": "* Self-driving car company for large-scale storage, retrieval and processing of multi-modal data."
        },
        {
          "text": "Transforming Multimodal Data Management with LanceDB, Ray Summit, Oct 2024.",
          "source_url": "https://github.com/lancedb/lance#L265",
          "evidence": "* [Transforming Multimodal Data Management with LanceDB, Ray Summit](https://www.youtube.com/watch?v=xmTFEzAh8ho), Oct 2024."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "umpirsky/country-list",
      "url": "https://github.com/umpirsky/country-list",
      "stars": 5242,
      "language": "HTML",
      "features": [
        {
          "text": "run php /var/www/html/bin/build -v",
          "source_url": "https://github.com/umpirsky/country-list#L60",
          "evidence": "$ docker-compose run php /var/www/html/bin/build -v"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "theseer/tokenizer",
      "url": "https://github.com/theseer/tokenizer",
      "stars": 5200,
      "language": "PHP",
      "features": [
        {
          "text": "run your project's test suite, then you should add it as a development-time dependency:",
          "source_url": "https://github.com/theseer/tokenizer#L13",
          "evidence": "If you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "TheLartians/ModernCppStarter",
      "url": "https://github.com/TheLartians/ModernCppStarter",
      "stars": 5102,
      "language": "CMake",
      "features": [
        {
          "text": "Modern CMake practices",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L19",
          "evidence": "- [Modern CMake practices](https://pabloariasal.github.io/2018/02/19/its-time-to-do-cmake-right/)"
        },
        {
          "text": "Suited for single header libraries and projects of any scale",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L20",
          "evidence": "- Suited for single header libraries and projects of any scale"
        },
        {
          "text": "Clean separation of library and executable code",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L21",
          "evidence": "- Clean separation of library and executable code"
        },
        {
          "text": "Integrated test suite",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L22",
          "evidence": "- Integrated test suite"
        },
        {
          "text": "Continuous integration via GitHub Actions",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L23",
          "evidence": "- Continuous integration via [GitHub Actions](https://help.github.com/en/actions/)"
        },
        {
          "text": "Code coverage via codecov",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L24",
          "evidence": "- Code coverage via [codecov](https://codecov.io)"
        },
        {
          "text": "Code formatting enforced by clang-format and cmake-format via Format.cmake",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L25",
          "evidence": "- Code formatting enforced by [clang-format](https://clang.llvm.org/docs/ClangFormat.html) and [cmake-format](https://github.com/cheshirekow/cmake_format) via [Format.cmake](https://github.com/TheLartians/Format.cmake)"
        },
        {
          "text": "Reproducible dependency management via CPM.cmake",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L26",
          "evidence": "- Reproducible dependency management via [CPM.cmake](https://github.com/TheLartians/CPM.cmake)"
        },
        {
          "text": "Installable target with automatic versioning information and header generation via PackageProject.cmake",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L27",
          "evidence": "- Installable target with automatic versioning information and header generation via [PackageProject.cmake](https://github.com/TheLartians/PackageProject.cmake)"
        },
        {
          "text": "Automatic documentation and deployment with Doxygen and GitHub Pages",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L28",
          "evidence": "- Automatic [documentation](https://thelartians.github.io/ModernCppStarter) and deployment with [Doxygen](https://www.doxygen.nl) and [GitHub Pages](https://pages.github.com)"
        },
        {
          "text": "Support for sanitizer tools, and more",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L29",
          "evidence": "- Support for [sanitizer tools, and more](#additional-tools)"
        },
        {
          "text": "support for sanitizer tools, and more",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L29",
          "evidence": "- Support for [sanitizer tools, and more](#additional-tools)"
        },
        {
          "text": "build all subprojects at once](#build-everything-at-once)",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L48",
          "evidence": "During development it is usually convenient to [build all subprojects at once](#build-everything-at-once)."
        },
        {
          "text": "build and run the standalone target",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L50",
          "evidence": "### Build and run the standalone target"
        },
        {
          "text": "run the standalone target",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L50",
          "evidence": "### Build and run the standalone target"
        },
        {
          "text": "build and run the executable target",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L52",
          "evidence": "Use the following command to build and run the executable target."
        },
        {
          "text": "run the executable target",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L52",
          "evidence": "Use the following command to build and run the executable target."
        },
        {
          "text": "build build/standalone",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L56",
          "evidence": "cmake --build build/standalone"
        },
        {
          "text": "build and run test suite",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L60",
          "evidence": "### Build and run test suite"
        },
        {
          "text": "run the test suite",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L62",
          "evidence": "Use the following commands from the project's root directory to run the test suite."
        },
        {
          "text": "build build/test",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L66",
          "evidence": "cmake --build build/test"
        },
        {
          "text": "build build/test --target test",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L67",
          "evidence": "CTEST_OUTPUT_ON_FAILURE=1 cmake --build build/test --target test"
        },
        {
          "text": "run cmake with the `-denable_test_coverage=1` option",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L73",
          "evidence": "To collect code coverage information, run CMake with the `-DENABLE_TEST_COVERAGE=1` option."
        },
        {
          "text": "run clang-format",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L75",
          "evidence": "### Run clang-format"
        },
        {
          "text": "build build/test --target format",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L84",
          "evidence": "cmake --build build/test --target format"
        },
        {
          "text": "build build/test --target fix-format",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L87",
          "evidence": "cmake --build build/test --target fix-format"
        },
        {
          "text": "build the documentation",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L97",
          "evidence": "### Build the documentation"
        },
        {
          "text": "build documentation, call the following command",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L100",
          "evidence": "To manually build documentation, call the following command."
        },
        {
          "text": "build build/doc --target generatedocs",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L104",
          "evidence": "cmake --build build/doc --target GenerateDocs"
        },
        {
          "text": "build the documentation locally, you will need doxygen, jinja2 and pygments installed on your system",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L109",
          "evidence": "To build the documentation locally, you will need Doxygen, jinja2 and Pygments installed on your system."
        },
        {
          "text": "build everything at once",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L111",
          "evidence": "### Build everything at once"
        },
        {
          "text": "allows building all targets at the same time",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L113",
          "evidence": "The project also includes an `all` directory that allows building all targets at the same time."
        },
        {
          "text": "includes an `all` directory that allows building all targets at the same time",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L113",
          "evidence": "The project also includes an `all` directory that allows building all targets at the same time."
        },
        {
          "text": "building all targets at the same time",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L113",
          "evidence": "The project also includes an `all` directory that allows building all targets at the same time."
        },
        {
          "text": "builds of the library",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L114",
          "evidence": "This is useful during development, as it exposes all subprojects to your IDE and avoids redundant builds of the library."
        },
        {
          "text": "build build --target fix-format",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L123",
          "evidence": "cmake --build build --target fix-format"
        },
        {
          "text": "build build --target generatedocs",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L127",
          "evidence": "cmake --build build --target GenerateDocs"
        },
        {
          "text": "include the [tools",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L132",
          "evidence": "The test and standalone subprojects include the [tools.cmake](cmake/tools.cmake) file which is used to import additional tools on-demand through CMake configuration arguments."
        },
        {
          "text": "import additional tools on-demand through cmake configuration arguments",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L132",
          "evidence": "The test and standalone subprojects include the [tools.cmake](cmake/tools.cmake) file which is used to import additional tools on-demand through CMake configuration arguments."
        },
        {
          "text": "build the standalone and tests at the same time",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L160",
          "evidence": "> Can I build the standalone and tests at the same time? / How can I tell my IDE about all subprojects?"
        },
        {
          "text": "allow ides to see the full scope of the project, the template includes the `all` directory that will create a single build for all subprojects",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L164",
          "evidence": "To allow IDEs to see the full scope of the project, the template includes the `all` directory that will create a single build for all subprojects."
        },
        {
          "text": "includes the `all` directory that will create a single build for all subprojects",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L164",
          "evidence": "To allow IDEs to see the full scope of the project, the template includes the `all` directory that will create a single build for all subprojects."
        },
        {
          "text": "create a single build for all subprojects",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L164",
          "evidence": "To allow IDEs to see the full scope of the project, the template includes the `all` directory that will create a single build for all subprojects."
        },
        {
          "text": "build for all subprojects",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L164",
          "evidence": "To allow IDEs to see the full scope of the project, the template includes the `all` directory that will create a single build for all subprojects."
        },
        {
          "text": "create additional targets that depend on my library",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L172",
          "evidence": "> I want create additional targets that depend on my library. Should I modify the main CMakeLists to include them?"
        },
        {
          "text": "build system hard to reason about",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L174",
          "evidence": "Avoid including derived projects from the libraries CMakeLists (even though it is a common sight in the C++ world), as this effectively inverts the dependency tree and makes the build system hard to reason about."
        },
        {
          "text": "create a new directory or project with a cmakelists that adds the library as a dependency (e",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L175",
          "evidence": "Instead, create a new directory or project with a CMakeLists that adds the library as a dependency (e.g. like the [standalone](standalone/CMakeLists.txt) directory)."
        },
        {
          "text": "enable users to use the project with their favorite external c++ dependency manager, such as vcpkg or conan",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L183",
          "evidence": "This should also enable users to use the project with their favorite external C++ dependency manager, such as vcpkg or Conan."
        },
        {
          "text": "build my project offline",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L185",
          "evidence": "> Can I configure and build my project offline?"
        },
        {
          "text": "configure and build my project offline",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L185",
          "evidence": "> Can I configure and build my project offline?"
        },
        {
          "text": "building the project, however when using cpm missing dependencies are downloaded at configure time",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L187",
          "evidence": "No internet connection is required for building the project, however when using CPM missing dependencies are downloaded at configure time."
        },
        {
          "text": "export cpm_source_cache=$home/",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L188",
          "evidence": "To avoid redundant downloads, it's highly recommended to set a CPM.cmake cache directory, e.g.: `export CPM_SOURCE_CACHE=$HOME/.cache/CPM`."
        },
        {
          "text": "enable shallow clones and allow offline configurations dependencies are already available in the cache",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L189",
          "evidence": "This will enable shallow clones and allow offline configurations dependencies are already available in the cache."
        },
        {
          "text": "allow offline configurations dependencies are already available in the cache",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L189",
          "evidence": "This will enable shallow clones and allow offline configurations dependencies are already available in the cache."
        },
        {
          "text": "create a package installer for my project",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L191",
          "evidence": "> Can I use CPack to create a package installer for my project?"
        },
        {
          "text": "Integrated test suite",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L22",
          "evidence": "- Integrated test suite"
        },
        {
          "text": "Reproducible dependency management via CPM.cmake",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L26",
          "evidence": "- Reproducible dependency management via [CPM.cmake](https://github.com/TheLartians/CPM.cmake)"
        },
        {
          "text": "Support for sanitizer tools, and more",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L29",
          "evidence": "- Support for [sanitizer tools, and more](#additional-tools)"
        },
        {
          "text": "- Remember to rename the `include/greeter` directory to use your project's lowercase name and update all relevant `#include`s accordingly.",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L38",
          "evidence": "- Remember to rename the `include/greeter` directory to use your project's lowercase name and update all relevant `#include`s accordingly."
        },
        {
          "text": "ModernCppStarter & PVS-Studio Static Code Analyzer: Official instructions on how to use the ModernCppStarter with the PVS-Studio Static Code Analyzer.",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L201",
          "evidence": "- [**ModernCppStarter & PVS-Studio Static Code Analyzer**](https://github.com/viva64/pvs-studio-cmake-examples/tree/master/modern-cpp-starter): Official instructions on how to use the ModernCppStarter with the PVS-Studio Static Code Analyzer."
        },
        {
          "text": "cpp-best-practices/gui_starter_template: A popular C++ starter project, created in 2017.",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L202",
          "evidence": "- [**cpp-best-practices/gui_starter_template**](https://github.com/cpp-best-practices/gui_starter_template/): A popular C++ starter project, created in 2017."
        },
        {
          "text": "filipdutescu/modern-cpp-template: A recent starter using a more traditional approach for CMake structure and dependency management.",
          "source_url": "https://github.com/TheLartians/ModernCppStarter#L203",
          "evidence": "- [**filipdutescu/modern-cpp-template**](https://github.com/filipdutescu/modern-cpp-template): A recent starter using a more traditional approach for CMake structure and dependency management."
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "hhatto/autopep8",
      "url": "https://github.com/hhatto/autopep8",
      "stars": 4642,
      "language": "Python",
      "features": [
        {
          "text": "import math, sys;",
          "source_url": "https://github.com/hhatto/autopep8#L59",
          "evidence": "import math, sys;"
        },
        {
          "text": "run recursively over directories; must be used with",
          "source_url": "https://github.com/hhatto/autopep8#L160",
          "evidence": "-r, --recursive       run recursively over directories; must be used with"
        },
        {
          "text": "enable non-whitespace changes; multiple -a result in",
          "source_url": "https://github.com/hhatto/autopep8#L167",
          "evidence": "-a, --aggressive      enable non-whitespace changes; multiple -a result in"
        },
        {
          "text": "enable experimental fixes",
          "source_url": "https://github.com/hhatto/autopep8#L169",
          "evidence": "--experimental        enable experimental fixes"
        },
        {
          "text": "imports on separate lines",
          "source_url": "https://github.com/hhatto/autopep8#L229",
          "evidence": "E401 - Put imports on separate lines."
        },
        {
          "text": "import not at top of file",
          "source_url": "https://github.com/hhatto/autopep8#L230",
          "evidence": "E402 - Fix module level import not at top of file"
        },
        {
          "text": "enable only a subset of the fixes, use the ``--select`` option",
          "source_url": "https://github.com/hhatto/autopep8#L293",
          "evidence": "To enable only a subset of the fixes, use the ``--select`` option. For example,"
        },
        {
          "text": "enable verbose progress",
          "source_url": "https://github.com/hhatto/autopep8#L298",
          "evidence": "If the file being fixed is large, you may want to enable verbose progress"
        },
        {
          "text": "enables the following functionality:",
          "source_url": "https://github.com/hhatto/autopep8#L303",
          "evidence": "Passing in ``--experimental`` enables the following functionality:"
        },
        {
          "text": "run `pre-commit autoupdate`",
          "source_url": "https://github.com/hhatto/autopep8#L395",
          "evidence": "rev: ...  # select the tag or revision you want, or run `pre-commit autoupdate`"
        },
        {
          "text": "run directly via",
          "source_url": "https://github.com/hhatto/autopep8#L405",
          "evidence": "Test cases are in ``test/test_autopep8.py``. They can be run directly via"
        },
        {
          "text": "run ``autopep8``",
          "source_url": "https://github.com/hhatto/autopep8#L426",
          "evidence": "``pkg_resources.DistributionNotFound`` when trying to run ``autopep8``. Try"
        },
        {
          "text": "-r, --recursive       run recursively over directories; must be used with",
          "source_url": "https://github.com/hhatto/autopep8#L160",
          "evidence": "-r, --recursive       run recursively over directories; must be used with"
        },
        {
          "text": "-a, --aggressive      enable non-whitespace changes; multiple -a result in",
          "source_url": "https://github.com/hhatto/autopep8#L167",
          "evidence": "-a, --aggressive      enable non-whitespace changes; multiple -a result in"
        },
        {
          "text": "--experimental        enable experimental fixes",
          "source_url": "https://github.com/hhatto/autopep8#L169",
          "evidence": "--experimental        enable experimental fixes"
        },
        {
          "text": "--max-line-length n   set maximum allowed line length (default: 79)",
          "source_url": "https://github.com/hhatto/autopep8#L176",
          "evidence": "--max-line-length n   set maximum allowed line length (default: 79)"
        },
        {
          "text": "Remove blank lines between a function declaration and its docstring. (Enabled",
          "source_url": "https://github.com/hhatto/autopep8#L255",
          "evidence": "- Remove blank lines between a function declaration and its docstring. (Enabled"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    },
    {
      "name": "prettier/prettier-eslint",
      "url": "https://github.com/prettier/prettier-eslint",
      "stars": 4096,
      "language": "TypeScript",
      "features": [
        {
          "text": "build status][build-badge]][build]",
          "source_url": "https://github.com/prettier/prettier-eslint#L5",
          "evidence": "[![Build Status][build-badge]][build]"
        },
        {
          "text": "runs `prettier` since `eslint` cannot process those",
          "source_url": "https://github.com/prettier/prettier-eslint#L36",
          "evidence": "> runs `prettier` since `eslint` cannot process those."
        },
        {
          "text": "create the options based on the `eslintconfig`",
          "source_url": "https://github.com/prettier/prettier-eslint#L99",
          "evidence": "`prettier-eslint` will attempt to create the options based on the `eslintConfig`"
        },
        {
          "text": "create the options based on the the `eslintconfig` (whether that's",
          "source_url": "https://github.com/prettier/prettier-eslint#L111",
          "evidence": "able to create the options based on the the `eslintConfig` (whether that's"
        },
        {
          "text": "provide the full path to it with the `eslintpath` option",
          "source_url": "https://github.com/prettier/prettier-eslint#L128",
          "evidence": "use, then you can provide the full path to it with the `eslintPath` option."
        },
        {
          "text": "run `prettier` first, then `eslint --fix`",
          "source_url": "https://github.com/prettier/prettier-eslint#L136",
          "evidence": "By default, `prettier-eslint` will run `prettier` first, then `eslint --fix`."
        },
        {
          "text": "provide `prettierlast: true`, it will run `eslint --fix` first, then `prettier`",
          "source_url": "https://github.com/prettier/prettier-eslint#L141",
          "evidence": "provide `prettierLast: true`, it will run `eslint --fix` first, then `prettier`."
        },
        {
          "text": "run `eslint --fix` first, then `prettier`",
          "source_url": "https://github.com/prettier/prettier-eslint#L141",
          "evidence": "provide `prettierLast: true`, it will run `eslint --fix` first, then `prettier`."
        },
        {
          "text": "allows you to use `eslint` to look for bugs and/or bad practices, and use",
          "source_url": "https://github.com/prettier/prettier-eslint#L142",
          "evidence": "This allows you to use `eslint` to look for bugs and/or bad practices, and use"
        },
        {
          "text": "analyze } = require('prettier-eslint');",
          "source_url": "https://github.com/prettier/prettier-eslint#L154",
          "evidence": "const { analyze } = require('prettier-eslint');"
        },
        {
          "text": "export `analyze` is identical to `format` except that it",
          "source_url": "https://github.com/prettier/prettier-eslint#L182",
          "evidence": "The additional export `analyze` is identical to `format` except that it"
        },
        {
          "text": "perform the formatting but also capture any errors that",
          "source_url": "https://github.com/prettier/prettier-eslint#L187",
          "evidence": "would like to perform the formatting but also capture any errors that"
        },
        {
          "text": "plugin (check the \"eslint integration\"",
          "source_url": "https://github.com/prettier/prettier-eslint#L291",
          "evidence": "- [`prettier-atom`][atom-plugin] - Atom plugin (check the \"ESlint integration\""
        },
        {
          "text": "integrates it with the regular eslint workflow",
          "source_url": "https://github.com/prettier/prettier-eslint#L295",
          "evidence": "ESLint plugin. While `prettier-eslint` uses `eslint --fix` to change the output of `prettier`, `eslint-plugin-prettier` keeps the `prettier` output as-is and integrates it with the regular ESLint workflow."
        },
        {
          "text": "*An important thing to note** about this inference is that it may not support",
          "source_url": "https://github.com/prettier/prettier-eslint#L204",
          "evidence": "**An important thing to note** about this inference is that it may not support"
        },
        {
          "text": "[`prettier-atom`][atom-plugin] - Atom plugin (check the \"ESlint integration\"",
          "source_url": "https://github.com/prettier/prettier-eslint#L291",
          "evidence": "- [`prettier-atom`][atom-plugin] - Atom plugin (check the \"ESlint integration\""
        },
        {
          "text": "[`vs-code-prettier-eslint`][vscode-plugin] - Visual Studio Code plugin",
          "source_url": "https://github.com/prettier/prettier-eslint#L293",
          "evidence": "- [`vs-code-prettier-eslint`][vscode-plugin] - Visual Studio Code plugin"
        },
        {
          "text": "`eslint-plugin-prettier` -",
          "source_url": "https://github.com/prettier/prettier-eslint#L294",
          "evidence": "- [`eslint-plugin-prettier`](https://github.com/prettier/eslint-plugin-prettier) -"
        },
        {
          "text": "`prettier-eslint-webpack-plugin` -",
          "source_url": "https://github.com/prettier/prettier-eslint#L296",
          "evidence": "- [`prettier-eslint-webpack-plugin`](https://github.com/danielterwiel/prettier-eslint-webpack-plugin) -"
        }
      ],
      "feature_count": 0,
      "coverage": 0.0
    }
  ],
  "features": [
    {
      "text": "run [in your editor](https://prettier",
      "normalized_text": "Run [in your editor](https://prettier",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier#L79",
          "evidence": "Prettier can be run [in your editor](https://prettier.io/docs/editors) on-save, in a [pre-commit hook](https://prettier.io/docs/precommit), or in [CI environments](https://prettier.io/docs/cli#list-different) to ensure your codebase has a consistent style without devs ever having to post a nit-picky comment on a code review ever again!"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run ruff as a linter, try any of the following:",
      "normalized_text": "Run ruff as a linter, try any of the following:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L159",
          "evidence": "To run Ruff as a linter, try any of the following:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run ruff as a formatter:",
      "normalized_text": "Run ruff as a formatter:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L169",
          "evidence": "Or, to run Ruff as a formatter:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the formatter",
      "normalized_text": "Run the formatter",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L189",
          "evidence": "# Run the formatter."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable pyflakes (`f`) and a subset of the pycodestyle (`e`) codes by default",
      "normalized_text": "Enable pyflakes (`f`) and a subset of the pycodestyle (`e`) codes by default",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L256",
          "evidence": "# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow fix for all enabled rules (when `--fix`) is provided",
      "normalized_text": "Allow fix for all enabled rules (when `--fix`) is provided",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L260",
          "evidence": "# Allow fix for all enabled rules (when `--fix`) is provided."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow unused variables when underscore-prefixed",
      "normalized_text": "Allow unused variables when underscore-prefixed",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L264",
          "evidence": "# Allow unused variables when underscore-prefixed."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enables a collection of unstable",
      "normalized_text": "Enables a collection of unstable",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L299",
          "evidence": "file or passing `--preview` on the command line. Preview mode enables a collection of unstable"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Ruff supports over 800 lint rules**, many of which are inspired by popular tools like Flake8,",
      "normalized_text": "*ruff supports over 800 lint rules**, many of which are inspired by popular tools like flake8,",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L309",
          "evidence": "**Ruff supports over 800 lint rules**, many of which are inspired by popular tools like Flake8,"
        },
        {
          "url": "https://github.com/astral-sh/ruff#L309",
          "evidence": "**Ruff supports over 800 lint rules**, many of which are inspired by popular tools like Flake8,"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "implements every rule in",
      "normalized_text": "Implements every rule in",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L310",
          "evidence": "isort, pyupgrade, and others. Regardless of the rule's origin, Ruff re-implements every rule in"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enables flake8's `f` rules, along with a subset of the `e` rules, omitting any",
      "normalized_text": "Enables flake8's `f` rules, along with a subset of the `e` rules, omitting any",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L313",
          "evidence": "By default, Ruff enables Flake8's `F` rules, along with a subset of the `E` rules, omitting any"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "implements some of the most popular flake8 plugins and related code",
      "normalized_text": "Implements some of the most popular flake8 plugins and related code",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L322",
          "evidence": "Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugins and related code",
      "normalized_text": "Plugins and related code",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L322",
          "evidence": "Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "includes a \"direct\" rust port of the corresponding tool",
      "normalized_text": "Includes a \"direct\" rust port of the corresponding tool",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L402",
          "evidence": "In some cases, Ruff includes a \"direct\" Rust port of the corresponding tool."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import resolver is based on the import resolution algorithm from [pyright](https://github",
      "normalized_text": "Import resolver is based on the import resolution algorithm from [pyright](https://github",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L410",
          "evidence": "Ruff's import resolver is based on the import resolution algorithm from [Pyright](https://github.com/microsoft/pyright)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build (pypa)](https://github",
      "normalized_text": "Build (pypa)](https://github",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L513",
          "evidence": "- [build (PyPA)](https://github.com/pypa/build)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\ud83d\udee0\ufe0f `pyproject.toml` support",
      "normalized_text": "\ud83d\udee0\ufe0f `pyproject.toml` support",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L30",
          "evidence": "- \ud83d\udee0\ufe0f `pyproject.toml` support"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\ud83d\udd27 Fix support, for automatic error correction (e.g., automatically remove unused imports)",
      "normalized_text": "\ud83d\udd27 fix support, for automatic error correction (e.g., automatically remove unused imports)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L34",
          "evidence": "- \ud83d\udd27 Fix support, for automatic error correction (e.g., automatically remove unused imports)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\ud83d\udccf Over 800 built-in rules, with native re-implementations",
      "normalized_text": "\ud83d\udccf over 800 built-in rules, with native re-implementations",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L35",
          "evidence": "- \ud83d\udccf Over [800 built-in rules](https://docs.astral.sh/ruff/rules/), with native re-implementations"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "flake8-import-conventions",
      "normalized_text": "Flake8-import-conventions",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L348",
          "evidence": "- [flake8-import-conventions](https://github.com/joaopalmeiro/flake8-import-conventions)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "flake8-tidy-imports",
      "normalized_text": "Flake8-tidy-imports",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L363",
          "evidence": "- [flake8-tidy-imports](https://pypi.org/project/flake8-tidy-imports/)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "cibuildwheel (PyPA)",
      "normalized_text": "Cibuildwheel (pypa)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/astral-sh/ruff#L514",
          "evidence": "- [cibuildwheel (PyPA)](https://github.com/pypa/cibuildwheel)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run _black_ as a package if running it as a script doesn't work:",
      "normalized_text": "Run _black_ as a package if running it as a script doesn't work:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/psf/black#L57",
          "evidence": "You can run _Black_ as a package if running it as a script doesn't work:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support for new python",
      "normalized_text": "Support for new python",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/psf/black#L71",
          "evidence": "Stylistic changes will mostly be responses to bug reports and support for new Python"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure anything",
      "normalized_text": "Configure anything",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/psf/black#L129",
          "evidence": "**Pro-tip**: If you're asking yourself \"Do I need to configure anything?\" the answer is"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Pro-tip**: If you're asking yourself \"Do I need to configure anything?\" the answer is",
      "normalized_text": "*pro-tip**: if you're asking yourself \"do i need to configure anything?\" the answer is",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/psf/black#L129",
          "evidence": "**Pro-tip**: If you're asking yourself \"Do I need to configure anything?\" the answer is"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supporting its ongoing development](#funding)",
      "normalized_text": "Supporting its ongoing development](#funding)",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/rubocop/rubocop#L30",
          "evidence": "**Please consider [financially supporting its ongoing development](#funding).**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports the following runtime ruby implementations:",
      "normalized_text": "Supports the following runtime ruby implementations:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rubocop/rubocop#L79",
          "evidence": "RuboCop officially supports the following runtime Ruby implementations:"
        },
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L88",
          "evidence": "**SQLFluff** supports the following templates:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "include one of these badges in your readme to let people know that your code is written following the community ruby style guide",
      "normalized_text": "Include one of these badges in your readme to let people know that your code is written following the community ruby ...",
      "category": "Documentation",
      "sources": [
        {
          "url": "https://github.com/rubocop/rubocop#L90",
          "evidence": "If you use RuboCop in your project, you can include one of these badges in your readme to let people know that your code is written following the community Ruby Style Guide."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support the development of rubocop via",
      "normalized_text": "Support the development of rubocop via",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/rubocop/rubocop#L164",
          "evidence": "You can support the development of RuboCop via"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support us with a monthly donation and help us continue our activities",
      "normalized_text": "Support us with a monthly donation and help us continue our activities",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rubocop/rubocop#L180",
          "evidence": "Support us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/rubocop#backer)]"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*RuboCop** is a Ruby static code analyzer (a.k.a. `linter`) and code formatter. Out of the box it",
      "normalized_text": "*rubocop** is a ruby static code analyzer (a.k.a. `linter`) and code formatter. out of the box it",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rubocop/rubocop#L14",
          "evidence": "**RuboCop** is a Ruby static code analyzer (a.k.a. `linter`) and code formatter. Out of the box it"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Please consider financially supporting its ongoing development.**",
      "normalized_text": "*please consider financially supporting its ongoing development.**",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/rubocop/rubocop#L30",
          "evidence": "**Please consider [financially supporting its ongoing development](#funding).**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allowing you to focus",
      "normalized_text": "Allowing you to focus",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L19",
          "evidence": "and dbt. **SQLFluff** will auto-fix most linting errors, allowing you to focus"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports the following sql dialects (though perhaps not in ):",
      "normalized_text": "Supports the following sql dialects (though perhaps not in ):",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L39",
          "evidence": "currently supports the following SQL dialects (though perhaps not in full):"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Databricks (note: this extends the `sparksql` dialect with",
      "normalized_text": "Databricks (note: this extends the `sparksql` dialect with",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L46",
          "evidence": "- [Databricks](https://databricks.com/) (note: this extends the `sparksql` dialect with"
        },
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L46",
          "evidence": "- [Databricks](https://databricks.com/) (note: this extends the `sparksql` dialect with"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "support of these dialects and also",
      "normalized_text": "Support of these dialects and also",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L72",
          "evidence": "We aim to make it easy to expand on the support of these dialects and also"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support more templating languages/syntaxes",
      "normalized_text": "Support more templating languages/syntaxes",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L95",
          "evidence": "Again, please raise issues if you wish to support more templating languages/syntaxes."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `sqlfluff lint` or `sqlfluff fix`",
      "normalized_text": "Run `sqlfluff lint` or `sqlfluff fix`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L106",
          "evidence": "To get started, install the package and run `sqlfluff lint` or `sqlfluff fix`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*SQLFluff** supports the following templates:",
      "normalized_text": "*sqlfluff** supports the following templates:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L88",
          "evidence": "**SQLFluff** supports the following templates:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "dbt (requires plugin)",
      "normalized_text": "Dbt (requires plugin)",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/sqlfluff/sqlfluff#L93",
          "evidence": "- [dbt](https://www.getdbt.com/) (requires plugin)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support (19 languages)",
      "normalized_text": "Support (19 languages)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L16",
          "evidence": "* \u2705 **Most Comprehensive** - 151,024+ cities from 250 countries with timezone & multilingual support (19 languages)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export tool, or direct downloads",
      "normalized_text": "Export tool, or direct downloads",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L17",
          "evidence": "* \u2705 **Multiple Integration Options** - NPM/PyPI packages, REST API, Export Tool, or direct downloads"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export tool](#\ufe0f-export-tool) \u2022 available formats",
      "normalized_text": "Export tool](#\ufe0f-export-tool) \u2022 available formats",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L28",
          "evidence": "- [API](#api-) \u2022 [Export Tool](#\ufe0f-export-tool) \u2022 [Available Formats](#available-formats)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export tool** | export data in multiple formats | [export",
      "normalized_text": "Export tool** | export data in multiple formats | [export",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L43",
          "evidence": "| **Export Tool**   | Export data in multiple formats                  | [export.countrystatecity.in](https://export.countrystatecity.in/) |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "track data change requests | [manager",
      "normalized_text": "Track data change requests | [manager",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L44",
          "evidence": "| **Update Tool**   | Submit and track data change requests            | [manager.countrystatecity.in](https://manager.countrystatecity.in/) |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export tool** | < 2 min | custom datasets, specific regions | \u274c | free + credits |",
      "normalized_text": "Export tool** | < 2 min | custom datasets, specific regions | \u274c | free + credits |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L53",
          "evidence": "| **Export Tool** | < 2 min | Custom datasets, specific regions | \u274c | Free + credits |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import { country, state, city } from '@countrystatecity/countries';",
      "normalized_text": "Import { country, state, city } from '@countrystatecity/countries';",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L67",
          "evidence": "import { Country, State, City } from '@countrystatecity/countries';"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import country, state, city",
      "normalized_text": "Import country, state, city",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L82",
          "evidence": "from countrystatecity import Country, State, City"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export tool](https://export",
      "normalized_text": "Export tool](https://export",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L108",
          "evidence": "**[Export Tool](https://export.countrystatecity.in/)** - Convert and download data in your preferred format"
        },
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L316",
          "evidence": "| \ud83d\udee0\ufe0f **[Export Tool](https://export.countrystatecity.in/)** | Custom exports, specific formats | [Launch Tool](https://export.countrystatecity.in/) |"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "export to duckdb](#export-to-duckdb) section for instructions",
      "normalized_text": "Export to duckdb](#export-to-duckdb) section for instructions",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L126",
          "evidence": "**Note:** DuckDB format is available via manual conversion from SQLite files. See the [Export to DuckDB](#export-to-duckdb) section for instructions."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Two-phase build system:** JSON (version control) \u2192 MySQL (canonical) \u2192 All export formats",
      "normalized_text": "*two-phase build system:** json (version control) \u2192 mysql (canonical) \u2192 all export formats",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L161",
          "evidence": "**Two-phase build system:** JSON (version control) \u2192 MySQL (canonical) \u2192 All export formats"
        },
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L161",
          "evidence": "**Two-phase build system:** JSON (version control) \u2192 MySQL (canonical) \u2192 All export formats"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "generates all exports (no local setup needed",
      "normalized_text": "Generates all exports (no local setup needed",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L167",
          "evidence": "**For Contributors:** Edit JSON files in `contributions/` \u2192 Submit PR \u2192 GitHub Actions auto-generates all exports (no local setup needed!)"
        },
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L167",
          "evidence": "**For Contributors:** Edit JSON files in `contributions/` \u2192 Submit PR \u2192 GitHub Actions auto-generates all exports (no local setup needed!)"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "import mongodb database",
      "normalized_text": "Import mongodb database",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L175",
          "evidence": "How to import MongoDB database?"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export to duckdb",
      "normalized_text": "Export to duckdb",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L185",
          "evidence": "## Export to DuckDB"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export the database to duckdb format",
      "normalized_text": "Export the database to duckdb format",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L187",
          "evidence": "Want to export the database to DuckDB format? You can easily convert the existing SQLite files to DuckDB format using our conversion script."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create duckdb database files that maintain the same structure and data as the original sqlite files, optimized for analytical workloads",
      "normalized_text": "Create duckdb database files that maintain the same structure and data as the original sqlite files, optimized for an...",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L213",
          "evidence": "The conversion script will create DuckDB database files that maintain the same structure and data as the original SQLite files, optimized for analytical workloads."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export performance",
      "normalized_text": "Export performance",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L217",
          "evidence": "### Export Performance"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export time | world db size | compressed (",
      "normalized_text": "Export time | world db size | compressed (",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L218",
          "evidence": "| Format | Export Time | World DB Size | Compressed (.gz) |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generates all export formats",
      "normalized_text": "Generates all export formats",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L279",
          "evidence": "**Note:** Only edit JSON in `contributions/` - GitHub Actions auto-generates all export formats!"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "tracking | [view repository](https://github",
      "normalized_text": "Tracking | [view repository](https://github",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L314",
          "evidence": "| \ud83d\udc19 **[GitHub](https://github.com/dr5hn/countries-states-cities-database)** | Contributors, raw files, issue tracking | [View Repository](https://github.com/dr5hn/countries-states-cities-database) |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\u2705 Most - 151,024+ cities from 250 countries with timezone & multilingual support (19 languages)",
      "normalized_text": "\u2705 most - 151,024+ cities from 250 countries with timezone & multilingual support (19 languages)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L16",
          "evidence": "* \u2705 **Most Comprehensive** - 151,024+ cities from 250 countries with timezone & multilingual support (19 languages)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "\u2705 Multiple Integration Options - NPM/PyPI packages, REST API, Export Tool, or direct downloads",
      "normalized_text": "\u2705 multiple integration options - npm/pypi packages, rest api, export tool, or direct downloads",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L17",
          "evidence": "* \u2705 **Multiple Integration Options** - NPM/PyPI packages, REST API, Export Tool, or direct downloads"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "API \u2022 Export Tool \u2022 Available Formats",
      "normalized_text": "Api \u2022 export tool \u2022 available formats",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L28",
          "evidence": "- [API](#api-) \u2022 [Export Tool](#\ufe0f-export-tool) \u2022 [Available Formats](#available-formats)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Performance \u2022 License \u2022 Contributing",
      "normalized_text": "Performance \u2022 license \u2022 contributing",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L30",
          "evidence": "- [Performance](#performance--benchmarks) \u2022 [License](#-license) \u2022 [Contributing](#contributing)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Platforms \u2022 Support",
      "normalized_text": "Platforms \u2022 support",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L31",
          "evidence": "- [Platforms](#-available-on-multiple-platforms) \u2022 [Support](#\ufe0f-support-my-work)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Features:** Zero dependencies, TypeScript support, offline-first, tree-shakeable",
      "normalized_text": "*features:** zero dependencies, typescript support, offline-first, tree-shakeable",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L64",
          "evidence": "**Features:** Zero dependencies, TypeScript support, offline-first, tree-shakeable"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Export Tool** - Convert and download data in your preferred format",
      "normalized_text": "*export tool** - convert and download data in your preferred format",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L108",
          "evidence": "**[Export Tool](https://export.countrystatecity.in/)** - Convert and download data in your preferred format"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Features:** Multiple formats, selection, custom filtering by region/country, bulk downloads, real-time processing",
      "normalized_text": "*features:** multiple formats, selection, custom filtering by region/country, bulk downloads, real-time processing",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L112",
          "evidence": "**Features:** Multiple formats, flexible selection, custom filtering by region/country, bulk downloads, real-time processing"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Note:** DuckDB format is available via manual conversion from SQLite files. See the Export to DuckDB section for instructions.",
      "normalized_text": "*note:** duckdb format is available via manual conversion from sqlite files. see the export to duckdb section for ins...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L126",
          "evidence": "**Note:** DuckDB format is available via manual conversion from SQLite files. See the [Export to DuckDB](#export-to-duckdb) section for instructions."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*For Contributors:** Edit JSON files in `contributions/` \u2192 Submit PR \u2192 GitHub Actions auto-generates all exports (no local setup needed)",
      "normalized_text": "*for contributors:** edit json files in `contributions/` \u2192 submit pr \u2192 github actions auto-generates all exports (no ...",
      "category": "Community",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L167",
          "evidence": "**For Contributors:** Edit JSON files in `contributions/` \u2192 Submit PR \u2192 GitHub Actions auto-generates all exports (no local setup needed!)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*For Maintainers:** MySQL as single source of truth, dynamic schema detection, one command to regenerate all formats",
      "normalized_text": "*for maintainers:** mysql as single source of truth, dynamic schema detection, one command to regenerate all formats",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L169",
          "evidence": "**For Maintainers:** MySQL as single source of truth, dynamic schema detection, one command to regenerate all formats"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Note:** Only edit JSON in `contributions/` - GitHub Actions auto-generates all export formats",
      "normalized_text": "*note:** only edit json in `contributions/` - github actions auto-generates all export formats",
      "category": "Community",
      "sources": [
        {
          "url": "https://github.com/dr5hn/countries-states-cities-database#L279",
          "evidence": "**Note:** Only edit JSON in `contributions/` - GitHub Actions auto-generates all export formats!"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build phase](#xcode-build-phase) instructions above)",
      "normalized_text": "Build phase](#xcode-build-phase) instructions above)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L18",
          "evidence": "- [Xcode build phase](#xcode-build-phase)"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L483",
          "evidence": "**NOTE:** It is recommended to add the `swiftformat` binary to your project directory to ensure the same version is used each time (see the [Xcode build phase](#xcode-build-phase) instructions above)."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run manually, or as part of some other toolchain",
      "normalized_text": "Run manually, or as part of some other toolchain",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L70",
          "evidence": "1. As a command-line tool that you run manually, or as part of some other toolchain"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build phase in your xcode project, so that it runs every time you press cmd-r or cmd-b, or",
      "normalized_text": "Build phase in your xcode project, so that it runs every time you press cmd-r or cmd-b, or",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L72",
          "evidence": "3. As a build phase in your Xcode project, so that it runs every time you press Cmd-R or Cmd-B, or"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs every time you press cmd-r or cmd-b, or",
      "normalized_text": "Runs every time you press cmd-r or cmd-b, or",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L72",
          "evidence": "3. As a build phase in your Xcode project, so that it runs every time you press Cmd-R or Cmd-B, or"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs on any files you've changed before you check them in",
      "normalized_text": "Runs on any files you've changed before you check them in",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L73",
          "evidence": "4. As a Git pre-commit hook, so that it runs on any files you've changed before you check them in"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build swiftformat manually on macos, linux or windows as follows:",
      "normalized_text": "Build swiftformat manually on macos, linux or windows as follows:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L99",
          "evidence": "Or if you prefer, you can check out and build SwiftFormat manually on macOS, Linux or Windows as follows:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build -c release",
      "normalized_text": "Build -c release",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L104",
          "evidence": "$ swift build -c release"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build phase instructions below for details",
      "normalized_text": "Build phase instructions below for details",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L107",
          "evidence": "If you are installing SwiftFormat into your project directory, you can use [CocoaPods](https://cocoapods.org/) on macOS to automatically install the swiftformat binary along with your other pods - see the Xcode build phase instructions below for details."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include the binary artifactbundle in your `package",
      "normalized_text": "Include the binary artifactbundle in your `package",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L109",
          "evidence": "Another option is to include the binary artifactbundle in your `Package.swift`:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build the command-line app manually:",
      "normalized_text": "Build the command-line app manually:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L119",
          "evidence": "If you would prefer not to use a package manager, you can build the command-line app manually:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build the `swiftformat (application)` scheme",
      "normalized_text": "Build the `swiftformat (application)` scheme",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L121",
          "evidence": "1. open `SwiftFormat.xcodeproj` and build the `SwiftFormat (Application)` scheme."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `swiftformat --help` to see the available options)",
      "normalized_text": "Run `swiftformat --help` to see the available options)",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L127",
          "evidence": "4. Add the following line to the file: `alias swiftformat=\"/usr/local/bin/swiftformat --indent 4\"` (you can omit the `--indent 4`, or replace it with something else. Run `swiftformat --help` to see the available options)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the command `source ~/",
      "normalized_text": "Run the command `source ~/",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L129",
          "evidence": "5. Save the `.bash_profile` file and run the command `source ~/.bash_profile` for the changes to take effect."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run it in your home directory, it will probably reformat every swift file on your hard drive",
      "normalized_text": "Run it in your home directory, it will probably reformat every swift file on your hard drive",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L141",
          "evidence": "**WARNING:** `swiftformat .` will overwrite any Swift files it finds in the current directory, and any subfolders therein. If you run it in your home directory, it will probably reformat every Swift file on your hard drive."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include multiple paths separated by spaces",
      "normalized_text": "Include multiple paths separated by spaces",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L151",
          "evidence": "The path can point to either a single Swift file or a directory of files. It can be either be absolute, or relative to the current directory. The `\"\"` quotes around the path are optional, but if the path contains spaces then you either need to use quotes, or escape each space with `\\`. You may include multiple paths separated by spaces."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate a suggested set of options in step 3, you should copy and paste them into the command, either before or after the path(s) to your source files",
      "normalized_text": "Generate a suggested set of options in step 3, you should copy and paste them into the command, either before or afte...",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L155",
          "evidence": "If you used `--infer-options` to generate a suggested set of options in step 3, you should copy and paste them into the command, either before or after the path(s) to your source files."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include swiftformat as part of a command chain",
      "normalized_text": "Include swiftformat as part of a command chain",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L167",
          "evidence": "If you prefer, you can use unix pipes to include SwiftFormat as part of a command chain. For example, this is an alternative way to format a file:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide the file path using the `--stdin-path` argument:",
      "normalized_text": "Provide the file path using the `--stdin-path` argument:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L191",
          "evidence": "When using stdin, SwiftFormat does not have access to the file path of the input, so features that rely on the file location (such as inserting the creation date into header comments, or detecting `.swiftformat` configuration files in the file path) will not work. To solve this, you can provide the file path using the `--stdin-path` argument:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import and export different configurations using the file menu",
      "normalized_text": "Import and export different configurations using the file menu",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L225",
          "evidence": "You can configure the formatting [rules](#rules) and [options](#options) using the SwiftFormat for Xcode host application. There is currently no way to override these per-project, however, you can import and export different configurations using the File menu. You will need to do this again each time you switch projects."
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L225",
          "evidence": "You can configure the formatting [rules](#rules) and [options](#options) using the SwiftFormat for Xcode host application. There is currently no way to override these per-project, however, you can import and export different configurations using the File menu. You will need to do this again each time you switch projects."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "configure the formatting rules and options using the swiftformat for xcode host application",
      "normalized_text": "Configure the formatting rules and options using the swiftformat for xcode host application",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L225",
          "evidence": "You can configure the formatting [rules](#rules) and [options](#options) using the SwiftFormat for Xcode host application. There is currently no way to override these per-project, however, you can import and export different configurations using the File menu. You will need to do this again each time you switch projects."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import that file into swiftformat for xcode in order for the xcode source editor extension to use the new configuration",
      "normalized_text": "Import that file into swiftformat for xcode in order for the xcode source editor extension to use the new configuration",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L229",
          "evidence": "**Note:** SwiftFormat for Xcode cannot automatically detect changes to an imported configuration file. If you update the `.swiftformat` file for your project, you will need to manually re-import that file into SwiftFormat for Xcode in order for the Xcode source editor extension to use the new configuration."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the unit tests, and not every time you build the app",
      "normalized_text": "Run the unit tests, and not every time you build the app",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L235",
          "evidence": "**NOTE:** Adding this script will overwrite your source files as you work on them, which has the annoying side-effect of clearing the undo history. You may wish to add the script to your test target rather than your main target, so that it is invoked only when you run the unit tests, and not every time you build the app."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build target (such as the tests)",
      "normalized_text": "Build target (such as the tests)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L237",
          "evidence": "Alternatively, you might want to consider running SwiftFormat in [lint](#linting) mode as part of your normal build, and then running a formatting pass manually, or as part of a less-frequent build target (such as the tests)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build phase, do the following:",
      "normalized_text": "Build phase, do the following:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L241",
          "evidence": "To set up SwiftFormat as an Xcode build phase, do the following:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a buildtools folder and package",
      "normalized_text": "Create a buildtools folder and package",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L243",
          "evidence": "#### 1) Create a BuildTools folder and Package.swift"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a folder called `buildtools` in the same folder as your xcodeproj file",
      "normalized_text": "Create a folder called `buildtools` in the same folder as your xcodeproj file",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L245",
          "evidence": "1. Create a folder called `BuildTools` in the same folder as your xcodeproj file"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a file called `package",
      "normalized_text": "Create a file called `package",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L246",
          "evidence": "2. In this folder, create a file called `Package.swift`, with the following contents:"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L260",
          "evidence": "3. If you are running Xcode 11.4 or later, in the `BuildTools` folder create a file called `Empty.swift` with nothing in it. This is to satisfy a change in Swift Package Manager."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "import packagedescription",
      "normalized_text": "Import packagedescription",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L249",
          "evidence": "import PackageDescription"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build phase to your app target",
      "normalized_text": "Build phase to your app target",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L262",
          "evidence": "#### 2) Add a Build phase to your app target"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L296",
          "evidence": "#### 2) Add a Build phase to your app target"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "build phases` tab",
      "normalized_text": "Build phases` tab",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L264",
          "evidence": "1. Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L298",
          "evidence": "1. Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run script phase` by clicking the little plus icon in the top left",
      "normalized_text": "Run script phase` by clicking the little plus icon in the top left",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L265",
          "evidence": "2. Add a `New Run Script Phase` by clicking the little plus icon in the top left"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L299",
          "evidence": "2. Add a `New Run Script Phase` by clicking the little plus icon in the top left"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run script` phase above the `compile sources` phase, expand it and paste the following script:",
      "normalized_text": "Run script` phase above the `compile sources` phase, expand it and paste the following script:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L267",
          "evidence": "4. Drag the new `Run Script` phase **above** the `Compile Sources` phase, expand it and paste the following script:"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L301",
          "evidence": "4. Drag the new `Run Script` phase **above** the `Compile Sources` phase, expand it and paste the following script:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run -c release swiftformat \"$srcroot\"",
      "normalized_text": "Run -c release swiftformat \"$srcroot\"",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L273",
          "evidence": "swift run -c release swiftformat \"$SRCROOT\""
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run -c release --package-path buildtools swiftformat \"$srcroot\"` if you need a more complex script and `cd buildtools` breaks stuff",
      "normalized_text": "Run -c release --package-path buildtools swiftformat \"$srcroot\"` if you need a more complex script and `cd buildtools...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L276",
          "evidence": "You can also use `swift run -c release --package-path BuildTools swiftformat \"$SRCROOT\"` if you need a more complex script and `cd BuildTools` breaks stuff."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run script build phase:",
      "normalized_text": "Run script build phase:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L309",
          "evidence": "Alternatively, you could use a locally installed swiftformat command-line tool instead by putting the following in your Run Script build phase:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export path=\"/opt/homebrew/bin:$path\"",
      "normalized_text": "Export path=\"/opt/homebrew/bin:$path\"",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L331",
          "evidence": "export PATH=\"/opt/homebrew/bin:$PATH\""
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a symbolic link in `/usr/local/bin` pointing to the actual binary:",
      "normalized_text": "Create a symbolic link in `/usr/local/bin` pointing to the actual binary:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L341",
          "evidence": "or you can create a symbolic link in `/usr/local/bin` pointing to the actual binary:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin will find an existing `",
      "normalized_text": "Plugin will find an existing `",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L361",
          "evidence": "The plugin will find an existing `.swiftformat` in your package root folder and honor it automatically."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin from command-line",
      "normalized_text": "Plugin from command-line",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L363",
          "evidence": "### Trigger Plugin From Command-Line"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L379",
          "evidence": "### Trigger Plugin From Xcode"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "plugin --allow-writing-to-package-directory swiftformat",
      "normalized_text": "Plugin --allow-writing-to-package-directory swiftformat",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L366",
          "evidence": "swift package plugin --allow-writing-to-package-directory swiftformat"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin --allow-writing-to-package-directory swiftformat --target mylibrary --swift-version 5",
      "normalized_text": "Plugin --allow-writing-to-package-directory swiftformat --target mylibrary --swift-version 5",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L376",
          "evidence": "swift package plugin --allow-writing-to-package-directory swiftformat --target MyLibrary --swift-version 5.6 --verbose"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin execution for a swift package or an xcode project",
      "normalized_text": "Plugin execution for a swift package or an xcode project",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L381",
          "evidence": "In Xcode 14 you can trigger the command plugin execution for a Swift package or an Xcode project."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run plugin in xcode 14](https://user-images",
      "normalized_text": "Run plugin in xcode 14](https://user-images",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L387",
          "evidence": "![Run plugin in Xcode 14](https://user-images.githubusercontent.com/4176826/179352584-db7f7f42-452c-4a42-a329-01b115a237a7.gif)"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L387",
          "evidence": "![Run plugin in Xcode 14](https://user-images.githubusercontent.com/4176826/179352584-db7f7f42-452c-4a42-a329-01b115a237a7.gif)"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run swiftformat on the frontmost xcode document (project or workspace) you can use the following applescript:",
      "normalized_text": "Run swiftformat on the frontmost xcode document (project or workspace) you can use the following applescript:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L392",
          "evidence": "To run SwiftFormat on the frontmost Xcode document (project or workspace) you can use the following AppleScript:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable the hook by typing `chmod +x",
      "normalized_text": "Enable the hook by typing `chmod +x",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L441",
          "evidence": "5. enable the hook by typing `chmod +x .git/hooks/pre-commit` in the terminal."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run whenever you run `git commit`",
      "normalized_text": "Run whenever you run `git commit`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L443",
          "evidence": "The pre-commit hook will now run whenever you run `git commit`. Running `git commit --no-verify` will skip the pre-commit hook."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of swiftformat",
      "normalized_text": "Build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L447",
          "evidence": "**NOTE (2):** Unlike the Xcode build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a *post*-commit hook instead, which would run on your continuous integration server."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run on your continuous integration server",
      "normalized_text": "Run on your continuous integration server",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L447",
          "evidence": "**NOTE (2):** Unlike the Xcode build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a *post*-commit hook instead, which would run on your continuous integration server."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a github actions workflow using swiftformat, passing the `--reporter github-actions-log` command line option",
      "normalized_text": "Create a github actions workflow using swiftformat, passing the `--reporter github-actions-log` command line option",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L453",
          "evidence": "2. Create a GitHub Actions workflow using SwiftFormat, passing the `--reporter github-actions-log` command line option. The following example action lints pull requests using SwiftFormat, reporting warnings using the GitHub Actions log."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin to your `gemfile`",
      "normalized_text": "Plugin to your `gemfile`",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L474",
          "evidence": "2. Add the [`danger-swiftformat`](https://github.com/garriguv/danger-ruby-swiftformat) plugin to your `Gemfile`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build your swift projects and want to ensure that only properly formatted code is merged to your main branch, try [rules_swiftformat](https://github",
      "normalized_text": "Build your swift projects and want to ensure that only properly formatted code is merged to your main branch, try [ru...",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L489",
          "evidence": "If you use [Bazel](https://bazel.build/) to build your Swift projects and want to ensure that only properly formatted code is merged to your main branch, try [rules_swiftformat](https://github.com/cgrindel/rules_swiftformat). The repository contains Bazel rules and macros that format Swift source files using SwiftFormat, test that the formatted files exist in the workspace directory, and copy the formatted files to the workspace directory."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide a path either via an argument:",
      "normalized_text": "Provide a path either via an argument:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L501",
          "evidence": "By default, the container runs `swiftformat .` Therefore, you need to provide a path either via an argument:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs `swiftformat",
      "normalized_text": "Runs `swiftformat",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L501",
          "evidence": "By default, the container runs `swiftformat .` Therefore, you need to provide a path either via an argument:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run --rm -v /local/source/path:/work -w /work ghcr",
      "normalized_text": "Run --rm -v /local/source/path:/work -w /work ghcr",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L504",
          "evidence": "docker run --rm -v /local/source/path:/work ghcr.io/nicklockwood/swiftformat:latest /work"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L510",
          "evidence": "docker run --rm -v /local/source/path:/work -w /work ghcr.io/nicklockwood/swiftformat:latest"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L522",
          "evidence": "docker run --rm -v /local/source/path:/work ghcr.io/nicklockwood/swiftformat:latest /work --lint"
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "Prerelease builds are subject to breaking changes.*",
      "normalized_text": "Prerelease builds are subject to breaking changes.*",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L528",
          "evidence": "***Prerelease builds are subject to breaking changes.***"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L528",
          "evidence": "***Prerelease builds are subject to breaking changes.***"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "includes the latest unreleased changes",
      "normalized_text": "Includes the latest unreleased changes",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L530",
          "evidence": "New rules, options, and fixes are merged to the [`develop`](https://github.com/nicklockwood/SwiftFormat/commits/develop/) branch before being incorporated into an official release. You may want to use a prerelease version of SwiftFormat that includes the latest unreleased changes."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build via homebrew by running:",
      "normalized_text": "Build via homebrew by running:",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L536",
          "evidence": "You can install a prerelease build via Homebrew by running:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "builds of the `develop` branch are available in the [calda/swiftformat-nightly](https://github",
      "normalized_text": "Builds of the `develop` branch are available in the [calda/swiftformat-nightly](https://github",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L544",
          "evidence": "Nightly builds of the `develop` branch are available in the [calda/SwiftFormat-nightly](https://github.com/calda/SwiftFormat-nightly) repo. A new release is published every day, unless there have been no changes to `develop` since the last release. You can download executables for the latest nightly release [here](https://github.com/calda/SwiftFormat-nightly/releases/latest)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure options for specific files or code ranges by using `swiftformat:options` directive in comments inside your swift file",
      "normalized_text": "Configure options for specific files or code ranges by using `swiftformat:options` directive in comments inside your ...",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L563",
          "evidence": "You can configure options for specific files or code ranges by using `swiftformat:options` directive in comments inside your Swift file. To temporarily set one or more options inside a source file, use:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "includes over 50 rules, and new ones are added all the time",
      "normalized_text": "Includes over 50 rules, and new ones are added all the time",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L582",
          "evidence": "SwiftFormat includes over 50 rules, and new ones are added all the time. An up-to-date list can be found in [Rules.md](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md) along with documentation for how they are used."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable opt-in rules using `--enable` followed by the rule names:",
      "normalized_text": "Enable opt-in rules using `--enable` followed by the rule names:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L588",
          "evidence": "You can disable rules individually using `--disable` followed by a list of one or more comma-delimited rule names, or enable opt-in rules using `--enable` followed by the rule names:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable the rules you specify:",
      "normalized_text": "Enable the rules you specify:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L618",
          "evidence": "And then individually enable just the rules you want. Alternatively, use the`--rules` argument to *only* enable the rules you specify:"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L618",
          "evidence": "And then individually enable just the rules you want. Alternatively, use the`--rules` argument to *only* enable the rules you specify:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "include multiple `--rules` arguments, or use the line continuation character `\\` to wrap the rules onto separate lines:",
      "normalized_text": "Include multiple `--rules` arguments, or use the line continuation character `\\` to wrap the rules onto separate lines:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L624",
          "evidence": "As above, you may include multiple `--rules` arguments, or use the line continuation character `\\` to wrap the rules onto separate lines:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable the rule(s) again, use:",
      "normalized_text": "Enable the rule(s) again, use:",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L641",
          "evidence": "To enable the rule(s) again, use:"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L653",
          "evidence": "And to enable them all again, use:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "enable <rule1> [<rule2> [rule<3>",
      "normalized_text": "Enable <rule1> [<rule2> [rule<3>",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L644",
          "evidence": "// swiftformat:enable <rule1> [<rule2> [rule<3> ...]]"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable or disable rules for the current or previous line",
      "normalized_text": "Enable or disable rules for the current or previous line",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L667",
          "evidence": "You can also use `this` or `previous` to enable or disable rules for the current or previous line. There is no need to manually re-enable a rule after using the `next`, `this` or `previous` directives."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable a rule after using the `next`, `this` or `previous` directives",
      "normalized_text": "Enable a rule after using the `next`, `this` or `previous` directives",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L667",
          "evidence": "You can also use `this` or `previous` to enable or disable rules for the current or previous line. There is no need to manually re-enable a rule after using the `next`, `this` or `previous` directives."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable a rule that was not already enabled when formatting started",
      "normalized_text": "Enable a rule that was not already enabled when formatting started",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L669",
          "evidence": "**NOTE:** The `swiftformat:enable` directive only serves to counter a previous `swiftformat:disable` directive in the same file. It is not possible to use `swiftformat:enable` to enable a rule that was not already enabled when formatting started."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows you to specify the swift _language mode_ used by your project",
      "normalized_text": "Allows you to specify the swift _language mode_ used by your project",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L688",
          "evidence": "SwiftFormat also allows you to specify the Swift _language mode_ used by your project. This is distinct from the Swift compiler version. For example, you can use the Swift 6.0 compiler with either the Swift 5 language mode or the Swift 6 language mode. Some SwiftFormat rules will behave differently under different Swift language modes."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a configuration file, which can be added to your project and shared with other developers",
      "normalized_text": "Create a configuration file, which can be added to your project and shared with other developers",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L698",
          "evidence": "Although it is possible to configure SwiftFormat directly by using the command-line [options](#options) and [rules](#rules) detailed above, it is sometimes more convenient to create a configuration file, which can be added to your project and shared with other developers."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure swiftformat directly by using the command-line options and rules detailed above, it is sometimes more convenient to create a configuration file, which can be added to your project and shared with other developers",
      "normalized_text": "Configure swiftformat directly by using the command-line options and rules detailed above, it is sometimes more conve...",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L698",
          "evidence": "Although it is possible to configure SwiftFormat directly by using the command-line [options](#options) and [rules](#rules) detailed above, it is sometimes more convenient to create a configuration file, which can be added to your project and shared with other developers."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows you to override certain rules or formatting options for a particular directory of files",
      "normalized_text": "Allows you to override certain rules or formatting options for a particular directory of files",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L710",
          "evidence": "This allows you to override certain rules or formatting options just for a particular directory of files. You can also specify excluded files relative to that directory using `--exclude`, which may be more convenient than specifying them at the top-level:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include wildcards, specified using unix \"glob\" syntax, as documented below",
      "normalized_text": "Include wildcards, specified using unix \"glob\" syntax, as documented below",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L716",
          "evidence": "The `--exclude` option takes a comma-delimited list of file or directory paths to exclude from formatting. Excluded paths are relative to the config file containing the `--exclude` command. The excluded paths can include wildcards, specified using Unix \"Glob\" syntax, as [documented below](#globs)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include blank lines for readability, and can also add comments using a hash prefix (#), e",
      "normalized_text": "Include blank lines for readability, and can also add comments using a hash prefix (#), e",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L720",
          "evidence": "The config file format is designed to be edited by hand. You may include blank lines for readability, and can also add comments using a hash prefix (#), e.g."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create multiple configuration sections within a single `",
      "normalized_text": "Create multiple configuration sections within a single `",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L734",
          "evidence": "You can create multiple configuration sections within a single `.swiftformat` file to apply different formatting options to different parts of your project. Each section should specify a `--filter` glob pattern to determine which files the configuration applies to. Options in that section are used when formatting files that match `--filter` glob, in addition to the base options in the file."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "-enable noForceUnwrapInTests",
      "normalized_text": "-enable noforceunwrapintests",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L742",
          "evidence": "--enable noForceUnwrapInTests"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L743",
          "evidence": "--enable noForceTryInTests"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L742",
          "evidence": "--enable noForceUnwrapInTests"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L743",
          "evidence": "--enable noForceTryInTests"
        }
      ],
      "frequency": 4,
      "uniqueness_score": 0.25
    },
    {
      "text": "generate a config file from your existing project, like this:",
      "normalized_text": "Generate a config file from your existing project, like this:",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L747",
          "evidence": "If you would prefer not to edit the configuration file by hand, you can use the [SwiftFormat for Xcode](#xcode-source-editor-extension) app to edit the configuration and export a configuration file. You can also use the swiftformat command-line-tool's `--inferoptions` command to generate a config file from your existing project, like this:"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1003",
          "evidence": "> A. Many configuration options are exposed in the command-line interface or `.swiftformat` configuration file. You can either set these manually, or use the `--infer-options` argument to automatically generate the configuration from your existing project."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "export a configuration file",
      "normalized_text": "Export a configuration file",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L747",
          "evidence": "If you would prefer not to edit the configuration file by hand, you can use the [SwiftFormat for Xcode](#xcode-source-editor-extension) app to edit the configuration and export a configuration file. You can also use the swiftformat command-line-tool's `--inferoptions` command to generate a config file from your existing project, like this:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run swiftformat as a linter, you can use the `--lint` command-line option:",
      "normalized_text": "Run swiftformat as a linter, you can use the `--lint` command-line option:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L797",
          "evidence": "In order to run SwiftFormat as a linter, you can use the `--lint` command-line option:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs the same rules as format mode, and all the same configuration options apply, however, no files will be modified",
      "normalized_text": "Runs the same rules as format mode, and all the same configuration options apply, however, no files will be modified",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L803",
          "evidence": "This runs the same rules as format mode, and all the same configuration options apply, however, no files will be modified. Instead, SwiftFormat will format each file in memory and then compare the result against the input and report the lines that required changes."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build step on your ci server",
      "normalized_text": "Build step on your ci server",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L805",
          "evidence": "The `--lint` option is similar to `--dry-run`, but `--lint` returns warnings for every line that required changes, and will return a nonzero error code (see [Error codes](#error-codes) below) if any changes are detected, which is useful if you want it to fail a build step on your CI server."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run or if `--lint` detects no violations",
      "normalized_text": "Run or if `--lint` detects no violations",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L830",
          "evidence": "* 0 - Success. This code will be returned in the event of a successful formatting run or if `--lint` detects no violations."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide using the `--header` command-line option",
      "normalized_text": "Provide using the `--header` command-line option",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L861",
          "evidence": "The header template is a string that you provide using the `--header` command-line option. Passing a value of `ignore` (the default) will leave the header comments unmodified. Passing `strip` or an empty string `\"\"` will remove them. If you wish to provide a custom header template, the format is as follows:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide a custom header template, the format is as follows:",
      "normalized_text": "Provide a custom header template, the format is as follows:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L861",
          "evidence": "The header template is a string that you provide using the `--header` command-line option. Passing a value of `ignore` (the default) will leave the header comments unmodified. Passing `strip` or an empty string `\"\"` will remove them. If you wish to provide a custom header template, the format is as follows:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include swift comment markup in the template if you wish: `--header \"/*--- header comment ---*/\"`",
      "normalized_text": "Include swift comment markup in the template if you wish: `--header \"/*--- header comment ---*/\"`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L867",
          "evidence": "You can optionally include Swift comment markup in the template if you wish: `--header \"/*--- Header comment ---*/\"`"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include comment markup, each line in the template will be prepended with `//` and a single space",
      "normalized_text": "Include comment markup, each line in the template will be prepended with `//` and a single space",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L869",
          "evidence": "If you do not include comment markup, each line in the template will be prepended with `//` and a single space."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include the file name, creation date and/or the current year in a comment header copyright notice",
      "normalized_text": "Include the file name, creation date and/or the current year in a comment header copyright notice",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L871",
          "evidence": "It is common practice to include the file name, creation date and/or the current year in a comment header copyright notice. To do that, you can use the following placeholders:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "supports two modes for handling markdown files:",
      "normalized_text": "Supports two modes for handling markdown files:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L932",
          "evidence": "SwiftFormat supports two modes for handling markdown files:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure the behavior of individual rules:",
      "normalized_text": "Configure the behavior of individual rules:",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L952",
          "evidence": "You can also specify SwiftFormat command line options to configure the behavior of individual rules:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support for linting, their primary functions are different",
      "normalized_text": "Support for linting, their primary functions are different",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L973",
          "evidence": "> A. SwiftLint is primarily designed to find and report code smells and style violations in your code. SwiftFormat is designed to fix them. While SwiftLint can autocorrect some issues, and SwiftFormat has some support for [linting](#linting), their primary functions are different."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs on ubuntu linux and windows",
      "normalized_text": "Runs on ubuntu linux and windows",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L983",
          "evidence": "> A. SwiftFormat works on macOS 10.13 (High Sierra) and above, and also runs on Ubuntu Linux and Windows."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable only a small subset of rules",
      "normalized_text": "Enable only a small subset of rules",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L988",
          "evidence": "> A. The SwiftFormat framework and command-line tool can be compiled using Swift 5.3 and above, and can format programs written in Swift 4.x or 5. Swift 3.x is no longer actively supported. If you are still using Swift 3.x or earlier and find that SwiftFormat breaks your code, the best solution is probably to revert to an earlier SwiftFormat release, or enable only a small subset of rules. Use the `--swift-version` argument to enable additional rules specific to later Swift versions."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable additional rules specific to later swift versions",
      "normalized_text": "Enable additional rules specific to later swift versions",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L988",
          "evidence": "> A. The SwiftFormat framework and command-line tool can be compiled using Swift 5.3 and above, and can format programs written in Swift 4.x or 5. Swift 3.x is no longer actively supported. If you are still using Swift 3.x or earlier and find that SwiftFormat breaks your code, the best solution is probably to revert to an earlier SwiftFormat release, or enable only a small subset of rules. Use the `--swift-version` argument to enable additional rules specific to later Swift versions."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run swiftformat using the `--verbose` option, it will tell you which rules were applied to each file",
      "normalized_text": "Run swiftformat using the `--verbose` option, it will tell you which rules were applied to each file",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L993",
          "evidence": "> A. If you run SwiftFormat using the `--verbose` option, it will tell you which rules were applied to each file. You can then selectively disable certain rules using the `--disable` argument (see below)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build if developers attempt to use an older swiftformat version",
      "normalized_text": "Build if developers attempt to use an older swiftformat version",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L998",
          "evidence": "> A. You can specify a `--min-version` argument in your project's .swiftformat` file to fail the build if developers attempt to use an older SwiftFormat version."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure these on a per-project basis",
      "normalized_text": "Configure these on a per-project basis",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1007",
          "evidence": "> If you are using the Xcode source editor extension, rules and options can be configured using the [SwiftFormat for Xcode](#xcode-source-editor-extension) host application. Unfortunately, due to limitation of the Extensions API, there is no way to configure these on a per-project basis."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build a new version of the command-line tool",
      "normalized_text": "Build a new version of the command-line tool",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1009",
          "evidence": "> If the options you want aren't exposed, and disabling the rule doesn't solve the problem, the rules are implemented in the file `Rules.swift`, so you can modify them and build a new version of the command-line tool. If you think your changes might be generally useful, make a pull request."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "processing of swift source code besides formatting",
      "normalized_text": "Processing of swift source code besides formatting",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1034",
          "evidence": "> A. Yes, the SwiftFormat framework can be included in an app or test target, and used for many kinds of parsing and processing of Swift source code besides formatting. The SwiftFormat framework is available as a [CocoaPod](https://cocoapods.org/pods/SwiftFormat) for easy integration."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Q. How do I run and debug the command line tool in Xcode while developing a new rule?*",
      "normalized_text": "Q. how do i run and debug the command line tool in xcode while developing a new rule?*",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1040",
          "evidence": "*Q. How do I run and debug the command line tool in Xcode while developing a new rule?*"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1040",
          "evidence": "*Q. How do I run and debug the command line tool in Xcode while developing a new rule?*"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run the `swiftformat` command line tool via the `swift format (command line tool)` scheme, and you can pass in arguments like `/path/to/my/code --config /path/to/my/config` as the `arguments passed on launch` in xcode's scheme editor",
      "normalized_text": "Run the `swiftformat` command line tool via the `swift format (command line tool)` scheme, and you can pass in argume...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1042",
          "evidence": "> A. You can run the `swiftformat` command line tool via the `Swift Format (Command Line Tool)` scheme, and you can pass in arguments like `/path/to/my/code --config /path/to/my/config` as the `Arguments Passed On Launch` in Xcode's scheme editor. More instructions are available [here](https://github.com/nicklockwood/SwiftFormat/pull/1804#issuecomment-2263079432)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "handles type inference for closures vs keypaths, as discussed [here](https://bugs",
      "normalized_text": "Handles type inference for closures vs keypaths, as discussed [here](https://bugs",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1061",
          "evidence": "* When using the `preferKeyPath` rule, conversion of `compactMap { $0.foo }` to `compactMap(\\.foo)` or `flatMap { $0.foo }` to `flatMap(\\.foo)` will result in code that fails to compile if `foo` is not an `Optional` property. This is due to a difference in the way that Swift handles type inference for closures vs keyPaths, as discussed [here](https://bugs.swift.org/browse/SR-13347). The recommended workaround is to replace `compactMap()` or `flatMap()` with `map()` in these cases, which will not change the behavior of the code."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide a comma-delimited list of methods to be excluded from the rule",
      "normalized_text": "Provide a comma-delimited list of methods to be excluded from the rule",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1063",
          "evidence": "* When using the `--self remove` option, the `redundantSelf` rule will remove references to `self` in autoclosure arguments, which may change the meaning of the code, or cause it not to compile. To work around this issue, use the `--self-required` option to provide a comma-delimited list of methods to be excluded from the rule. The `expect()` function from the popular [Nimble](https://github.com/Quick/Nimble) unit testing framework is already excluded by default. If you are using the `--self insert` option then this is not an issue."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support for specific functions",
      "normalized_text": "Support for specific functions",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1069",
          "evidence": "* The `trailingClosures` rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the `--trailing-closures` and `--never-trailing` arguments to explicitly opt in or out of trailing closure support for specific functions."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument",
      "normalized_text": "Generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatur...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1069",
          "evidence": "* The `trailingClosures` rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the `--trailing-closures` and `--never-trailing` arguments to explicitly opt in or out of trailing closure support for specific functions."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support for command line tools](https://support",
      "normalized_text": "Support for command line tools](https://support",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1077",
          "evidence": "* When running a version of SwiftFormat built using Xcode 10.2 on macOS 10.14.3 or earlier, you may experience a crash with the error \"dyld: Library not loaded: @rpath/libswiftCore.dylib\". To fix this, you need to install the [Swift 5 Runtime Support for Command Line Tools](https://support.apple.com/kb/DL1998). These tools are included by default in macOS 10.14.4 and later."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include spelling out the closure explicitly in the generic function (instead of using a `typealias`) or disabling the `opaquegenericparameters` rule (e",
      "normalized_text": "Include spelling out the closure explicitly in the generic function (instead of using a `typealias`) or disabling the...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1079",
          "evidence": "* If you have a generic typealias that defines a closure (e.g. `typealias ResultCompletion<T> = (Result<T, Error>) -> Void`) and use this closure as an argument in a generic function (e.g. `func handle<T: Decodable>(_ completion: ResultCompletion<T>)`), the `opaqueGenericParameters` rule may update the function definition to use `some` syntax (e.g. `func handle(_ completion: ResultCompletion<some Decodable>)`). `some` syntax is not permitted in closure parameters, so this will no longer compile. Workarounds include spelling out the closure explicitly in the generic function (instead of using a `typealias`) or disabling the `opaqueGenericParameters` rule (e.g. with `// swiftformat:disable:next opaqueGenericParameters`)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include using `--swift-version 5",
      "normalized_text": "Include using `--swift-version 5",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1081",
          "evidence": "* If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with `--swift-version 5.7`, the `genericExtensions` rule may cause a build failure by updating extensions of the format `extension Collection where Element == Foo` to `extension Collection<Foo>`. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode [does not include](https://forums.swift.org/t/xcode-14-rc-cannot-specialize-protocol-type/60171) the Swift 5.7 standard library. Workarounds include using `--swift-version 5.6` instead, updating to Xcode 14.1+, or disabling the `genericExtensions` rule (e.g. with `// swiftformat:disable:next genericExtensions`)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build failure by updating extensions of the format `extension collection where element == foo` to `extension collection<foo>`",
      "normalized_text": "Build failure by updating extensions of the format `extension collection where element == foo` to `extension collecti...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1081",
          "evidence": "* If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with `--swift-version 5.7`, the `genericExtensions` rule may cause a build failure by updating extensions of the format `extension Collection where Element == Foo` to `extension Collection<Foo>`. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode [does not include](https://forums.swift.org/t/xcode-14-rc-cannot-specialize-protocol-type/60171) the Swift 5.7 standard library. Workarounds include using `--swift-version 5.6` instead, updating to Xcode 14.1+, or disabling the `genericExtensions` rule (e.g. with `// swiftformat:disable:next genericExtensions`)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build failure in cases where there are multiple static overloads with the same name but different return types",
      "normalized_text": "Build failure in cases where there are multiple static overloads with the same name but different return types",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1083",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases where there are multiple static overloads with the same name but different return types. As a workaround you can rename the overloads to no longer conflict, or exclude the property name with `--preserve-symbols propertyName,otherPropertyName,etc`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build failure in cases where the property's type is a protocol / existential like `let shapestyle: shapestyle =",
      "normalized_text": "Build failure in cases where the property's type is a protocol / existential like `let shapestyle: shapestyle =",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1085",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases where the property's type is a protocol / existential like `let shapeStyle: ShapeStyle = .myShapeStyle`, and the value used on the right-hand side is defined in an extension like `extension ShapeStyle where Self == MyShapeStyle { static var myShapeStyle: MyShapeStyle { ... } }`. As a workaround you can use the existential `any` syntax (`let shapeStyle: any ShapeStyle = .myShapeStyle`), which the rule will preserve as-is, or exclude the type name and/or property name with `--preserve-symbols ShapeStyle,myShapeStyle,etc`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build failure in cases like `let foo = foo",
      "normalized_text": "Build failure in cases like `let foo = foo",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1087",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases like `let foo = Foo.bar` where the value is a static member that doesn't return the same time. For example, `let foo: Foo = .bar` would be invalid if the `bar` property was defined as `static var bar: Bar`. As a workaround you can write the name of the type explicitly, like `let foo: Bar = Foo.bar`, or exclude the type name and/or property name with `--preserve-symbols Bar,bar,etc`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "- Xcode build phase",
      "normalized_text": "- xcode build phase",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L18",
          "evidence": "- [Xcode build phase](#xcode-build-phase)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Marco Eidinger - Swift Package Manager plugin",
      "normalized_text": "Marco eidinger - swift package manager plugin",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L19",
          "evidence": "- [Swift Package Manager plugin](#swift-package-manager-plugin)"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1124",
          "evidence": "* [Marco Eidinger](https://github.com/MarcoEidinger) - Swift Package Manager plugin"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "- Sublime Text plugin",
      "normalized_text": "- sublime text plugin",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L22",
          "evidence": "- [Sublime Text plugin](#sublime-text-plugin)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "- Prerelease Builds",
      "normalized_text": "- prerelease builds",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L29",
          "evidence": "- [Prerelease Builds](#prerelease-builds)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*WARNING:** `swiftformat .` will overwrite any Swift files it finds in the current directory, and any subfolders therein. If you run it in your home directory, it will probably reformat every Swift file on your hard drive.",
      "normalized_text": "*warning:** `swiftformat .` will overwrite any swift files it finds in the current directory, and any subfolders ther...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L141",
          "evidence": "**WARNING:** `swiftformat .` will overwrite any Swift files it finds in the current directory, and any subfolders therein. If you run it in your home directory, it will probably reformat every Swift file on your hard drive."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Note:** SwiftFormat for Xcode cannot automatically detect changes to an imported configuration file. If you update the `.swiftformat` file for your project, you will need to manually re-import that file into SwiftFormat for Xcode in order for the Xcode source editor extension to use the new configuration.",
      "normalized_text": "*note:** swiftformat for xcode cannot automatically detect changes to an imported configuration file. if you update t...",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L229",
          "evidence": "**Note:** SwiftFormat for Xcode cannot automatically detect changes to an imported configuration file. If you update the `.swiftformat` file for your project, you will need to manually re-import that file into SwiftFormat for Xcode in order for the Xcode source editor extension to use the new configuration."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*NOTE:** Adding this script will overwrite your source files as you work on them, which has the annoying side-effect of clearing the undo history. You may wish to add the script to your test target rather than your main target, so that it is invoked only when you run the unit tests, and not every time you build the app.",
      "normalized_text": "*note:** adding this script will overwrite your source files as you work on them, which has the annoying side-effect ...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L235",
          "evidence": "**NOTE:** Adding this script will overwrite your source files as you work on them, which has the annoying side-effect of clearing the undo history. You may wish to add the script to your test target rather than your main target, so that it is invoked only when you run the unit tests, and not every time you build the app."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*NOTE:** You may wish to check BuildTools/Package.swift into your source control so that the version used by your run-script phase is kept in version control. It is recommended to add the following to your .gitignore file: `BuildTools/.build` and `BuildTools/.swiftpm`.",
      "normalized_text": "*note:** you may wish to check buildtools/package.swift into your source control so that the version used by your run...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L278",
          "evidence": "**NOTE:** You may wish to check BuildTools/Package.swift into your source control so that the version used by your run-script phase is kept in version control. It is recommended to add the following to your .gitignore file: `BuildTools/.build` and `BuildTools/.swiftpm`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*NOTE (2):** If you are using Xcode 15 or later, make sure that the `ENABLE_USER_SCRIPT_SANDBOXING` (aka \"User Script Sandboxing\") option is set to NO, otherwise SwiftFormat won't be able to run correctly.",
      "normalized_text": "*note (2):** if you are using xcode 15 or later, make sure that the `enable_user_script_sandboxing` (aka \"user script...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L280",
          "evidence": "**NOTE (2):** If you are using Xcode 15 or later, make sure that the `ENABLE_USER_SCRIPT_SANDBOXING` (aka \"User Script Sandboxing\") option is set to NO, otherwise SwiftFormat won't be able to run correctly."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*NOTE (2):** When installing this way, GateKeeper may block swiftformat from running until you open it manually the first time by right-clicking in the Finder and selecting \"Open\".",
      "normalized_text": "*note (2):** when installing this way, gatekeeper may block swiftformat from running until you open it manually the f...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L294",
          "evidence": "**NOTE (2):** When installing this way, GateKeeper may block swiftformat from running until you open it manually the first time by right-clicking in the Finder and selecting \"Open\"."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*NOTE (2):** Unlike the Xcode build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a *post*-commit hook instead, which would run on your continuous integration server.",
      "normalized_text": "*note (2):** unlike the xcode build phase approach, git pre-commit hook won't be checked in to source control, and th...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L447",
          "evidence": "**NOTE (2):** Unlike the Xcode build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a *post*-commit hook instead, which would run on your continuous integration server."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "NOTE: It is recommended to add the `swiftformat` binary to your project directory to ensure the same version is used each time (see the Xcode build phase instructions above).",
      "normalized_text": "Note: it is recommended to add the `swiftformat` binary to your project directory to ensure the same version is used ...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L483",
          "evidence": "**NOTE:** It is recommended to add the `swiftformat` binary to your project directory to ensure the same version is used each time (see the [Xcode build phase](#xcode-build-phase) instructions above)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Nightly Builds:**",
      "normalized_text": "*nightly builds:**",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L542",
          "evidence": "**Nightly Builds:**"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*NOTE:** The `swiftformat:enable` directive only serves to counter a previous `swiftformat:disable` directive in the same file. It is not possible to use `swiftformat:enable` to enable a rule that was not already enabled when formatting started.",
      "normalized_text": "*note:** the `swiftformat:enable` directive only serves to counter a previous `swiftformat:disable` directive in the ...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L669",
          "evidence": "**NOTE:** The `swiftformat:enable` directive only serves to counter a previous `swiftformat:disable` directive in the same file. It is not possible to use `swiftformat:enable` to enable a rule that was not already enabled when formatting started."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "-exclude Pods,Generated",
      "normalized_text": "-exclude pods,generated",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L713",
          "evidence": "--exclude Pods,Generated"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`**/Generated` - Matches any folder called `Generated` in the project.",
      "normalized_text": "`**/generated` - matches any folder called `generated` in the project.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L785",
          "evidence": "* `**/Generated` - Matches any folder called `Generated` in the project."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`**/*_generated.swift` - Matches any Swift file with the suffix \"_generated\" in the project.",
      "normalized_text": "`**/*_generated.swift` - matches any swift file with the suffix \"_generated\" in the project.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L787",
          "evidence": "* `**/*_generated.swift` - Matches any Swift file with the suffix \"_generated\" in the project."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "0 - Success. This code will be returned in the event of a successful formatting run or if `--lint` detects no violations.",
      "normalized_text": "0 - success. this code will be returned in the event of a successful formatting run or if `--lint` detects no violati...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L830",
          "evidence": "* 0 - Success. This code will be returned in the event of a successful formatting run or if `--lint` detects no violations."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "1 - Lint failure. This code will be returned when running in `--lint` mode, or when autocorrecting in `--strict` mode, if the input requires formatting.",
      "normalized_text": "1 - lint failure. this code will be returned when running in `--lint` mode, or when autocorrecting in `--strict` mode...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L831",
          "evidence": "* 1 - Lint failure. This code will be returned when running in `--lint` mode, or when autocorrecting in `--strict` mode, if the input requires formatting."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`{created.year}` - the year in which the file was created",
      "normalized_text": "`{created.year}` - the year in which the file was created",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L875",
          "evidence": "* `{created}` - the date on which the file was created"
        },
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L876",
          "evidence": "* `{created.year}` - the year in which the file was created"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "-header \"{file}\\nCopyright (c) {year} Foobar Industries\\nCreated by John Smith on {created}.\"",
      "normalized_text": "-header \"{file}\\ncopyright (c) {year} foobar industries\\ncreated by john smith on {created}.\"",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L883",
          "evidence": "--header \"{file}\\nCopyright (c) {year} Foobar Industries\\nCreated by John Smith on {created}.\""
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*NOTE:** the `{year}` value and `{created}` date format are determined from the current locale and timezone of the machine running the script. `{author.name}` and `{author.email}` requires the project to be version controlled by git.",
      "normalized_text": "*note:** the `{year}` value and `{created}` date format are determined from the current locale and timezone of the ma...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L894",
          "evidence": "**NOTE:** the `{year}` value and `{created}` date format are determined from the current locale and timezone of the machine running the script. `{author.name}` and `{author.email}` requires the project to be version controlled by git."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Q. What platforms does SwiftFormat support?*",
      "normalized_text": "Q. what platforms does swiftformat support?*",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L981",
          "evidence": "*Q. What platforms does SwiftFormat support?*"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Q. What versions of Swift are supported?*",
      "normalized_text": "Q. what versions of swift are supported?*",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L986",
          "evidence": "*Q. What versions of Swift are supported?*"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Q. How to create own rule?*",
      "normalized_text": "Q. how to create own rule?*",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1036",
          "evidence": "*Q. How to create own rule?*"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "The `enumNamespaces` rule replaces classes that have only static members with an `enum`. If the class is subclassed, or if there is code that depends on the class exposing certain runtime behaviors, this may break the program. To solve this you can either fix it on a per-case basis by adding a `// swiftformat:disable:next enumNamespaces` comment directive above the class declaration, or you can add `--enum-namespaces structs-only` to prevent the rule being applied to classes, or you can disable the `enumNamespaces` rule completely.",
      "normalized_text": "The `enumnamespaces` rule replaces classes that have only static members with an `enum`. if the class is subclassed, ...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1049",
          "evidence": "* The `enumNamespaces` rule replaces classes that have only static members with an `enum`. If the class is subclassed, or if there is code that depends on the class exposing certain runtime behaviors, this may break the program. To solve this you can either fix it on a per-case basis by adding a `// swiftformat:disable:next enumNamespaces` comment directive above the class declaration, or you can add `--enum-namespaces structs-only` to prevent the rule being applied to classes, or you can just disable the `enumNamespaces` rule completely."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "When using the `initCoderUnavailable` rule, if an `init` that is marked as unavailable is overridden elsewhere in the program then it will cause a compilation error. The recommended workaround is to remove the override (which shouldn't affect the program behavior if the init was really unused) or use the `// swiftformat:disable:next initCoderUnavailable` comment directive to disable the rule for the overridden init (or disable the `initCoderUnavailable` rule completely).",
      "normalized_text": "When using the `initcoderunavailable` rule, if an `init` that is marked as unavailable is overridden elsewhere in the...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1057",
          "evidence": "* When using the `initCoderUnavailable` rule, if an `init` that is marked as unavailable is overridden elsewhere in the program then it will cause a compilation error. The recommended workaround is to remove the override (which shouldn't affect the program behavior if the init was really unused) or use the `// swiftformat:disable:next initCoderUnavailable` comment directive to disable the rule for the overridden init (or just disable the `initCoderUnavailable` rule completely)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "When using the `preferKeyPath` rule, conversion of `compactMap { $0.foo }` to `compactMap(\\.foo)` or `flatMap { $0.foo }` to `flatMap(\\.foo)` will result in code that fails to compile if `foo` is not an `Optional` property. This is due to a difference in the way that Swift handles type inference for closures vs keyPaths, as discussed here. The recommended workaround is to replace `compactMap()` or `flatMap()` with `map()` in these cases, which will not change the behavior of the code.",
      "normalized_text": "When using the `preferkeypath` rule, conversion of `compactmap { $0.foo }` to `compactmap(\\.foo)` or `flatmap { $0.fo...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1061",
          "evidence": "* When using the `preferKeyPath` rule, conversion of `compactMap { $0.foo }` to `compactMap(\\.foo)` or `flatMap { $0.foo }` to `flatMap(\\.foo)` will result in code that fails to compile if `foo` is not an `Optional` property. This is due to a difference in the way that Swift handles type inference for closures vs keyPaths, as discussed [here](https://bugs.swift.org/browse/SR-13347). The recommended workaround is to replace `compactMap()` or `flatMap()` with `map()` in these cases, which will not change the behavior of the code."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "When using the `--self remove` option, the `redundantSelf` rule will remove references to `self` in autoclosure arguments, which may change the meaning of the code, or cause it not to compile. To work around this issue, use the `--self-required` option to provide a comma-delimited list of methods to be excluded from the rule. The `expect()` function from the popular Nimble unit testing framework is already excluded by default. If you are using the `--self insert` option then this is not an issue.",
      "normalized_text": "When using the `--self remove` option, the `redundantself` rule will remove references to `self` in autoclosure argum...",
      "category": "Documentation",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1063",
          "evidence": "* When using the `--self remove` option, the `redundantSelf` rule will remove references to `self` in autoclosure arguments, which may change the meaning of the code, or cause it not to compile. To work around this issue, use the `--self-required` option to provide a comma-delimited list of methods to be excluded from the rule. The `expect()` function from the popular [Nimble](https://github.com/Quick/Nimble) unit testing framework is already excluded by default. If you are using the `--self insert` option then this is not an issue."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "The `trailingClosures` rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the `--trailing-closures` and `--never-trailing` arguments to explicitly opt in or out of trailing closure support for specific functions.",
      "normalized_text": "The `trailingclosures` rule can generate ambiguous code if a function has multiple optional closure arguments, or if ...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1069",
          "evidence": "* The `trailingClosures` rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the `--trailing-closures` and `--never-trailing` arguments to explicitly opt in or out of trailing closure support for specific functions."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "When running a version of SwiftFormat built using Xcode 10.2 on macOS 10.14.3 or earlier, you may experience a crash with the error \"dyld: Library not loaded: @rpath/libswiftCore.dylib\". To fix this, you need to install the Swift 5 Runtime Support for Command Line Tools. These tools are included by default in macOS 10.14.4 and later.",
      "normalized_text": "When running a version of swiftformat built using xcode 10.2 on macos 10.14.3 or earlier, you may experience a crash ...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1077",
          "evidence": "* When running a version of SwiftFormat built using Xcode 10.2 on macOS 10.14.3 or earlier, you may experience a crash with the error \"dyld: Library not loaded: @rpath/libswiftCore.dylib\". To fix this, you need to install the [Swift 5 Runtime Support for Command Line Tools](https://support.apple.com/kb/DL1998). These tools are included by default in macOS 10.14.4 and later."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "If you have a generic typealias that defines a closure (e.g. `typealias ResultCompletion<T> = (Result<T, Error>) -> Void`) and use this closure as an argument in a generic function (e.g. `func handle<T: Decodable>(_ completion: ResultCompletion<T>)`), the `opaqueGenericParameters` rule may update the function definition to use `some` syntax (e.g. `func handle(_ completion: ResultCompletion<some Decodable>)`). `some` syntax is not permitted in closure parameters, so this will no longer compile. Workarounds include spelling out the closure explicitly in the generic function (instead of using a `typealias`) or disabling the `opaqueGenericParameters` rule (e.g. with `// swiftformat:disable:next opaqueGenericParameters`).",
      "normalized_text": "If you have a generic typealias that defines a closure (e.g. `typealias resultcompletion<t> = (result<t, error>) -> v...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1079",
          "evidence": "* If you have a generic typealias that defines a closure (e.g. `typealias ResultCompletion<T> = (Result<T, Error>) -> Void`) and use this closure as an argument in a generic function (e.g. `func handle<T: Decodable>(_ completion: ResultCompletion<T>)`), the `opaqueGenericParameters` rule may update the function definition to use `some` syntax (e.g. `func handle(_ completion: ResultCompletion<some Decodable>)`). `some` syntax is not permitted in closure parameters, so this will no longer compile. Workarounds include spelling out the closure explicitly in the generic function (instead of using a `typealias`) or disabling the `opaqueGenericParameters` rule (e.g. with `// swiftformat:disable:next opaqueGenericParameters`)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with `--swift-version 5.7`, the `genericExtensions` rule may cause a build failure by updating extensions of the format `extension Collection where Element == Foo` to `extension Collection<Foo>`. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode does not include the Swift 5.7 standard library. Workarounds include using `--swift-version 5.6` instead, updating to Xcode 14.1+, or disabling the `genericExtensions` rule (e.g. with `// swiftformat:disable:next genericExtensions`).",
      "normalized_text": "If compiling for macos with xcode 14.0 and configuring swiftformat with `--swift-version 5.7`, the `genericextensions...",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1081",
          "evidence": "* If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with `--swift-version 5.7`, the `genericExtensions` rule may cause a build failure by updating extensions of the format `extension Collection where Element == Foo` to `extension Collection<Foo>`. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode [does not include](https://forums.swift.org/t/xcode-14-rc-cannot-specialize-protocol-type/60171) the Swift 5.7 standard library. Workarounds include using `--swift-version 5.6` instead, updating to Xcode 14.1+, or disabling the `genericExtensions` rule (e.g. with `// swiftformat:disable:next genericExtensions`)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "The `propertyTypes` rule can cause a build failure in cases where there are multiple static overloads with the same name but different return types. As a workaround you can rename the overloads to no longer conflict, or exclude the property name with `--preserve-symbols propertyName,otherPropertyName,etc`.",
      "normalized_text": "The `propertytypes` rule can cause a build failure in cases where there are multiple static overloads with the same n...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1083",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases where there are multiple static overloads with the same name but different return types. As a workaround you can rename the overloads to no longer conflict, or exclude the property name with `--preserve-symbols propertyName,otherPropertyName,etc`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "The `propertyTypes` rule can cause a build failure in cases where the property's type is a protocol / existential like `let shapeStyle: ShapeStyle = .myShapeStyle`, and the value used on the right-hand side is defined in an extension like `extension ShapeStyle where Self == MyShapeStyle { static var myShapeStyle: MyShapeStyle { ... } }`. As a workaround you can use the existential `any` syntax (`let shapeStyle: any ShapeStyle = .myShapeStyle`), which the rule will preserve as-is, or exclude the type name and/or property name with `--preserve-symbols ShapeStyle,myShapeStyle,etc`.",
      "normalized_text": "The `propertytypes` rule can cause a build failure in cases where the property's type is a protocol / existential lik...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1085",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases where the property's type is a protocol / existential like `let shapeStyle: ShapeStyle = .myShapeStyle`, and the value used on the right-hand side is defined in an extension like `extension ShapeStyle where Self == MyShapeStyle { static var myShapeStyle: MyShapeStyle { ... } }`. As a workaround you can use the existential `any` syntax (`let shapeStyle: any ShapeStyle = .myShapeStyle`), which the rule will preserve as-is, or exclude the type name and/or property name with `--preserve-symbols ShapeStyle,myShapeStyle,etc`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "The `propertyTypes` rule can cause a build failure in cases like `let foo = Foo.bar` where the value is a static member that doesn't return the same time. For example, `let foo: Foo = .bar` would be invalid if the `bar` property was defined as `static var bar: Bar`. As a workaround you can write the name of the type explicitly, like `let foo: Bar = Foo.bar`, or exclude the type name and/or property name with `--preserve-symbols Bar,bar,etc`.",
      "normalized_text": "The `propertytypes` rule can cause a build failure in cases like `let foo = foo.bar` where the value is a static memb...",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1087",
          "evidence": "* The `propertyTypes` rule can cause a build failure in cases like `let foo = Foo.bar` where the value is a static member that doesn't return the same time. For example, `let foo: Foo = .bar` would be invalid if the `bar` property was defined as `static var bar: Bar`. As a workaround you can write the name of the type explicitly, like `let foo: Bar = Foo.bar`, or exclude the type name and/or property name with `--preserve-symbols Bar,bar,etc`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Aerobounce - Homebrew cask and Sublime Text plugin",
      "normalized_text": "Aerobounce - homebrew cask and sublime text plugin",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1108",
          "evidence": "* [Aerobounce](https://github.com/aerobounce) - Homebrew cask and Sublime Text plugin"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Yonas Kolb - Swift Package Manager integration",
      "normalized_text": "Yonas kolb - swift package manager integration",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1111",
          "evidence": "* [Yonas Kolb](https://github.com/yonaskolb) - Swift Package Manager integration"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Mahdi Bchatnia - Linux build workflow",
      "normalized_text": "Mahdi bchatnia - linux build workflow",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1121",
          "evidence": "* [Mahdi Bchatnia](https://github.com/inket) - Linux build workflow"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Saleem Abdulrasool - Windows build workflow",
      "normalized_text": "Saleem abdulrasool - windows build workflow",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/nicklockwood/SwiftFormat#L1122",
          "evidence": "* [Saleem Abdulrasool](https://github.com/compnerd) - Windows build workflow"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide context and instructions to help ai coding agents work on your project",
      "normalized_text": "Provide context and instructions to help ai coding agents work on your project",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L10",
          "evidence": "to provide context and instructions to help AI coding agents work on your project."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Use `pnpm dlx turbo run where <project_name>` to jump to a package instead of scanning with `ls`.",
      "normalized_text": "Use `pnpm dlx turbo run where <project_name>` to jump to a package instead of scanning with `ls`.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L18",
          "evidence": "- Use `pnpm dlx turbo run where <project_name>` to jump to a package instead of scanning with `ls`."
        },
        {
          "url": "https://github.com/openai/agents.md#L18",
          "evidence": "- Use `pnpm dlx turbo run where <project_name>` to jump to a package instead of scanning with `ls`."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run `pnpm install --filter <project_name>` to add the package to your workspace so vite, eslint, and typescript can see it",
      "normalized_text": "Run `pnpm install --filter <project_name>` to add the package to your workspace so vite, eslint, and typescript can s...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L19",
          "evidence": "- Run `pnpm install --filter <project_name>` to add the package to your workspace so Vite, ESLint, and TypeScript can see it."
        },
        {
          "url": "https://github.com/openai/agents.md#L19",
          "evidence": "- Run `pnpm install --filter <project_name>` to add the package to your workspace so Vite, ESLint, and TypeScript can see it."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "create vite@latest <project_name> -- --template react-ts` to spin up a new react + vite package with typescript checks ready",
      "normalized_text": "Create vite@latest <project_name> -- --template react-ts` to spin up a new react + vite package with typescript check...",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L20",
          "evidence": "- Use `pnpm create vite@latest <project_name> -- --template react-ts` to spin up a new React + Vite package with TypeScript checks ready."
        },
        {
          "url": "https://github.com/openai/agents.md#L20",
          "evidence": "- Use `pnpm create vite@latest <project_name> -- --template react-ts` to spin up a new React + Vite package with TypeScript checks ready."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "Run `pnpm turbo run test --filter <project_name>` to run every check defined for that package.",
      "normalized_text": "Run `pnpm turbo run test --filter <project_name>` to run every check defined for that package.",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L25",
          "evidence": "- Run `pnpm turbo run test --filter <project_name>` to run every check defined for that package."
        },
        {
          "url": "https://github.com/openai/agents.md#L25",
          "evidence": "- Run `pnpm turbo run test --filter <project_name>` to run every check defined for that package."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "run -t \"<test name>\"`",
      "normalized_text": "Run -t \"<test name>\"`",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L27",
          "evidence": "- To focus on one step, add the Vitest pattern: `pnpm vitest run -t \"<test name>\"`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `pnpm lint --filter <project_name>` to be sure eslint and typescript rules still pass",
      "normalized_text": "Run `pnpm lint --filter <project_name>` to be sure eslint and typescript rules still pass",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L29",
          "evidence": "- After moving files or changing imports, run `pnpm lint --filter <project_name>` to be sure ESLint and TypeScript rules still pass."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Always run `pnpm lint` and `pnpm test` before committing.",
      "normalized_text": "Always run `pnpm lint` and `pnpm test` before committing.",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L34",
          "evidence": "- Always run `pnpm lint` and `pnpm test` before committing."
        },
        {
          "url": "https://github.com/openai/agents.md#L34",
          "evidence": "- Always run `pnpm lint` and `pnpm test` before committing."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "includes a basic next",
      "normalized_text": "Includes a basic next",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L39",
          "evidence": "This repository also includes a basic Next.js website hosted at https://agents.md/"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "To focus on one step, add the Vitest pattern: `pnpm vitest run -t \"<test name>\"`.",
      "normalized_text": "To focus on one step, add the vitest pattern: `pnpm vitest run -t \"<test name>\"`.",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L27",
          "evidence": "- To focus on one step, add the Vitest pattern: `pnpm vitest run -t \"<test name>\"`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "After moving files or changing imports, run `pnpm lint --filter <project_name>` to be sure ESLint and TypeScript rules still pass.",
      "normalized_text": "After moving files or changing imports, run `pnpm lint --filter <project_name>` to be sure eslint and typescript rule...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/openai/agents.md#L29",
          "evidence": "- After moving files or changing imports, run `pnpm lint --filter <project_name>` to be sure ESLint and TypeScript rules still pass."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide a minimal travis ci",
      "normalized_text": "Provide a minimal travis ci",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L9",
          "evidence": "You can use rustfmt in Travis CI builds. We provide a minimal Travis CI"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `rustfmt` with rust 1",
      "normalized_text": "Run `rustfmt` with rust 1",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L14",
          "evidence": "You can run `rustfmt` with Rust 1.24 and above."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run on a cargo project in the current working directory:",
      "normalized_text": "Run on a cargo project in the current working directory:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L24",
          "evidence": "To run on a cargo project in the current working directory:"
        },
        {
          "url": "https://github.com/rust-lang/rustfmt#L40",
          "evidence": "To run on a cargo project in the current working directory:"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "includes macro expansion)",
      "normalized_text": "Includes macro expansion)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L60",
          "evidence": "stage of compilation and in Rust includes macro expansion)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run rustfmt by typing `rustfmt filename` if you used `cargo",
      "normalized_text": "Run rustfmt by typing `rustfmt filename` if you used `cargo",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L76",
          "evidence": "You can run Rustfmt by just typing `rustfmt filename` if you used `cargo"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "includes out of line",
      "normalized_text": "Includes out of line",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L77",
          "evidence": "install`. This runs rustfmt on the given file, if the file includes out of line"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs rustfmt on the given file, if the file includes out of line",
      "normalized_text": "Runs rustfmt on the given file, if the file includes out of line",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L77",
          "evidence": "install`. This runs rustfmt on the given file, if the file includes out of line"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run on a whole module or crate, you",
      "normalized_text": "Run on a whole module or crate, you",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L78",
          "evidence": "modules, then we reformat those too. So to run on a whole module or crate, you"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run on the root file (usually mod",
      "normalized_text": "Run on the root file (usually mod",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L79",
          "evidence": "just need to run on the root file (usually mod.rs or lib.rs). Rustfmt can also"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `rustfmt --help` for information about available arguments",
      "normalized_text": "Run `rustfmt --help` for information about available arguments",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L83",
          "evidence": "You can run `rustfmt --help` for information about available arguments."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run rustfmt against a project is with `cargo fmt`",
      "normalized_text": "Run rustfmt against a project is with `cargo fmt`",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L84",
          "evidence": "The easiest way to run rustfmt against a project is with `cargo fmt`. `cargo fmt` works on both"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support `--check`, use `--write-mode diff`)",
      "normalized_text": "Support `--check`, use `--write-mode diff`)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L128",
          "evidence": "support `--check`, use `--write-mode diff`)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run rustfmt after this, use `cargo run --bin rustfmt -- filename`",
      "normalized_text": "Run rustfmt after this, use `cargo run --bin rustfmt -- filename`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L151",
          "evidence": "To run rustfmt after this, use `cargo run --bin rustfmt -- filename`. See the"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a toml file called",
      "normalized_text": "Create a toml file called",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L157",
          "evidence": "Rustfmt is designed to be very configurable. You can create a TOML file called"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure the `style_edition` in your `rustfmt",
      "normalized_text": "Configure the `style_edition` in your `rustfmt",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L175",
          "evidence": "When running `cargo fmt`, the `edition` is automatically read from the `Cargo.toml` file. However, when running `rustfmt` directly, the `edition` defaults to 2015. For consistent parsing between rustfmt and `cargo fmt`, you should configure the `edition` in your `rustfmt.toml` file:"
        },
        {
          "url": "https://github.com/rust-lang/rustfmt#L199",
          "evidence": "* To ensure consistent parsing between `cargo fmt` and `rustfmt`, you should configure the [`edition`](#rusts-editions) in your `rustfmt.toml` file."
        },
        {
          "url": "https://github.com/rust-lang/rustfmt#L200",
          "evidence": "* To ensure consistent formatting between `cargo fmt` and `rustfmt`, you should configure the [`style_edition`](#style-editions) in your `rustfmt.toml` file."
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "run rustfmt, place a file named `rustfmt",
      "normalized_text": "Run rustfmt, place a file named `rustfmt",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L219",
          "evidence": "* When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "generate a file containing the default configuration with",
      "normalized_text": "Generate a file containing the default configuration with",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L221",
          "evidence": "rustfmt. You can generate a file containing the default configuration with"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "customize as needed",
      "normalized_text": "Customize as needed",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L222",
          "evidence": "`rustfmt --print-config default rustfmt.toml` and customize as needed."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "To ensure consistent parsing between `cargo fmt` and `rustfmt`, you should configure the `edition` in your `rustfmt.toml` file.",
      "normalized_text": "To ensure consistent parsing between `cargo fmt` and `rustfmt`, you should configure the `edition` in your `rustfmt.t...",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L199",
          "evidence": "* To ensure consistent parsing between `cargo fmt` and `rustfmt`, you should configure the [`edition`](#rusts-editions) in your `rustfmt.toml` file."
        },
        {
          "url": "https://github.com/rust-lang/rustfmt#L200",
          "evidence": "* To ensure consistent formatting between `cargo fmt` and `rustfmt`, you should configure the [`style_edition`](#style-editions) in your `rustfmt.toml` file."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in",
      "normalized_text": "When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/rust-lang/rustfmt#L219",
          "evidence": "* When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "LanceDB, a serverless, low-latency vector database for ML applications",
      "normalized_text": "Lancedb, a serverless, low-latency vector database for ml applications",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L255",
          "evidence": "* [LanceDB](https://github.com/lancedb/lancedb), a serverless, low-latency vector database for ML applications"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "LanceDB Enterprise, hyperscale LanceDB with enterprise SLA.",
      "normalized_text": "Lancedb enterprise, hyperscale lancedb with enterprise sla.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L256",
          "evidence": "* [LanceDB Enterprise](https://docs.lancedb.com/enterprise/introduction), hyperscale LanceDB with enterprise SLA."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Leading multimodal Gen AI companies for training over petabyte-scale multimodal data.",
      "normalized_text": "Leading multimodal gen ai companies for training over petabyte-scale multimodal data.",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L257",
          "evidence": "* Leading multimodal Gen AI companies for training over petabyte-scale multimodal data."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Self-driving car company for large-scale storage, retrieval and processing of multi-modal data.",
      "normalized_text": "Self-driving car company for large-scale storage, retrieval and processing of multi-modal data.",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L258",
          "evidence": "* Self-driving car company for large-scale storage, retrieval and processing of multi-modal data."
        },
        {
          "url": "https://github.com/lancedb/lance#L258",
          "evidence": "* Self-driving car company for large-scale storage, retrieval and processing of multi-modal data."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "E-commerce company for billion-scale+ vector personalized search.",
      "normalized_text": "E-commerce company for billion-scale+ vector personalized search.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L259",
          "evidence": "* E-commerce company for billion-scale+ vector personalized search."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "building search engines and feature stores",
      "normalized_text": "Building search engines and feature stores",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L35",
          "evidence": "1. Building search engines and feature stores."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Zero-copy, automatic versioning: manage versions of your data without needing extra infrastructure.",
      "normalized_text": "Zero-copy, automatic versioning: manage versions of your data without needing extra infrastructure.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L45",
          "evidence": "* **Zero-copy, automatic versioning:** manage versions of your data without needing extra infrastructure."
        },
        {
          "url": "https://github.com/lancedb/lance#L45",
          "evidence": "* **Zero-copy, automatic versioning:** manage versions of your data without needing extra infrastructure."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "import pandas as pd",
      "normalized_text": "Import pandas as pd",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L77",
          "evidence": "import pandas as pd"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import pyarrow as pa",
      "normalized_text": "Import pyarrow as pa",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L78",
          "evidence": "import pyarrow as pa"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import vec_to_table",
      "normalized_text": "Import vec_to_table",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L123",
          "evidence": "from lance.vector import vec_to_table"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import numpy as np",
      "normalized_text": "Import numpy as np",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L124",
          "evidence": "import numpy as np"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support both cpus (``x86_64`` and ``arm``) and gpu (``nvidia (cuda)`` and ``apple silicon (mps)``)",
      "normalized_text": "Support both cpus (``x86_64`` and ``arm``) and gpu (``nvidia (cuda)`` and ``apple silicon (mps)``)",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L179",
          "evidence": "Support both CPUs (``x86_64`` and ``arm``) and GPU (``Nvidia (cuda)`` and ``Apple Silicon (mps)``)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support efficient filters like \u201cfind images where detected objects include cats\u201d",
      "normalized_text": "Support efficient filters like \u201cfind images where detected objects include cats\u201d",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L183",
          "evidence": "**Nested fields**: Lance stores each subfield as a separate column to support efficient filters like \u201cfind images where detected objects include cats\u201d."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support creating new versions automatically via appends, overwrites, and index creation",
      "normalized_text": "Support creating new versions automatically via appends, overwrites, and index creation",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L185",
          "evidence": "**Versioning**: A Manifest can be used to record snapshots. Currently we support creating new versions automatically via appends, overwrites, and index creation."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Rich secondary indices**: Support `BTree`, `Bitmap`, ` text search`, `Label list`,",
      "normalized_text": "*rich secondary indices**: support `btree`, `bitmap`, ` text search`, `label list`,",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L189",
          "evidence": "**Rich secondary indices**: Support `BTree`, `Bitmap`, `Full text search`, `Label list`,"
        },
        {
          "url": "https://github.com/lancedb/lance#L189",
          "evidence": "**Rich secondary indices**: Support `BTree`, `Bitmap`, `Full text search`, `Label list`,"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "create a lance dataset using the oxford pet dataset to do some preliminary performance testing of lance as compared to parquet and raw image/xmls",
      "normalized_text": "Create a lance dataset using the oxford pet dataset to do some preliminary performance testing of lance as compared t...",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L208",
          "evidence": "We create a Lance dataset using the Oxford Pet dataset to do some preliminary performance testing of Lance as compared to Parquet and raw image/XMLs. For analytics queries, Lance is 50-100x better than reading the raw metadata. For batched random access, Lance is 100x better than both parquet and raw files."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "building yet another data format",
      "normalized_text": "Building yet another data format",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L212",
          "evidence": "## Why are you building yet another data format?!"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "integrate into data infrastructure and slow to train over cloud storage",
      "normalized_text": "Integrate into data infrastructure and slow to train over cloud storage",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L231",
          "evidence": "is difficult to integrate into data infrastructure and slow to train over cloud storage."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "analyze data, they have to convert the data into training-friendly formats, such",
      "normalized_text": "Analyze data, they have to convert the data into training-friendly formats, such",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L233",
          "evidence": "or Google BigQuery) to collect and analyze data, they have to convert the data into training-friendly formats, such"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "support | rich | rich | decent | limited | rich | rich |",
      "normalized_text": "Support | rich | rich | decent | limited | rich | rich |",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L250",
          "evidence": "| Infra Support       | Rich  | Rich          | Decent     | Limited  | Rich     | Rich      |"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "processing of multi-modal data",
      "normalized_text": "Processing of multi-modal data",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L258",
          "evidence": "* Self-driving car company for large-scale storage, retrieval and processing of multi-modal data."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "High-performance random access: 100x faster than Parquet without sacrificing scan performance.",
      "normalized_text": "High-performance random access: 100x faster than parquet without sacrificing scan performance.",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L41",
          "evidence": "* **High-performance random access:** 100x faster than Parquet without sacrificing scan performance."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Nested fields**: Lance stores each subfield as a separate column to support efficient filters like \u201cfind images where detected objects include cats\u201d.",
      "normalized_text": "*nested fields**: lance stores each subfield as a separate column to support efficient filters like \u201cfind images wher...",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L183",
          "evidence": "**Nested fields**: Lance stores each subfield as a separate column to support efficient filters like \u201cfind images where detected objects include cats\u201d."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Versioning**: A Manifest can be used to record snapshots. Currently we support creating new versions automatically via appends, overwrites, and index creation.",
      "normalized_text": "*versioning**: a manifest can be used to record snapshots. currently we support creating new versions automatically v...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L185",
          "evidence": "**Versioning**: A Manifest can be used to record snapshots. Currently we support creating new versions automatically via appends, overwrites, and index creation."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*Fast updates** (ROADMAP): Updates will be supported via write-ahead logs.",
      "normalized_text": "*fast updates** (roadmap): updates will be supported via write-ahead logs.",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L187",
          "evidence": "**Fast updates** (ROADMAP): Updates will be supported via write-ahead logs."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Transforming Multimodal Data Management with LanceDB, Ray Summit, Oct 2024.",
      "normalized_text": "Transforming multimodal data management with lancedb, ray summit, oct 2024.",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/lancedb/lance#L265",
          "evidence": "* [Transforming Multimodal Data Management with LanceDB, Ray Summit](https://www.youtube.com/watch?v=xmTFEzAh8ho), Oct 2024."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run php /var/www/html/bin/build -v",
      "normalized_text": "Run php /var/www/html/bin/build -v",
      "category": "Automation & AI",
      "sources": [
        {
          "url": "https://github.com/umpirsky/country-list#L60",
          "evidence": "$ docker-compose run php /var/www/html/bin/build -v"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run your project's test suite, then you should add it as a development-time dependency:",
      "normalized_text": "Run your project's test suite, then you should add it as a development-time dependency:",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/theseer/tokenizer#L13",
          "evidence": "If you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Modern CMake practices",
      "normalized_text": "Modern cmake practices",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L19",
          "evidence": "- [Modern CMake practices](https://pabloariasal.github.io/2018/02/19/its-time-to-do-cmake-right/)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Suited for single header libraries and projects of any scale",
      "normalized_text": "Suited for single header libraries and projects of any scale",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L20",
          "evidence": "- Suited for single header libraries and projects of any scale"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Clean separation of library and executable code",
      "normalized_text": "Clean separation of library and executable code",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L21",
          "evidence": "- Clean separation of library and executable code"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Integrated test suite",
      "normalized_text": "Integrated test suite",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L22",
          "evidence": "- Integrated test suite"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L22",
          "evidence": "- Integrated test suite"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "Continuous integration via GitHub Actions",
      "normalized_text": "Continuous integration via github actions",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L23",
          "evidence": "- Continuous integration via [GitHub Actions](https://help.github.com/en/actions/)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Code coverage via codecov",
      "normalized_text": "Code coverage via codecov",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L24",
          "evidence": "- Code coverage via [codecov](https://codecov.io)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Code formatting enforced by clang-format and cmake-format via Format.cmake",
      "normalized_text": "Code formatting enforced by clang-format and cmake-format via format.cmake",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L25",
          "evidence": "- Code formatting enforced by [clang-format](https://clang.llvm.org/docs/ClangFormat.html) and [cmake-format](https://github.com/cheshirekow/cmake_format) via [Format.cmake](https://github.com/TheLartians/Format.cmake)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Reproducible dependency management via CPM.cmake",
      "normalized_text": "Reproducible dependency management via cpm.cmake",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L26",
          "evidence": "- Reproducible dependency management via [CPM.cmake](https://github.com/TheLartians/CPM.cmake)"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L26",
          "evidence": "- Reproducible dependency management via [CPM.cmake](https://github.com/TheLartians/CPM.cmake)"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "Installable target with automatic versioning information and header generation via PackageProject.cmake",
      "normalized_text": "Installable target with automatic versioning information and header generation via packageproject.cmake",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L27",
          "evidence": "- Installable target with automatic versioning information and header generation via [PackageProject.cmake](https://github.com/TheLartians/PackageProject.cmake)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Automatic documentation and deployment with Doxygen and GitHub Pages",
      "normalized_text": "Automatic documentation and deployment with doxygen and github pages",
      "category": "Documentation",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L28",
          "evidence": "- Automatic [documentation](https://thelartians.github.io/ModernCppStarter) and deployment with [Doxygen](https://www.doxygen.nl) and [GitHub Pages](https://pages.github.com)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Support for sanitizer tools, and more",
      "normalized_text": "Support for sanitizer tools, and more",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L29",
          "evidence": "- Support for [sanitizer tools, and more](#additional-tools)"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L29",
          "evidence": "- Support for [sanitizer tools, and more](#additional-tools)"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L29",
          "evidence": "- Support for [sanitizer tools, and more](#additional-tools)"
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "build all subprojects at once](#build-everything-at-once)",
      "normalized_text": "Build all subprojects at once](#build-everything-at-once)",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L48",
          "evidence": "During development it is usually convenient to [build all subprojects at once](#build-everything-at-once)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build and run the standalone target",
      "normalized_text": "Build and run the standalone target",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L50",
          "evidence": "### Build and run the standalone target"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L50",
          "evidence": "### Build and run the standalone target"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L52",
          "evidence": "Use the following command to build and run the executable target."
        }
      ],
      "frequency": 3,
      "uniqueness_score": 0.3333333333333333
    },
    {
      "text": "run the executable target",
      "normalized_text": "Run the executable target",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L52",
          "evidence": "Use the following command to build and run the executable target."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build build/standalone",
      "normalized_text": "Build build/standalone",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L56",
          "evidence": "cmake --build build/standalone"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build and run test suite",
      "normalized_text": "Build and run test suite",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L60",
          "evidence": "### Build and run test suite"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run the test suite",
      "normalized_text": "Run the test suite",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L62",
          "evidence": "Use the following commands from the project's root directory to run the test suite."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build build/test",
      "normalized_text": "Build build/test",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L66",
          "evidence": "cmake --build build/test"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build build/test --target fix-format",
      "normalized_text": "Build build/test --target fix-format",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L67",
          "evidence": "CTEST_OUTPUT_ON_FAILURE=1 cmake --build build/test --target test"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L84",
          "evidence": "cmake --build build/test --target format"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L87",
          "evidence": "cmake --build build/test --target fix-format"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L127",
          "evidence": "cmake --build build --target GenerateDocs"
        }
      ],
      "frequency": 4,
      "uniqueness_score": 0.25
    },
    {
      "text": "run cmake with the `-denable_test_coverage=1` option",
      "normalized_text": "Run cmake with the `-denable_test_coverage=1` option",
      "category": "Developer Tools",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L73",
          "evidence": "To collect code coverage information, run CMake with the `-DENABLE_TEST_COVERAGE=1` option."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run clang-format",
      "normalized_text": "Run clang-format",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L75",
          "evidence": "### Run clang-format"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build the documentation",
      "normalized_text": "Build the documentation",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L97",
          "evidence": "### Build the documentation"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build documentation, call the following command",
      "normalized_text": "Build documentation, call the following command",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L100",
          "evidence": "To manually build documentation, call the following command."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build build/doc --target generatedocs",
      "normalized_text": "Build build/doc --target generatedocs",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L104",
          "evidence": "cmake --build build/doc --target GenerateDocs"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build the documentation locally, you will need doxygen, jinja2 and pygments installed on your system",
      "normalized_text": "Build the documentation locally, you will need doxygen, jinja2 and pygments installed on your system",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L109",
          "evidence": "To build the documentation locally, you will need Doxygen, jinja2 and Pygments installed on your system."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build everything at once",
      "normalized_text": "Build everything at once",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L111",
          "evidence": "### Build everything at once"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows building all targets at the same time",
      "normalized_text": "Allows building all targets at the same time",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L113",
          "evidence": "The project also includes an `all` directory that allows building all targets at the same time."
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L113",
          "evidence": "The project also includes an `all` directory that allows building all targets at the same time."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "includes an `all` directory that allows building all targets at the same time",
      "normalized_text": "Includes an `all` directory that allows building all targets at the same time",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L113",
          "evidence": "The project also includes an `all` directory that allows building all targets at the same time."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "builds of the library",
      "normalized_text": "Builds of the library",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L114",
          "evidence": "This is useful during development, as it exposes all subprojects to your IDE and avoids redundant builds of the library."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build build --target fix-format",
      "normalized_text": "Build build --target fix-format",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L123",
          "evidence": "cmake --build build --target fix-format"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "include the [tools",
      "normalized_text": "Include the [tools",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L132",
          "evidence": "The test and standalone subprojects include the [tools.cmake](cmake/tools.cmake) file which is used to import additional tools on-demand through CMake configuration arguments."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import additional tools on-demand through cmake configuration arguments",
      "normalized_text": "Import additional tools on-demand through cmake configuration arguments",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L132",
          "evidence": "The test and standalone subprojects include the [tools.cmake](cmake/tools.cmake) file which is used to import additional tools on-demand through CMake configuration arguments."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build the standalone and tests at the same time",
      "normalized_text": "Build the standalone and tests at the same time",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L160",
          "evidence": "> Can I build the standalone and tests at the same time? / How can I tell my IDE about all subprojects?"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allow ides to see the scope of the project, the template includes the `all` directory that will create a single build for all subprojects",
      "normalized_text": "Allow ides to see the scope of the project, the template includes the `all` directory that will create a single build...",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L164",
          "evidence": "To allow IDEs to see the full scope of the project, the template includes the `all` directory that will create a single build for all subprojects."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "includes the `all` directory that will create a single build for all subprojects",
      "normalized_text": "Includes the `all` directory that will create a single build for all subprojects",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L164",
          "evidence": "To allow IDEs to see the full scope of the project, the template includes the `all` directory that will create a single build for all subprojects."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a single build for all subprojects",
      "normalized_text": "Create a single build for all subprojects",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L164",
          "evidence": "To allow IDEs to see the full scope of the project, the template includes the `all` directory that will create a single build for all subprojects."
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L164",
          "evidence": "To allow IDEs to see the full scope of the project, the template includes the `all` directory that will create a single build for all subprojects."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "create additional targets that depend on my library",
      "normalized_text": "Create additional targets that depend on my library",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L172",
          "evidence": "> I want create additional targets that depend on my library. Should I modify the main CMakeLists to include them?"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build system hard to reason about",
      "normalized_text": "Build system hard to reason about",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L174",
          "evidence": "Avoid including derived projects from the libraries CMakeLists (even though it is a common sight in the C++ world), as this effectively inverts the dependency tree and makes the build system hard to reason about."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create a new directory or project with a cmakelists that adds the library as a dependency (e",
      "normalized_text": "Create a new directory or project with a cmakelists that adds the library as a dependency (e",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L175",
          "evidence": "Instead, create a new directory or project with a CMakeLists that adds the library as a dependency (e.g. like the [standalone](standalone/CMakeLists.txt) directory)."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable users to use the project with their favorite external c++ dependency manager, such as vcpkg or conan",
      "normalized_text": "Enable users to use the project with their favorite external c++ dependency manager, such as vcpkg or conan",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L183",
          "evidence": "This should also enable users to use the project with their favorite external C++ dependency manager, such as vcpkg or Conan."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "configure and build my project offline",
      "normalized_text": "Configure and build my project offline",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L185",
          "evidence": "> Can I configure and build my project offline?"
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L185",
          "evidence": "> Can I configure and build my project offline?"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "building the project, however when using cpm missing dependencies are downloaded at configure time",
      "normalized_text": "Building the project, however when using cpm missing dependencies are downloaded at configure time",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L187",
          "evidence": "No internet connection is required for building the project, however when using CPM missing dependencies are downloaded at configure time."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export cpm_source_cache=$home/",
      "normalized_text": "Export cpm_source_cache=$home/",
      "category": "Performance",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L188",
          "evidence": "To avoid redundant downloads, it's highly recommended to set a CPM.cmake cache directory, e.g.: `export CPM_SOURCE_CACHE=$HOME/.cache/CPM`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable shallow clones and allow offline configurations dependencies are already available in the cache",
      "normalized_text": "Enable shallow clones and allow offline configurations dependencies are already available in the cache",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L189",
          "evidence": "This will enable shallow clones and allow offline configurations dependencies are already available in the cache."
        },
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L189",
          "evidence": "This will enable shallow clones and allow offline configurations dependencies are already available in the cache."
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "create a package installer for my project",
      "normalized_text": "Create a package installer for my project",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L191",
          "evidence": "> Can I use CPack to create a package installer for my project?"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "- Remember to rename the `include/greeter` directory to use your project's lowercase name and update all relevant `#include`s accordingly.",
      "normalized_text": "- remember to rename the `include/greeter` directory to use your project's lowercase name and update all relevant `#i...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L38",
          "evidence": "- Remember to rename the `include/greeter` directory to use your project's lowercase name and update all relevant `#include`s accordingly."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "ModernCppStarter & PVS-Studio Static Code Analyzer: Official instructions on how to use the ModernCppStarter with the PVS-Studio Static Code Analyzer.",
      "normalized_text": "Moderncppstarter & pvs-studio static code analyzer: official instructions on how to use the moderncppstarter with the...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L201",
          "evidence": "- [**ModernCppStarter & PVS-Studio Static Code Analyzer**](https://github.com/viva64/pvs-studio-cmake-examples/tree/master/modern-cpp-starter): Official instructions on how to use the ModernCppStarter with the PVS-Studio Static Code Analyzer."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "cpp-best-practices/gui_starter_template: A popular C++ starter project, created in 2017.",
      "normalized_text": "Cpp-best-practices/gui_starter_template: a popular c++ starter project, created in 2017.",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L202",
          "evidence": "- [**cpp-best-practices/gui_starter_template**](https://github.com/cpp-best-practices/gui_starter_template/): A popular C++ starter project, created in 2017."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "filipdutescu/modern-cpp-template: A recent starter using a more traditional approach for CMake structure and dependency management.",
      "normalized_text": "Filipdutescu/modern-cpp-template: a recent starter using a more traditional approach for cmake structure and dependen...",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/TheLartians/ModernCppStarter#L203",
          "evidence": "- [**filipdutescu/modern-cpp-template**](https://github.com/filipdutescu/modern-cpp-template): A recent starter using a more traditional approach for CMake structure and dependency management."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import math, sys;",
      "normalized_text": "Import math, sys;",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L59",
          "evidence": "import math, sys;"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "-r, --recursive run recursively over directories; must be used with",
      "normalized_text": "-r, --recursive run recursively over directories; must be used with",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L160",
          "evidence": "-r, --recursive       run recursively over directories; must be used with"
        },
        {
          "url": "https://github.com/hhatto/autopep8#L160",
          "evidence": "-r, --recursive       run recursively over directories; must be used with"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "-a, --aggressive enable non-whitespace changes; multiple -a result in",
      "normalized_text": "-a, --aggressive enable non-whitespace changes; multiple -a result in",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L167",
          "evidence": "-a, --aggressive      enable non-whitespace changes; multiple -a result in"
        },
        {
          "url": "https://github.com/hhatto/autopep8#L167",
          "evidence": "-a, --aggressive      enable non-whitespace changes; multiple -a result in"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "--experimental enable experimental fixes",
      "normalized_text": "--experimental enable experimental fixes",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L169",
          "evidence": "--experimental        enable experimental fixes"
        },
        {
          "url": "https://github.com/hhatto/autopep8#L169",
          "evidence": "--experimental        enable experimental fixes"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "imports on separate lines",
      "normalized_text": "Imports on separate lines",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L229",
          "evidence": "E401 - Put imports on separate lines."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "import not at top of file",
      "normalized_text": "Import not at top of file",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L230",
          "evidence": "E402 - Fix module level import not at top of file"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable only a subset of the fixes, use the ``--select`` option",
      "normalized_text": "Enable only a subset of the fixes, use the ``--select`` option",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L293",
          "evidence": "To enable only a subset of the fixes, use the ``--select`` option. For example,"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enable verbose progress",
      "normalized_text": "Enable verbose progress",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L298",
          "evidence": "If the file being fixed is large, you may want to enable verbose progress"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "enables the following functionality:",
      "normalized_text": "Enables the following functionality:",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L303",
          "evidence": "Passing in ``--experimental`` enables the following functionality:"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `pre-commit autoupdate`",
      "normalized_text": "Run `pre-commit autoupdate`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L395",
          "evidence": "rev: ...  # select the tag or revision you want, or run `pre-commit autoupdate`"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run directly via",
      "normalized_text": "Run directly via",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L405",
          "evidence": "Test cases are in ``test/test_autopep8.py``. They can be run directly via"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run ``autopep8``",
      "normalized_text": "Run ``autopep8``",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L426",
          "evidence": "``pkg_resources.DistributionNotFound`` when trying to run ``autopep8``. Try"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "--max-line-length n set maximum allowed line length (default: 79)",
      "normalized_text": "--max-line-length n set maximum allowed line length (default: 79)",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L176",
          "evidence": "--max-line-length n   set maximum allowed line length (default: 79)"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "Remove blank lines between a function declaration and its docstring. (Enabled",
      "normalized_text": "Remove blank lines between a function declaration and its docstring. (enabled",
      "category": "Documentation",
      "sources": [
        {
          "url": "https://github.com/hhatto/autopep8#L255",
          "evidence": "- Remove blank lines between a function declaration and its docstring. (Enabled"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "build status][build-badge]][build]",
      "normalized_text": "Build status][build-badge]][build]",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L5",
          "evidence": "[![Build Status][build-badge]][build]"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "runs `prettier` since `eslint` cannot process those",
      "normalized_text": "Runs `prettier` since `eslint` cannot process those",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L36",
          "evidence": "> runs `prettier` since `eslint` cannot process those."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "create the options based on the the `eslintconfig` (whether that's",
      "normalized_text": "Create the options based on the the `eslintconfig` (whether that's",
      "category": "Configuration",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L99",
          "evidence": "`prettier-eslint` will attempt to create the options based on the `eslintConfig`"
        },
        {
          "url": "https://github.com/prettier/prettier-eslint#L111",
          "evidence": "able to create the options based on the the `eslintConfig` (whether that's"
        }
      ],
      "frequency": 2,
      "uniqueness_score": 0.5
    },
    {
      "text": "provide the path to it with the `eslintpath` option",
      "normalized_text": "Provide the path to it with the `eslintpath` option",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L128",
          "evidence": "use, then you can provide the full path to it with the `eslintPath` option."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `prettier` first, then `eslint --fix`",
      "normalized_text": "Run `prettier` first, then `eslint --fix`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L136",
          "evidence": "By default, `prettier-eslint` will run `prettier` first, then `eslint --fix`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "provide `prettierlast: true`, it will run `eslint --fix` first, then `prettier`",
      "normalized_text": "Provide `prettierlast: true`, it will run `eslint --fix` first, then `prettier`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L141",
          "evidence": "provide `prettierLast: true`, it will run `eslint --fix` first, then `prettier`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "run `eslint --fix` first, then `prettier`",
      "normalized_text": "Run `eslint --fix` first, then `prettier`",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L141",
          "evidence": "provide `prettierLast: true`, it will run `eslint --fix` first, then `prettier`."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "allows you to use `eslint` to look for bugs and/or bad practices, and use",
      "normalized_text": "Allows you to use `eslint` to look for bugs and/or bad practices, and use",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L142",
          "evidence": "This allows you to use `eslint` to look for bugs and/or bad practices, and use"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "analyze } = require('prettier-eslint');",
      "normalized_text": "Analyze } = require('prettier-eslint');",
      "category": "User Interface",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L154",
          "evidence": "const { analyze } = require('prettier-eslint');"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "export `analyze` is identical to `format` except that it",
      "normalized_text": "Export `analyze` is identical to `format` except that it",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L182",
          "evidence": "The additional export `analyze` is identical to `format` except that it"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "perform the formatting but also capture any errors that",
      "normalized_text": "Perform the formatting but also capture any errors that",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L187",
          "evidence": "would like to perform the formatting but also capture any errors that"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "plugin (check the \"eslint integration\"",
      "normalized_text": "Plugin (check the \"eslint integration\"",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L291",
          "evidence": "- [`prettier-atom`][atom-plugin] - Atom plugin (check the \"ESlint integration\""
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "integrates it with the regular eslint workflow",
      "normalized_text": "Integrates it with the regular eslint workflow",
      "category": "Core Functionality",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L295",
          "evidence": "ESLint plugin. While `prettier-eslint` uses `eslint --fix` to change the output of `prettier`, `eslint-plugin-prettier` keeps the `prettier` output as-is and integrates it with the regular ESLint workflow."
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "*An important thing to note** about this inference is that it may not support",
      "normalized_text": "*an important thing to note** about this inference is that it may not support",
      "category": "Uncategorized",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L204",
          "evidence": "**An important thing to note** about this inference is that it may not support"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "[`prettier-atom`][atom-plugin] - Atom plugin (check the \"ESlint integration\"",
      "normalized_text": "[`prettier-atom`][atom-plugin] - atom plugin (check the \"eslint integration\"",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L291",
          "evidence": "- [`prettier-atom`][atom-plugin] - Atom plugin (check the \"ESlint integration\""
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "[`vs-code-prettier-eslint`][vscode-plugin] - Visual Studio Code plugin",
      "normalized_text": "[`vs-code-prettier-eslint`][vscode-plugin] - visual studio code plugin",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L293",
          "evidence": "- [`vs-code-prettier-eslint`][vscode-plugin] - Visual Studio Code plugin"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`eslint-plugin-prettier` -",
      "normalized_text": "`eslint-plugin-prettier` -",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L294",
          "evidence": "- [`eslint-plugin-prettier`](https://github.com/prettier/eslint-plugin-prettier) -"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    },
    {
      "text": "`prettier-eslint-webpack-plugin` -",
      "normalized_text": "`prettier-eslint-webpack-plugin` -",
      "category": "Integration & APIs",
      "sources": [
        {
          "url": "https://github.com/prettier/prettier-eslint#L296",
          "evidence": "- [`prettier-eslint-webpack-plugin`](https://github.com/danielterwiel/prettier-eslint-webpack-plugin) -"
        }
      ],
      "frequency": 1,
      "uniqueness_score": 1.0
    }
  ],
  "categories": {
    "Uncategorized": 178,
    "Core Functionality": 15,
    "Integration & APIs": 27,
    "User Interface": 63,
    "Automation & AI": 31,
    "Configuration": 24,
    "Developer Tools": 13,
    "Documentation": 4,
    "Performance": 7,
    "Community": 2
  }
}